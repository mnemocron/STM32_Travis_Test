
Travis_CI_Test_f103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002774  08002774  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002774  08002774  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002774  08002774  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002774  08002774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800277c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  080027ec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080027ec  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007855  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000178b  00000000  00000000  000278ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  00029080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  00029798  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017aa7  00000000  00000000  00029de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006530  00000000  00000000  0004188f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082f9b  00000000  00000000  00047dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cad5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b0  00000000  00000000  000cadd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080026c8 	.word	0x080026c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080026c8 	.word	0x080026c8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa7e 	bl	8000650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80e 	bl	8000174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f878 	bl	800024c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f84c 	bl	80001f8 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("foo\n");
 8000160:	4803      	ldr	r0, [pc, #12]	; (8000170 <main+0x24>)
 8000162:	f001 fea7 	bl	8001eb4 <puts>
	  HAL_Delay(1000);
 8000166:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800016a:	f000 fad3 	bl	8000714 <HAL_Delay>
	  printf("foo\n");
 800016e:	e7f7      	b.n	8000160 <main+0x14>
 8000170:	080026e0 	.word	0x080026e0

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b090      	sub	sp, #64	; 0x40
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0318 	add.w	r3, r7, #24
 800017e:	2228      	movs	r2, #40	; 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f001 fe32 	bl	8001dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000196:	2302      	movs	r3, #2
 8000198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800019e:	2310      	movs	r3, #16
 80001a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a2:	2302      	movs	r3, #2
 80001a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001a6:	2300      	movs	r3, #0
 80001a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001aa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b0:	f107 0318 	add.w	r3, r7, #24
 80001b4:	4618      	mov	r0, r3
 80001b6:	f000 fde7 	bl	8000d88 <HAL_RCC_OscConfig>
 80001ba:	4603      	mov	r3, r0
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d001      	beq.n	80001c4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001c0:	f000 f8c4 	bl	800034c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c4:	230f      	movs	r3, #15
 80001c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c8:	2302      	movs	r3, #2
 80001ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001cc:	2300      	movs	r3, #0
 80001ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2102      	movs	r1, #2
 80001de:	4618      	mov	r0, r3
 80001e0:	f001 f852 	bl	8001288 <HAL_RCC_ClockConfig>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d001      	beq.n	80001ee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001ea:	f000 f8af 	bl	800034c <Error_Handler>
  }
}
 80001ee:	bf00      	nop
 80001f0:	3740      	adds	r7, #64	; 0x40
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
	...

080001f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80001fc:	4b11      	ldr	r3, [pc, #68]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 80001fe:	4a12      	ldr	r2, [pc, #72]	; (8000248 <MX_USART2_UART_Init+0x50>)
 8000200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000202:	4b10      	ldr	r3, [pc, #64]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 8000204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800020a:	4b0e      	ldr	r3, [pc, #56]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 800020c:	2200      	movs	r2, #0
 800020e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000216:	4b0b      	ldr	r3, [pc, #44]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 8000218:	2200      	movs	r2, #0
 800021a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800021c:	4b09      	ldr	r3, [pc, #36]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 800021e:	220c      	movs	r2, #12
 8000220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000222:	4b08      	ldr	r3, [pc, #32]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 8000224:	2200      	movs	r2, #0
 8000226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 800022a:	2200      	movs	r2, #0
 800022c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <MX_USART2_UART_Init+0x4c>)
 8000230:	f001 f9c6 	bl	80015c0 <HAL_UART_Init>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800023a:	f000 f887 	bl	800034c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	20000098 	.word	0x20000098
 8000248:	40004400 	.word	0x40004400

0800024c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000260:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <MX_GPIO_Init+0xcc>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	4a2c      	ldr	r2, [pc, #176]	; (8000318 <MX_GPIO_Init+0xcc>)
 8000266:	f043 0310 	orr.w	r3, r3, #16
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	4b2a      	ldr	r3, [pc, #168]	; (8000318 <MX_GPIO_Init+0xcc>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	f003 0310 	and.w	r3, r3, #16
 8000274:	60fb      	str	r3, [r7, #12]
 8000276:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000278:	4b27      	ldr	r3, [pc, #156]	; (8000318 <MX_GPIO_Init+0xcc>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	4a26      	ldr	r2, [pc, #152]	; (8000318 <MX_GPIO_Init+0xcc>)
 800027e:	f043 0320 	orr.w	r3, r3, #32
 8000282:	6193      	str	r3, [r2, #24]
 8000284:	4b24      	ldr	r3, [pc, #144]	; (8000318 <MX_GPIO_Init+0xcc>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	f003 0320 	and.w	r3, r3, #32
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000290:	4b21      	ldr	r3, [pc, #132]	; (8000318 <MX_GPIO_Init+0xcc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a20      	ldr	r2, [pc, #128]	; (8000318 <MX_GPIO_Init+0xcc>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b1e      	ldr	r3, [pc, #120]	; (8000318 <MX_GPIO_Init+0xcc>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0304 	and.w	r3, r3, #4
 80002a4:	607b      	str	r3, [r7, #4]
 80002a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <MX_GPIO_Init+0xcc>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a1a      	ldr	r2, [pc, #104]	; (8000318 <MX_GPIO_Init+0xcc>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MX_GPIO_Init+0xcc>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0308 	and.w	r3, r3, #8
 80002bc:	603b      	str	r3, [r7, #0]
 80002be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2120      	movs	r1, #32
 80002c4:	4815      	ldr	r0, [pc, #84]	; (800031c <MX_GPIO_Init+0xd0>)
 80002c6:	f000 fd25 	bl	8000d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d0:	4b13      	ldr	r3, [pc, #76]	; (8000320 <MX_GPIO_Init+0xd4>)
 80002d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	4811      	ldr	r0, [pc, #68]	; (8000324 <MX_GPIO_Init+0xd8>)
 80002e0:	f000 fbbe 	bl	8000a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002e4:	2320      	movs	r3, #32
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	2302      	movs	r3, #2
 80002f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002f4:	f107 0310 	add.w	r3, r7, #16
 80002f8:	4619      	mov	r1, r3
 80002fa:	4808      	ldr	r0, [pc, #32]	; (800031c <MX_GPIO_Init+0xd0>)
 80002fc:	f000 fbb0 	bl	8000a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	2100      	movs	r1, #0
 8000304:	2028      	movs	r0, #40	; 0x28
 8000306:	f000 fafe 	bl	8000906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800030a:	2028      	movs	r0, #40	; 0x28
 800030c:	f000 fb17 	bl	800093e <HAL_NVIC_EnableIRQ>

}
 8000310:	bf00      	nop
 8000312:	3720      	adds	r7, #32
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40021000 	.word	0x40021000
 800031c:	40010800 	.word	0x40010800
 8000320:	10110000 	.word	0x10110000
 8000324:	40011000 	.word	0x40011000

08000328 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 * @see    https://github.com/STMicroelectronics/STM32CubeF4/blob/master/Projects/STM32F401RE-Nucleo/Examples/UART/UART_Printf/Src/main.c
 */
PUTCHAR_PROTOTYPE {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 1);
 8000330:	1d39      	adds	r1, r7, #4
 8000332:	2301      	movs	r3, #1
 8000334:	2201      	movs	r2, #1
 8000336:	4804      	ldr	r0, [pc, #16]	; (8000348 <__io_putchar+0x20>)
 8000338:	f001 f98f 	bl	800165a <HAL_UART_Transmit>

	return ch;
 800033c:	687b      	ldr	r3, [r7, #4]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000098 	.word	0x20000098

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000350:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000352:	e7fe      	b.n	8000352 <Error_Handler+0x6>

08000354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_MspInit+0x5c>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <HAL_MspInit+0x5c>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <HAL_MspInit+0x5c>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0301 	and.w	r3, r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <HAL_MspInit+0x5c>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <HAL_MspInit+0x5c>)
 8000378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800037c:	61d3      	str	r3, [r2, #28]
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <HAL_MspInit+0x5c>)
 8000380:	69db      	ldr	r3, [r3, #28]
 8000382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <HAL_MspInit+0x60>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <HAL_MspInit+0x60>)
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a6:	bf00      	nop
 80003a8:	3714      	adds	r7, #20
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010000 	.word	0x40010000

080003b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a19      	ldr	r2, [pc, #100]	; (8000438 <HAL_UART_MspInit+0x80>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d12b      	bne.n	8000430 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <HAL_UART_MspInit+0x84>)
 80003da:	69db      	ldr	r3, [r3, #28]
 80003dc:	4a17      	ldr	r2, [pc, #92]	; (800043c <HAL_UART_MspInit+0x84>)
 80003de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e2:	61d3      	str	r3, [r2, #28]
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_UART_MspInit+0x84>)
 80003e6:	69db      	ldr	r3, [r3, #28]
 80003e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_UART_MspInit+0x84>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a11      	ldr	r2, [pc, #68]	; (800043c <HAL_UART_MspInit+0x84>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_UART_MspInit+0x84>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000408:	230c      	movs	r3, #12
 800040a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800040c:	2302      	movs	r3, #2
 800040e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	4809      	ldr	r0, [pc, #36]	; (8000440 <HAL_UART_MspInit+0x88>)
 800041c:	f000 fb20 	bl	8000a60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	2026      	movs	r0, #38	; 0x26
 8000426:	f000 fa6e 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f000 fa87 	bl	800093e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000430:	bf00      	nop
 8000432:	3720      	adds	r7, #32
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40004400 	.word	0x40004400
 800043c:	40021000 	.word	0x40021000
 8000440:	40010800 	.word	0x40010800

08000444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <NMI_Handler+0x4>

0800044a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <HardFault_Handler+0x4>

08000450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <MemManage_Handler+0x4>

08000456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <BusFault_Handler+0x4>

0800045c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <UsageFault_Handler+0x4>

08000462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	bc80      	pop	{r7}
 800046c:	4770      	bx	lr

0800046e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800048a:	f000 f927 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <USART2_IRQHandler+0x10>)
 800049a:	f001 f971 	bl	8001780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000098 	.word	0x20000098

080004a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80004ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004b0:	f000 fc48 	bl	8000d44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	60f8      	str	r0, [r7, #12]
 80004c0:	60b9      	str	r1, [r7, #8]
 80004c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	e00a      	b.n	80004e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004ca:	f3af 8000 	nop.w
 80004ce:	4601      	mov	r1, r0
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	60ba      	str	r2, [r7, #8]
 80004d6:	b2ca      	uxtb	r2, r1
 80004d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	3301      	adds	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	697a      	ldr	r2, [r7, #20]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	dbf0      	blt.n	80004ca <_read+0x12>
	}

return len;
 80004e8:	687b      	ldr	r3, [r7, #4]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b086      	sub	sp, #24
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	60f8      	str	r0, [r7, #12]
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
 8000502:	e009      	b.n	8000518 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	60ba      	str	r2, [r7, #8]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff0b 	bl	8000328 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	3301      	adds	r3, #1
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	697a      	ldr	r2, [r7, #20]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	429a      	cmp	r2, r3
 800051e:	dbf1      	blt.n	8000504 <_write+0x12>
	}
	return len;
 8000520:	687b      	ldr	r3, [r7, #4]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <_close>:

int _close(int file)
{
 800052a:	b480      	push	{r7}
 800052c:	b083      	sub	sp, #12
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	return -1;
 8000532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000550:	605a      	str	r2, [r3, #4]
	return 0;
 8000552:	2300      	movs	r3, #0
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_isatty>:

int _isatty(int file)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
	return 1;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	60f8      	str	r0, [r7, #12]
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	607a      	str	r2, [r7, #4]
	return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
	...

0800058c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <_sbrk+0x5c>)
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <_sbrk+0x60>)
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a0:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <_sbrk+0x64>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <_sbrk+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d207      	bcs.n	80005cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005bc:	f001 fbec 	bl	8001d98 <__errno>
 80005c0:	4602      	mov	r2, r0
 80005c2:	230c      	movs	r3, #12
 80005c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	e009      	b.n	80005e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <_sbrk+0x64>)
 80005dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20005000 	.word	0x20005000
 80005ec:	00000400 	.word	0x00000400
 80005f0:	2000008c 	.word	0x2000008c
 80005f4:	200000e0 	.word	0x200000e0

080005f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000604:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000606:	e003      	b.n	8000610 <LoopCopyDataInit>

08000608 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800060a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800060c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800060e:	3104      	adds	r1, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000610:	480a      	ldr	r0, [pc, #40]	; (800063c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000614:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000616:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000618:	d3f6      	bcc.n	8000608 <CopyDataInit>
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800061c:	e002      	b.n	8000624 <LoopFillZerobss>

0800061e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000620:	f842 3b04 	str.w	r3, [r2], #4

08000624 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000626:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000628:	d3f9      	bcc.n	800061e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062a:	f7ff ffe5 	bl	80005f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062e:	f001 fbb9 	bl	8001da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000632:	f7ff fd8b 	bl	800014c <main>
  bx lr
 8000636:	4770      	bx	lr
  ldr r3, =_sidata
 8000638:	0800277c 	.word	0x0800277c
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000640:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000644:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000648:	200000e0 	.word	0x200000e0

0800064c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_2_IRQHandler>
	...

08000650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <HAL_Init+0x28>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <HAL_Init+0x28>)
 800065a:	f043 0310 	orr.w	r3, r3, #16
 800065e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f945 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f808 	bl	800067c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800066c:	f7ff fe72 	bl	8000354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40022000 	.word	0x40022000

0800067c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_InitTick+0x54>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x58>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	4619      	mov	r1, r3
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	fbb3 f3f1 	udiv	r3, r3, r1
 8000696:	fbb2 f3f3 	udiv	r3, r2, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f95d 	bl	800095a <HAL_SYSTICK_Config>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	e00e      	b.n	80006c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	d80a      	bhi.n	80006c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b0:	2200      	movs	r2, #0
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	f04f 30ff 	mov.w	r0, #4294967295
 80006b8:	f000 f925 	bl	8000906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <HAL_InitTick+0x5c>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e000      	b.n	80006c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	20000004 	.word	0x20000004

080006dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a03      	ldr	r2, [pc, #12]	; (80006fc <HAL_IncTick+0x20>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	20000008 	.word	0x20000008
 80006fc:	200000d8 	.word	0x200000d8

08000700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b02      	ldr	r3, [pc, #8]	; (8000710 <HAL_GetTick+0x10>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	200000d8 	.word	0x200000d8

08000714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800071c:	f7ff fff0 	bl	8000700 <HAL_GetTick>
 8000720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800072c:	d005      	beq.n	800073a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_Delay+0x40>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073a:	bf00      	nop
 800073c:	f7ff ffe0 	bl	8000700 <HAL_GetTick>
 8000740:	4602      	mov	r2, r0
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d8f7      	bhi.n	800073c <HAL_Delay+0x28>
  {
  }
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000008 	.word	0x20000008

08000758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000774:	4013      	ands	r3, r2
 8000776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800078a:	4a04      	ldr	r2, [pc, #16]	; (800079c <__NVIC_SetPriorityGrouping+0x44>)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	60d3      	str	r3, [r2, #12]
}
 8000790:	bf00      	nop
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a4:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <__NVIC_GetPriorityGrouping+0x18>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	0a1b      	lsrs	r3, r3, #8
 80007aa:	f003 0307 	and.w	r3, r3, #7
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db0b      	blt.n	80007e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	f003 021f 	and.w	r2, r3, #31
 80007d4:	4906      	ldr	r1, [pc, #24]	; (80007f0 <__NVIC_EnableIRQ+0x34>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	095b      	lsrs	r3, r3, #5
 80007dc:	2001      	movs	r0, #1
 80007de:	fa00 f202 	lsl.w	r2, r0, r2
 80007e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	; (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b480      	push	{r7}
 800084a:	b089      	sub	sp, #36	; 0x24
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2b04      	cmp	r3, #4
 8000864:	bf28      	it	cs
 8000866:	2304      	movcs	r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3304      	adds	r3, #4
 800086e:	2b06      	cmp	r3, #6
 8000870:	d902      	bls.n	8000878 <NVIC_EncodePriority+0x30>
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3b03      	subs	r3, #3
 8000876:	e000      	b.n	800087a <NVIC_EncodePriority+0x32>
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	f04f 32ff 	mov.w	r2, #4294967295
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	43da      	mvns	r2, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000890:	f04f 31ff 	mov.w	r1, #4294967295
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43d9      	mvns	r1, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a0:	4313      	orrs	r3, r2
         );
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3724      	adds	r7, #36	; 0x24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008bc:	d301      	bcc.n	80008c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2301      	movs	r3, #1
 80008c0:	e00f      	b.n	80008e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <SysTick_Config+0x40>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f7ff ff90 	bl	80007f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Config+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Config+0x40>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff2d 	bl	8000758 <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000918:	f7ff ff42 	bl	80007a0 <__NVIC_GetPriorityGrouping>
 800091c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	68b9      	ldr	r1, [r7, #8]
 8000922:	6978      	ldr	r0, [r7, #20]
 8000924:	f7ff ff90 	bl	8000848 <NVIC_EncodePriority>
 8000928:	4602      	mov	r2, r0
 800092a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff5f 	bl	80007f4 <__NVIC_SetPriority>
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff35 	bl	80007bc <__NVIC_EnableIRQ>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ffa2 	bl	80008ac <SysTick_Config>
 8000968:	4603      	mov	r3, r0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000986:	2b02      	cmp	r3, #2
 8000988:	d005      	beq.n	8000996 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2204      	movs	r2, #4
 800098e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	e051      	b.n	8000a3a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f022 020e 	bic.w	r2, r2, #14
 80009a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0201 	bic.w	r2, r2, #1
 80009b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <HAL_DMA_Abort_IT+0xd0>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d029      	beq.n	8000a14 <HAL_DMA_Abort_IT+0xa0>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a20      	ldr	r2, [pc, #128]	; (8000a48 <HAL_DMA_Abort_IT+0xd4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d022      	beq.n	8000a10 <HAL_DMA_Abort_IT+0x9c>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_DMA_Abort_IT+0xd8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d01a      	beq.n	8000a0a <HAL_DMA_Abort_IT+0x96>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <HAL_DMA_Abort_IT+0xdc>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d012      	beq.n	8000a04 <HAL_DMA_Abort_IT+0x90>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <HAL_DMA_Abort_IT+0xe0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00a      	beq.n	80009fe <HAL_DMA_Abort_IT+0x8a>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1a      	ldr	r2, [pc, #104]	; (8000a58 <HAL_DMA_Abort_IT+0xe4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d102      	bne.n	80009f8 <HAL_DMA_Abort_IT+0x84>
 80009f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009f6:	e00e      	b.n	8000a16 <HAL_DMA_Abort_IT+0xa2>
 80009f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009fc:	e00b      	b.n	8000a16 <HAL_DMA_Abort_IT+0xa2>
 80009fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a02:	e008      	b.n	8000a16 <HAL_DMA_Abort_IT+0xa2>
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	e005      	b.n	8000a16 <HAL_DMA_Abort_IT+0xa2>
 8000a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0e:	e002      	b.n	8000a16 <HAL_DMA_Abort_IT+0xa2>
 8000a10:	2310      	movs	r3, #16
 8000a12:	e000      	b.n	8000a16 <HAL_DMA_Abort_IT+0xa2>
 8000a14:	2301      	movs	r3, #1
 8000a16:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_DMA_Abort_IT+0xe8>)
 8000a18:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	4798      	blx	r3
    } 
  }
  return status;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40020008 	.word	0x40020008
 8000a48:	4002001c 	.word	0x4002001c
 8000a4c:	40020030 	.word	0x40020030
 8000a50:	40020044 	.word	0x40020044
 8000a54:	40020058 	.word	0x40020058
 8000a58:	4002006c 	.word	0x4002006c
 8000a5c:	40020000 	.word	0x40020000

08000a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b08b      	sub	sp, #44	; 0x2c
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e127      	b.n	8000cc4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a74:	2201      	movs	r2, #1
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	4013      	ands	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	f040 8116 	bne.w	8000cbe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	d034      	beq.n	8000b04 <HAL_GPIO_Init+0xa4>
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d80d      	bhi.n	8000aba <HAL_GPIO_Init+0x5a>
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d02b      	beq.n	8000afa <HAL_GPIO_Init+0x9a>
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d804      	bhi.n	8000ab0 <HAL_GPIO_Init+0x50>
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d031      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d01c      	beq.n	8000ae8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aae:	e048      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d043      	beq.n	8000b3c <HAL_GPIO_Init+0xdc>
 8000ab4:	2b11      	cmp	r3, #17
 8000ab6:	d01b      	beq.n	8000af0 <HAL_GPIO_Init+0x90>
          break;
 8000ab8:	e043      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000aba:	4a89      	ldr	r2, [pc, #548]	; (8000ce0 <HAL_GPIO_Init+0x280>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d026      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000ac0:	4a87      	ldr	r2, [pc, #540]	; (8000ce0 <HAL_GPIO_Init+0x280>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d806      	bhi.n	8000ad4 <HAL_GPIO_Init+0x74>
 8000ac6:	4a87      	ldr	r2, [pc, #540]	; (8000ce4 <HAL_GPIO_Init+0x284>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d020      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000acc:	4a86      	ldr	r2, [pc, #536]	; (8000ce8 <HAL_GPIO_Init+0x288>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d01d      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
          break;
 8000ad2:	e036      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ad4:	4a85      	ldr	r2, [pc, #532]	; (8000cec <HAL_GPIO_Init+0x28c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d019      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000ada:	4a85      	ldr	r2, [pc, #532]	; (8000cf0 <HAL_GPIO_Init+0x290>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d016      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
 8000ae0:	4a84      	ldr	r2, [pc, #528]	; (8000cf4 <HAL_GPIO_Init+0x294>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0xae>
          break;
 8000ae6:	e02c      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	623b      	str	r3, [r7, #32]
          break;
 8000aee:	e028      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	623b      	str	r3, [r7, #32]
          break;
 8000af8:	e023      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	3308      	adds	r3, #8
 8000b00:	623b      	str	r3, [r7, #32]
          break;
 8000b02:	e01e      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	330c      	adds	r3, #12
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e019      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d102      	bne.n	8000b1c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b16:	2304      	movs	r3, #4
 8000b18:	623b      	str	r3, [r7, #32]
          break;
 8000b1a:	e012      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d105      	bne.n	8000b30 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b24:	2308      	movs	r3, #8
 8000b26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	611a      	str	r2, [r3, #16]
          break;
 8000b2e:	e008      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b30:	2308      	movs	r3, #8
 8000b32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	615a      	str	r2, [r3, #20]
          break;
 8000b3a:	e002      	b.n	8000b42 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	2bff      	cmp	r3, #255	; 0xff
 8000b46:	d801      	bhi.n	8000b4c <HAL_GPIO_Init+0xec>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	e001      	b.n	8000b50 <HAL_GPIO_Init+0xf0>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	2bff      	cmp	r3, #255	; 0xff
 8000b56:	d802      	bhi.n	8000b5e <HAL_GPIO_Init+0xfe>
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	e002      	b.n	8000b64 <HAL_GPIO_Init+0x104>
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	3b08      	subs	r3, #8
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	401a      	ands	r2, r3
 8000b76:	6a39      	ldr	r1, [r7, #32]
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 8096 	beq.w	8000cbe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b92:	4b59      	ldr	r3, [pc, #356]	; (8000cf8 <HAL_GPIO_Init+0x298>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a58      	ldr	r2, [pc, #352]	; (8000cf8 <HAL_GPIO_Init+0x298>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b56      	ldr	r3, [pc, #344]	; (8000cf8 <HAL_GPIO_Init+0x298>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000baa:	4a54      	ldr	r2, [pc, #336]	; (8000cfc <HAL_GPIO_Init+0x29c>)
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4b      	ldr	r2, [pc, #300]	; (8000d00 <HAL_GPIO_Init+0x2a0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0x19e>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4a      	ldr	r2, [pc, #296]	; (8000d04 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d00d      	beq.n	8000bfa <HAL_GPIO_Init+0x19a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a49      	ldr	r2, [pc, #292]	; (8000d08 <HAL_GPIO_Init+0x2a8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d007      	beq.n	8000bf6 <HAL_GPIO_Init+0x196>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a48      	ldr	r2, [pc, #288]	; (8000d0c <HAL_GPIO_Init+0x2ac>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_GPIO_Init+0x192>
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e006      	b.n	8000c00 <HAL_GPIO_Init+0x1a0>
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	e004      	b.n	8000c00 <HAL_GPIO_Init+0x1a0>
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	e002      	b.n	8000c00 <HAL_GPIO_Init+0x1a0>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <HAL_GPIO_Init+0x1a0>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c02:	f002 0203 	and.w	r2, r2, #3
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	4093      	lsls	r3, r2
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c10:	493a      	ldr	r1, [pc, #232]	; (8000cfc <HAL_GPIO_Init+0x29c>)
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	3302      	adds	r3, #2
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d006      	beq.n	8000c38 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c2a:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	4938      	ldr	r1, [pc, #224]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c38:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	4933      	ldr	r1, [pc, #204]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c42:	4013      	ands	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d006      	beq.n	8000c60 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	492e      	ldr	r1, [pc, #184]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	604b      	str	r3, [r1, #4]
 8000c5e:	e006      	b.n	8000c6e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	43db      	mvns	r3, r3
 8000c68:	4929      	ldr	r1, [pc, #164]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	4924      	ldr	r1, [pc, #144]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	608b      	str	r3, [r1, #8]
 8000c86:	e006      	b.n	8000c96 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c88:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	491f      	ldr	r1, [pc, #124]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000ca4:	68da      	ldr	r2, [r3, #12]
 8000ca6:	491a      	ldr	r1, [pc, #104]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60cb      	str	r3, [r1, #12]
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	4915      	ldr	r1, [pc, #84]	; (8000d10 <HAL_GPIO_Init+0x2b0>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	fa22 f303 	lsr.w	r3, r2, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f47f aed0 	bne.w	8000a74 <HAL_GPIO_Init+0x14>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	372c      	adds	r7, #44	; 0x2c
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	10210000 	.word	0x10210000
 8000ce4:	10110000 	.word	0x10110000
 8000ce8:	10120000 	.word	0x10120000
 8000cec:	10310000 	.word	0x10310000
 8000cf0:	10320000 	.word	0x10320000
 8000cf4:	10220000 	.word	0x10220000
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	40010000 	.word	0x40010000
 8000d00:	40010800 	.word	0x40010800
 8000d04:	40010c00 	.word	0x40010c00
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	40011400 	.word	0x40011400
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
 8000d20:	4613      	mov	r3, r2
 8000d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d24:	787b      	ldrb	r3, [r7, #1]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d30:	e003      	b.n	8000d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	041a      	lsls	r2, r3, #16
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	611a      	str	r2, [r3, #16]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f806 	bl	8000d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010400 	.word	0x40010400

08000d74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e26c      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 8087 	beq.w	8000eb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000da8:	4b92      	ldr	r3, [pc, #584]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d00c      	beq.n	8000dce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000db4:	4b8f      	ldr	r3, [pc, #572]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 030c 	and.w	r3, r3, #12
 8000dbc:	2b08      	cmp	r3, #8
 8000dbe:	d112      	bne.n	8000de6 <HAL_RCC_OscConfig+0x5e>
 8000dc0:	4b8c      	ldr	r3, [pc, #560]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dcc:	d10b      	bne.n	8000de6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dce:	4b89      	ldr	r3, [pc, #548]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d06c      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x12c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d168      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e246      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x76>
 8000df0:	4b80      	ldr	r3, [pc, #512]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a7f      	ldr	r2, [pc, #508]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	e02e      	b.n	8000e5c <HAL_RCC_OscConfig+0xd4>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x98>
 8000e06:	4b7b      	ldr	r3, [pc, #492]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a7a      	ldr	r2, [pc, #488]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b78      	ldr	r3, [pc, #480]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a77      	ldr	r2, [pc, #476]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	e01d      	b.n	8000e5c <HAL_RCC_OscConfig+0xd4>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e28:	d10c      	bne.n	8000e44 <HAL_RCC_OscConfig+0xbc>
 8000e2a:	4b72      	ldr	r3, [pc, #456]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a71      	ldr	r2, [pc, #452]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	4b6f      	ldr	r3, [pc, #444]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a6e      	ldr	r2, [pc, #440]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e00b      	b.n	8000e5c <HAL_RCC_OscConfig+0xd4>
 8000e44:	4b6b      	ldr	r3, [pc, #428]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a6a      	ldr	r2, [pc, #424]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b68      	ldr	r3, [pc, #416]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a67      	ldr	r2, [pc, #412]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d013      	beq.n	8000e8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e64:	f7ff fc4c 	bl	8000700 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6a:	e008      	b.n	8000e7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e6c:	f7ff fc48 	bl	8000700 <HAL_GetTick>
 8000e70:	4602      	mov	r2, r0
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	2b64      	cmp	r3, #100	; 0x64
 8000e78:	d901      	bls.n	8000e7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	e1fa      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f0      	beq.n	8000e6c <HAL_RCC_OscConfig+0xe4>
 8000e8a:	e014      	b.n	8000eb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fc38 	bl	8000700 <HAL_GetTick>
 8000e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e92:	e008      	b.n	8000ea6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e94:	f7ff fc34 	bl	8000700 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b64      	cmp	r3, #100	; 0x64
 8000ea0:	d901      	bls.n	8000ea6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e1e6      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1f0      	bne.n	8000e94 <HAL_RCC_OscConfig+0x10c>
 8000eb2:	e000      	b.n	8000eb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d063      	beq.n	8000f8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ec2:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00b      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ece:	4b49      	ldr	r3, [pc, #292]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 030c 	and.w	r3, r3, #12
 8000ed6:	2b08      	cmp	r3, #8
 8000ed8:	d11c      	bne.n	8000f14 <HAL_RCC_OscConfig+0x18c>
 8000eda:	4b46      	ldr	r3, [pc, #280]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d116      	bne.n	8000f14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee6:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <HAL_RCC_OscConfig+0x176>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d001      	beq.n	8000efe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e1ba      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efe:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4939      	ldr	r1, [pc, #228]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f12:	e03a      	b.n	8000f8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d020      	beq.n	8000f5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <HAL_RCC_OscConfig+0x270>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f22:	f7ff fbed 	bl	8000700 <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f2a:	f7ff fbe9 	bl	8000700 <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e19b      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f48:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4927      	ldr	r1, [pc, #156]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	600b      	str	r3, [r1, #0]
 8000f5c:	e015      	b.n	8000f8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <HAL_RCC_OscConfig+0x270>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fbcc 	bl	8000700 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fbc8 	bl	8000700 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e17a      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f0      	bne.n	8000f6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d03a      	beq.n	800100c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d019      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_RCC_OscConfig+0x274>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fbac 	bl	8000700 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000faa:	e008      	b.n	8000fbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fac:	f7ff fba8 	bl	8000700 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e15a      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0f0      	beq.n	8000fac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f000 fada 	bl	8001584 <RCC_Delay>
 8000fd0:	e01c      	b.n	800100c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_RCC_OscConfig+0x274>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd8:	f7ff fb92 	bl	8000700 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fde:	e00f      	b.n	8001000 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fe0:	f7ff fb8e 	bl	8000700 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d908      	bls.n	8001000 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e140      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	42420000 	.word	0x42420000
 8000ffc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001000:	4b9e      	ldr	r3, [pc, #632]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1e9      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80a6 	beq.w	8001166 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800101e:	4b97      	ldr	r3, [pc, #604]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d10d      	bne.n	8001046 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b94      	ldr	r3, [pc, #592]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	4a93      	ldr	r2, [pc, #588]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	61d3      	str	r3, [r2, #28]
 8001036:	4b91      	ldr	r3, [pc, #580]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001046:	4b8e      	ldr	r3, [pc, #568]	; (8001280 <HAL_RCC_OscConfig+0x4f8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104e:	2b00      	cmp	r3, #0
 8001050:	d118      	bne.n	8001084 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001052:	4b8b      	ldr	r3, [pc, #556]	; (8001280 <HAL_RCC_OscConfig+0x4f8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a8a      	ldr	r2, [pc, #552]	; (8001280 <HAL_RCC_OscConfig+0x4f8>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800105e:	f7ff fb4f 	bl	8000700 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001066:	f7ff fb4b 	bl	8000700 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b64      	cmp	r3, #100	; 0x64
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e0fd      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	4b81      	ldr	r3, [pc, #516]	; (8001280 <HAL_RCC_OscConfig+0x4f8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d106      	bne.n	800109a <HAL_RCC_OscConfig+0x312>
 800108c:	4b7b      	ldr	r3, [pc, #492]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a7a      	ldr	r2, [pc, #488]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	e02d      	b.n	80010f6 <HAL_RCC_OscConfig+0x36e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10c      	bne.n	80010bc <HAL_RCC_OscConfig+0x334>
 80010a2:	4b76      	ldr	r3, [pc, #472]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a75      	ldr	r2, [pc, #468]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	6213      	str	r3, [r2, #32]
 80010ae:	4b73      	ldr	r3, [pc, #460]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a72      	ldr	r2, [pc, #456]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	f023 0304 	bic.w	r3, r3, #4
 80010b8:	6213      	str	r3, [r2, #32]
 80010ba:	e01c      	b.n	80010f6 <HAL_RCC_OscConfig+0x36e>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	d10c      	bne.n	80010de <HAL_RCC_OscConfig+0x356>
 80010c4:	4b6d      	ldr	r3, [pc, #436]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4a6c      	ldr	r2, [pc, #432]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6213      	str	r3, [r2, #32]
 80010d0:	4b6a      	ldr	r3, [pc, #424]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010d2:	6a1b      	ldr	r3, [r3, #32]
 80010d4:	4a69      	ldr	r2, [pc, #420]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	6213      	str	r3, [r2, #32]
 80010dc:	e00b      	b.n	80010f6 <HAL_RCC_OscConfig+0x36e>
 80010de:	4b67      	ldr	r3, [pc, #412]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a66      	ldr	r2, [pc, #408]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	f023 0301 	bic.w	r3, r3, #1
 80010e8:	6213      	str	r3, [r2, #32]
 80010ea:	4b64      	ldr	r3, [pc, #400]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4a63      	ldr	r2, [pc, #396]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80010f0:	f023 0304 	bic.w	r3, r3, #4
 80010f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d015      	beq.n	800112a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff faff 	bl	8000700 <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fafb 	bl	8000700 <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f241 3288 	movw	r2, #5000	; 0x1388
 8001114:	4293      	cmp	r3, r2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e0ab      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111c:	4b57      	ldr	r3, [pc, #348]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0ee      	beq.n	8001106 <HAL_RCC_OscConfig+0x37e>
 8001128:	e014      	b.n	8001154 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112a:	f7ff fae9 	bl	8000700 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001130:	e00a      	b.n	8001148 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001132:	f7ff fae5 	bl	8000700 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001140:	4293      	cmp	r3, r2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e095      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001148:	4b4c      	ldr	r3, [pc, #304]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1ee      	bne.n	8001132 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d105      	bne.n	8001166 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a47      	ldr	r2, [pc, #284]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001164:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8081 	beq.w	8001272 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001170:	4b42      	ldr	r3, [pc, #264]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b08      	cmp	r3, #8
 800117a:	d061      	beq.n	8001240 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69db      	ldr	r3, [r3, #28]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d146      	bne.n	8001212 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001184:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <HAL_RCC_OscConfig+0x4fc>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fab9 	bl	8000700 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001192:	f7ff fab5 	bl	8000700 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e067      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a4:	4b35      	ldr	r3, [pc, #212]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f0      	bne.n	8001192 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b8:	d108      	bne.n	80011cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	492d      	ldr	r1, [pc, #180]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a19      	ldr	r1, [r3, #32]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	430b      	orrs	r3, r1
 80011de:	4927      	ldr	r1, [pc, #156]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011e4:	4b27      	ldr	r3, [pc, #156]	; (8001284 <HAL_RCC_OscConfig+0x4fc>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fa89 	bl	8000700 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff fa85 	bl	8000700 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e037      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x46a>
 8001210:	e02f      	b.n	8001272 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_RCC_OscConfig+0x4fc>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fa72 	bl	8000700 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001220:	f7ff fa6e 	bl	8000700 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e020      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x498>
 800123e:	e018      	b.n	8001272 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e013      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_RCC_OscConfig+0x4f4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	429a      	cmp	r2, r3
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800126a:	429a      	cmp	r2, r3
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40021000 	.word	0x40021000
 8001280:	40007000 	.word	0x40007000
 8001284:	42420060 	.word	0x42420060

08001288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0d0      	b.n	800143e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800129c:	4b6a      	ldr	r3, [pc, #424]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d910      	bls.n	80012cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012aa:	4b67      	ldr	r3, [pc, #412]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 0207 	bic.w	r2, r3, #7
 80012b2:	4965      	ldr	r1, [pc, #404]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0b8      	b.n	800143e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d020      	beq.n	800131a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012e4:	4b59      	ldr	r3, [pc, #356]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4a58      	ldr	r2, [pc, #352]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0308 	and.w	r3, r3, #8
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001308:	4b50      	ldr	r3, [pc, #320]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	494d      	ldr	r1, [pc, #308]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	4313      	orrs	r3, r2
 8001318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d040      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d115      	bne.n	8001366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e07f      	b.n	800143e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b02      	cmp	r3, #2
 8001344:	d107      	bne.n	8001356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e073      	b.n	800143e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e06b      	b.n	800143e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001366:	4b39      	ldr	r3, [pc, #228]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f023 0203 	bic.w	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4936      	ldr	r1, [pc, #216]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001378:	f7ff f9c2 	bl	8000700 <HAL_GetTick>
 800137c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	e00a      	b.n	8001396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001380:	f7ff f9be 	bl	8000700 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f241 3288 	movw	r2, #5000	; 0x1388
 800138e:	4293      	cmp	r3, r2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e053      	b.n	800143e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 020c 	and.w	r2, r3, #12
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d1eb      	bne.n	8001380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d210      	bcs.n	80013d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 0207 	bic.w	r2, r3, #7
 80013be:	4922      	ldr	r1, [pc, #136]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e032      	b.n	800143e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4916      	ldr	r1, [pc, #88]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d009      	beq.n	8001416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	490e      	ldr	r1, [pc, #56]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	4313      	orrs	r3, r2
 8001414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001416:	f000 f821 	bl	800145c <HAL_RCC_GetSysClockFreq>
 800141a:	4601      	mov	r1, r0
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_RCC_ClockConfig+0x1c8>)
 8001428:	5cd3      	ldrb	r3, [r2, r3]
 800142a:	fa21 f303 	lsr.w	r3, r1, r3
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_RCC_ClockConfig+0x1cc>)
 8001430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_RCC_ClockConfig+0x1d0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f920 	bl	800067c <HAL_InitTick>

  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40022000 	.word	0x40022000
 800144c:	40021000 	.word	0x40021000
 8001450:	080026f8 	.word	0x080026f8
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800145c:	b490      	push	{r4, r7}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001462:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001464:	1d3c      	adds	r4, r7, #4
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_RCC_GetSysClockFreq+0xb4>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b04      	cmp	r3, #4
 8001494:	d002      	beq.n	800149c <HAL_RCC_GetSysClockFreq+0x40>
 8001496:	2b08      	cmp	r3, #8
 8001498:	d003      	beq.n	80014a2 <HAL_RCC_GetSysClockFreq+0x46>
 800149a:	e02d      	b.n	80014f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800149c:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <HAL_RCC_GetSysClockFreq+0xbc>)
 800149e:	623b      	str	r3, [r7, #32]
      break;
 80014a0:	e02d      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014ae:	4413      	add	r3, r2
 80014b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	0c5b      	lsrs	r3, r3, #17
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014ce:	4413      	add	r3, r2
 80014d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014da:	fb02 f203 	mul.w	r2, r2, r3
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
 80014e6:	e004      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <HAL_RCC_GetSysClockFreq+0xc0>)
 80014ec:	fb02 f303 	mul.w	r3, r2, r3
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	623b      	str	r3, [r7, #32]
      break;
 80014f6:	e002      	b.n	80014fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014fa:	623b      	str	r3, [r7, #32]
      break;
 80014fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3728      	adds	r7, #40	; 0x28
 8001504:	46bd      	mov	sp, r7
 8001506:	bc90      	pop	{r4, r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	080026e4 	.word	0x080026e4
 8001510:	080026f4 	.word	0x080026f4
 8001514:	40021000 	.word	0x40021000
 8001518:	007a1200 	.word	0x007a1200
 800151c:	003d0900 	.word	0x003d0900

08001520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001524:	4b02      	ldr	r3, [pc, #8]	; (8001530 <HAL_RCC_GetHCLKFreq+0x10>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000000 	.word	0x20000000

08001534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001538:	f7ff fff2 	bl	8001520 <HAL_RCC_GetHCLKFreq>
 800153c:	4601      	mov	r1, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	0a1b      	lsrs	r3, r3, #8
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4a03      	ldr	r2, [pc, #12]	; (8001558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	08002708 	.word	0x08002708

0800155c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001560:	f7ff ffde 	bl	8001520 <HAL_RCC_GetHCLKFreq>
 8001564:	4601      	mov	r1, r0
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	0adb      	lsrs	r3, r3, #11
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000
 8001580:	08002708 	.word	0x08002708

08001584 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <RCC_Delay+0x34>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <RCC_Delay+0x38>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0a5b      	lsrs	r3, r3, #9
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015a0:	bf00      	nop
  }
  while (Delay --);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1e5a      	subs	r2, r3, #1
 80015a6:	60fa      	str	r2, [r7, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f9      	bne.n	80015a0 <RCC_Delay+0x1c>
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000000 	.word	0x20000000
 80015bc:	10624dd3 	.word	0x10624dd3

080015c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e03f      	b.n	8001652 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7fe fee6 	bl	80003b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2224      	movs	r2, #36	; 0x24
 80015f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fb39 	bl	8001c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b08a      	sub	sp, #40	; 0x28
 800165e:	af02      	add	r7, sp, #8
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4613      	mov	r3, r2
 8001668:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b20      	cmp	r3, #32
 8001678:	d17c      	bne.n	8001774 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_UART_Transmit+0x2c>
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e075      	b.n	8001776 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_UART_Transmit+0x3e>
 8001694:	2302      	movs	r3, #2
 8001696:	e06e      	b.n	8001776 <HAL_UART_Transmit+0x11c>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2221      	movs	r2, #33	; 0x21
 80016aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80016ae:	f7ff f827 	bl	8000700 <HAL_GetTick>
 80016b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	88fa      	ldrh	r2, [r7, #6]
 80016b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	88fa      	ldrh	r2, [r7, #6]
 80016be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016c8:	d108      	bne.n	80016dc <HAL_UART_Transmit+0x82>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d104      	bne.n	80016dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	61bb      	str	r3, [r7, #24]
 80016da:	e003      	b.n	80016e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80016ec:	e02a      	b.n	8001744 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2200      	movs	r2, #0
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f95c 	bl	80019b6 <UART_WaitOnFlagUntilTimeout>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e036      	b.n	8001776 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10b      	bne.n	8001726 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800171c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	3302      	adds	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	e007      	b.n	8001736 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	781a      	ldrb	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	3301      	adds	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001748:	b29b      	uxth	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1cf      	bne.n	80016ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2200      	movs	r2, #0
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 f92c 	bl	80019b6 <UART_WaitOnFlagUntilTimeout>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e006      	b.n	8001776 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2220      	movs	r2, #32
 800176c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001774:	2302      	movs	r3, #2
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10d      	bne.n	80017d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_UART_IRQHandler+0x52>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	f003 0320 	and.w	r3, r3, #32
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f9d5 	bl	8001b7a <UART_Receive_IT>
      return;
 80017d0:	e0d1      	b.n	8001976 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80b0 	beq.w	800193a <HAL_UART_IRQHandler+0x1ba>
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_UART_IRQHandler+0x70>
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80a5 	beq.w	800193a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <HAL_UART_IRQHandler+0x90>
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00a      	beq.n	8001830 <HAL_UART_IRQHandler+0xb0>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	f043 0202 	orr.w	r2, r3, #2
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00a      	beq.n	8001850 <HAL_UART_IRQHandler+0xd0>
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00f      	beq.n	800187a <HAL_UART_IRQHandler+0xfa>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d104      	bne.n	800186e <HAL_UART_IRQHandler+0xee>
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d005      	beq.n	800187a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001872:	f043 0208 	orr.w	r2, r3, #8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	2b00      	cmp	r3, #0
 8001880:	d078      	beq.n	8001974 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_UART_IRQHandler+0x11c>
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f96f 	bl	8001b7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	bf14      	ite	ne
 80018aa:	2301      	movne	r3, #1
 80018ac:	2300      	moveq	r3, #0
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_UART_IRQHandler+0x144>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d031      	beq.n	8001928 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f8c0 	bl	8001a4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d023      	beq.n	8001920 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d013      	beq.n	8001918 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	4a21      	ldr	r2, [pc, #132]	; (800197c <HAL_UART_IRQHandler+0x1fc>)
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f839 	bl	8000974 <HAL_DMA_Abort_IT>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d016      	beq.n	8001936 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001912:	4610      	mov	r0, r2
 8001914:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001916:	e00e      	b.n	8001936 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f843 	bl	80019a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800191e:	e00a      	b.n	8001936 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f83f 	bl	80019a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001926:	e006      	b.n	8001936 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 f83b 	bl	80019a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001934:	e01e      	b.n	8001974 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001936:	bf00      	nop
    return;
 8001938:	e01c      	b.n	8001974 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <HAL_UART_IRQHandler+0x1d6>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f8ac 	bl	8001aac <UART_Transmit_IT>
    return;
 8001954:	e00f      	b.n	8001976 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00a      	beq.n	8001976 <HAL_UART_IRQHandler+0x1f6>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f8ed 	bl	8001b4a <UART_EndTransmit_IT>
    return;
 8001970:	bf00      	nop
 8001972:	e000      	b.n	8001976 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001974:	bf00      	nop
  }
}
 8001976:	3720      	adds	r7, #32
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	08001a85 	.word	0x08001a85

08001980 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4613      	mov	r3, r2
 80019c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019c6:	e02c      	b.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ce:	d028      	beq.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80019d6:	f7fe fe93 	bl	8000700 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d21d      	bcs.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80019f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2220      	movs	r2, #32
 8001a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e00f      	b.n	8001a42 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	bf0c      	ite	eq
 8001a32:	2301      	moveq	r3, #1
 8001a34:	2300      	movne	r3, #0
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d0c3      	beq.n	80019c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a60:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	695a      	ldr	r2, [r3, #20]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2220      	movs	r2, #32
 8001a76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff80 	bl	80019a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b21      	cmp	r3, #33	; 0x21
 8001abe:	d13e      	bne.n	8001b3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ac8:	d114      	bne.n	8001af4 <UART_Transmit_IT+0x48>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d110      	bne.n	8001af4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ae6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	1c9a      	adds	r2, r3, #2
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	621a      	str	r2, [r3, #32]
 8001af2:	e008      	b.n	8001b06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	1c59      	adds	r1, r3, #1
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6211      	str	r1, [r2, #32]
 8001afe:	781a      	ldrb	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4619      	mov	r1, r3
 8001b14:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10f      	bne.n	8001b3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001b3e:	2302      	movs	r3, #2
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ff08 	bl	8001980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b22      	cmp	r3, #34	; 0x22
 8001b8c:	d170      	bne.n	8001c70 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b96:	d117      	bne.n	8001bc8 <UART_Receive_IT+0x4e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d113      	bne.n	8001bc8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	1c9a      	adds	r2, r3, #2
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bc6:	e026      	b.n	8001c16 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bda:	d007      	beq.n	8001bec <UART_Receive_IT+0x72>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10a      	bne.n	8001bfa <UART_Receive_IT+0x80>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e008      	b.n	8001c0c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4619      	mov	r1, r3
 8001c24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d120      	bne.n	8001c6c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0220 	bic.w	r2, r2, #32
 8001c38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0201 	bic.w	r2, r2, #1
 8001c58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fe95 	bl	8001992 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e002      	b.n	8001c72 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cb6:	f023 030c 	bic.w	r3, r3, #12
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	68b9      	ldr	r1, [r7, #8]
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <UART_SetConfig+0x114>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d103      	bne.n	8001cec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ce4:	f7ff fc3a 	bl	800155c <HAL_RCC_GetPCLK2Freq>
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	e002      	b.n	8001cf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cec:	f7ff fc22 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 8001cf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009a      	lsls	r2, r3, #2
 8001cfc:	441a      	add	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <UART_SetConfig+0x118>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	0119      	lsls	r1, r3, #4
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	009a      	lsls	r2, r3, #2
 8001d1c:	441a      	add	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <UART_SetConfig+0x118>)
 8001d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2064      	movs	r0, #100	; 0x64
 8001d32:	fb00 f303 	mul.w	r3, r0, r3
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	3332      	adds	r3, #50	; 0x32
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <UART_SetConfig+0x118>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d48:	4419      	add	r1, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	009a      	lsls	r2, r3, #2
 8001d54:	441a      	add	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <UART_SetConfig+0x118>)
 8001d62:	fba3 0302 	umull	r0, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2064      	movs	r0, #100	; 0x64
 8001d6a:	fb00 f303 	mul.w	r3, r0, r3
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	3332      	adds	r3, #50	; 0x32
 8001d74:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <UART_SetConfig+0x118>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	440a      	add	r2, r1
 8001d86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40013800 	.word	0x40013800
 8001d94:	51eb851f 	.word	0x51eb851f

08001d98 <__errno>:
 8001d98:	4b01      	ldr	r3, [pc, #4]	; (8001da0 <__errno+0x8>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	2000000c 	.word	0x2000000c

08001da4 <__libc_init_array>:
 8001da4:	b570      	push	{r4, r5, r6, lr}
 8001da6:	2500      	movs	r5, #0
 8001da8:	4e0c      	ldr	r6, [pc, #48]	; (8001ddc <__libc_init_array+0x38>)
 8001daa:	4c0d      	ldr	r4, [pc, #52]	; (8001de0 <__libc_init_array+0x3c>)
 8001dac:	1ba4      	subs	r4, r4, r6
 8001dae:	10a4      	asrs	r4, r4, #2
 8001db0:	42a5      	cmp	r5, r4
 8001db2:	d109      	bne.n	8001dc8 <__libc_init_array+0x24>
 8001db4:	f000 fc88 	bl	80026c8 <_init>
 8001db8:	2500      	movs	r5, #0
 8001dba:	4e0a      	ldr	r6, [pc, #40]	; (8001de4 <__libc_init_array+0x40>)
 8001dbc:	4c0a      	ldr	r4, [pc, #40]	; (8001de8 <__libc_init_array+0x44>)
 8001dbe:	1ba4      	subs	r4, r4, r6
 8001dc0:	10a4      	asrs	r4, r4, #2
 8001dc2:	42a5      	cmp	r5, r4
 8001dc4:	d105      	bne.n	8001dd2 <__libc_init_array+0x2e>
 8001dc6:	bd70      	pop	{r4, r5, r6, pc}
 8001dc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dcc:	4798      	blx	r3
 8001dce:	3501      	adds	r5, #1
 8001dd0:	e7ee      	b.n	8001db0 <__libc_init_array+0xc>
 8001dd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dd6:	4798      	blx	r3
 8001dd8:	3501      	adds	r5, #1
 8001dda:	e7f2      	b.n	8001dc2 <__libc_init_array+0x1e>
 8001ddc:	08002774 	.word	0x08002774
 8001de0:	08002774 	.word	0x08002774
 8001de4:	08002774 	.word	0x08002774
 8001de8:	08002778 	.word	0x08002778

08001dec <memset>:
 8001dec:	4603      	mov	r3, r0
 8001dee:	4402      	add	r2, r0
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d100      	bne.n	8001df6 <memset+0xa>
 8001df4:	4770      	bx	lr
 8001df6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dfa:	e7f9      	b.n	8001df0 <memset+0x4>

08001dfc <_puts_r>:
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	460e      	mov	r6, r1
 8001e00:	4605      	mov	r5, r0
 8001e02:	b118      	cbz	r0, 8001e0c <_puts_r+0x10>
 8001e04:	6983      	ldr	r3, [r0, #24]
 8001e06:	b90b      	cbnz	r3, 8001e0c <_puts_r+0x10>
 8001e08:	f000 fa0c 	bl	8002224 <__sinit>
 8001e0c:	69ab      	ldr	r3, [r5, #24]
 8001e0e:	68ac      	ldr	r4, [r5, #8]
 8001e10:	b913      	cbnz	r3, 8001e18 <_puts_r+0x1c>
 8001e12:	4628      	mov	r0, r5
 8001e14:	f000 fa06 	bl	8002224 <__sinit>
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <_puts_r+0xac>)
 8001e1a:	429c      	cmp	r4, r3
 8001e1c:	d117      	bne.n	8001e4e <_puts_r+0x52>
 8001e1e:	686c      	ldr	r4, [r5, #4]
 8001e20:	89a3      	ldrh	r3, [r4, #12]
 8001e22:	071b      	lsls	r3, r3, #28
 8001e24:	d51d      	bpl.n	8001e62 <_puts_r+0x66>
 8001e26:	6923      	ldr	r3, [r4, #16]
 8001e28:	b1db      	cbz	r3, 8001e62 <_puts_r+0x66>
 8001e2a:	3e01      	subs	r6, #1
 8001e2c:	68a3      	ldr	r3, [r4, #8]
 8001e2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001e32:	3b01      	subs	r3, #1
 8001e34:	60a3      	str	r3, [r4, #8]
 8001e36:	b9e9      	cbnz	r1, 8001e74 <_puts_r+0x78>
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	da2e      	bge.n	8001e9a <_puts_r+0x9e>
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	210a      	movs	r1, #10
 8001e40:	4628      	mov	r0, r5
 8001e42:	f000 f83f 	bl	8001ec4 <__swbuf_r>
 8001e46:	3001      	adds	r0, #1
 8001e48:	d011      	beq.n	8001e6e <_puts_r+0x72>
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	e011      	b.n	8001e72 <_puts_r+0x76>
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <_puts_r+0xb0>)
 8001e50:	429c      	cmp	r4, r3
 8001e52:	d101      	bne.n	8001e58 <_puts_r+0x5c>
 8001e54:	68ac      	ldr	r4, [r5, #8]
 8001e56:	e7e3      	b.n	8001e20 <_puts_r+0x24>
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <_puts_r+0xb4>)
 8001e5a:	429c      	cmp	r4, r3
 8001e5c:	bf08      	it	eq
 8001e5e:	68ec      	ldreq	r4, [r5, #12]
 8001e60:	e7de      	b.n	8001e20 <_puts_r+0x24>
 8001e62:	4621      	mov	r1, r4
 8001e64:	4628      	mov	r0, r5
 8001e66:	f000 f87f 	bl	8001f68 <__swsetup_r>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	d0dd      	beq.n	8001e2a <_puts_r+0x2e>
 8001e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e72:	bd70      	pop	{r4, r5, r6, pc}
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da04      	bge.n	8001e82 <_puts_r+0x86>
 8001e78:	69a2      	ldr	r2, [r4, #24]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dc06      	bgt.n	8001e8c <_puts_r+0x90>
 8001e7e:	290a      	cmp	r1, #10
 8001e80:	d004      	beq.n	8001e8c <_puts_r+0x90>
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	6022      	str	r2, [r4, #0]
 8001e88:	7019      	strb	r1, [r3, #0]
 8001e8a:	e7cf      	b.n	8001e2c <_puts_r+0x30>
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	4628      	mov	r0, r5
 8001e90:	f000 f818 	bl	8001ec4 <__swbuf_r>
 8001e94:	3001      	adds	r0, #1
 8001e96:	d1c9      	bne.n	8001e2c <_puts_r+0x30>
 8001e98:	e7e9      	b.n	8001e6e <_puts_r+0x72>
 8001e9a:	200a      	movs	r0, #10
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	6022      	str	r2, [r4, #0]
 8001ea2:	7018      	strb	r0, [r3, #0]
 8001ea4:	e7e5      	b.n	8001e72 <_puts_r+0x76>
 8001ea6:	bf00      	nop
 8001ea8:	08002734 	.word	0x08002734
 8001eac:	08002754 	.word	0x08002754
 8001eb0:	08002714 	.word	0x08002714

08001eb4 <puts>:
 8001eb4:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <puts+0xc>)
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	f7ff bf9f 	b.w	8001dfc <_puts_r>
 8001ebe:	bf00      	nop
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <__swbuf_r>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	460e      	mov	r6, r1
 8001ec8:	4614      	mov	r4, r2
 8001eca:	4605      	mov	r5, r0
 8001ecc:	b118      	cbz	r0, 8001ed6 <__swbuf_r+0x12>
 8001ece:	6983      	ldr	r3, [r0, #24]
 8001ed0:	b90b      	cbnz	r3, 8001ed6 <__swbuf_r+0x12>
 8001ed2:	f000 f9a7 	bl	8002224 <__sinit>
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <__swbuf_r+0x98>)
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	d12a      	bne.n	8001f32 <__swbuf_r+0x6e>
 8001edc:	686c      	ldr	r4, [r5, #4]
 8001ede:	69a3      	ldr	r3, [r4, #24]
 8001ee0:	60a3      	str	r3, [r4, #8]
 8001ee2:	89a3      	ldrh	r3, [r4, #12]
 8001ee4:	071a      	lsls	r2, r3, #28
 8001ee6:	d52e      	bpl.n	8001f46 <__swbuf_r+0x82>
 8001ee8:	6923      	ldr	r3, [r4, #16]
 8001eea:	b363      	cbz	r3, 8001f46 <__swbuf_r+0x82>
 8001eec:	6923      	ldr	r3, [r4, #16]
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	b2f6      	uxtb	r6, r6
 8001ef2:	1ac0      	subs	r0, r0, r3
 8001ef4:	6963      	ldr	r3, [r4, #20]
 8001ef6:	4637      	mov	r7, r6
 8001ef8:	4283      	cmp	r3, r0
 8001efa:	dc04      	bgt.n	8001f06 <__swbuf_r+0x42>
 8001efc:	4621      	mov	r1, r4
 8001efe:	4628      	mov	r0, r5
 8001f00:	f000 f926 	bl	8002150 <_fflush_r>
 8001f04:	bb28      	cbnz	r0, 8001f52 <__swbuf_r+0x8e>
 8001f06:	68a3      	ldr	r3, [r4, #8]
 8001f08:	3001      	adds	r0, #1
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	60a3      	str	r3, [r4, #8]
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	6022      	str	r2, [r4, #0]
 8001f14:	701e      	strb	r6, [r3, #0]
 8001f16:	6963      	ldr	r3, [r4, #20]
 8001f18:	4283      	cmp	r3, r0
 8001f1a:	d004      	beq.n	8001f26 <__swbuf_r+0x62>
 8001f1c:	89a3      	ldrh	r3, [r4, #12]
 8001f1e:	07db      	lsls	r3, r3, #31
 8001f20:	d519      	bpl.n	8001f56 <__swbuf_r+0x92>
 8001f22:	2e0a      	cmp	r6, #10
 8001f24:	d117      	bne.n	8001f56 <__swbuf_r+0x92>
 8001f26:	4621      	mov	r1, r4
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f000 f911 	bl	8002150 <_fflush_r>
 8001f2e:	b190      	cbz	r0, 8001f56 <__swbuf_r+0x92>
 8001f30:	e00f      	b.n	8001f52 <__swbuf_r+0x8e>
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <__swbuf_r+0x9c>)
 8001f34:	429c      	cmp	r4, r3
 8001f36:	d101      	bne.n	8001f3c <__swbuf_r+0x78>
 8001f38:	68ac      	ldr	r4, [r5, #8]
 8001f3a:	e7d0      	b.n	8001ede <__swbuf_r+0x1a>
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <__swbuf_r+0xa0>)
 8001f3e:	429c      	cmp	r4, r3
 8001f40:	bf08      	it	eq
 8001f42:	68ec      	ldreq	r4, [r5, #12]
 8001f44:	e7cb      	b.n	8001ede <__swbuf_r+0x1a>
 8001f46:	4621      	mov	r1, r4
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f000 f80d 	bl	8001f68 <__swsetup_r>
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d0cc      	beq.n	8001eec <__swbuf_r+0x28>
 8001f52:	f04f 37ff 	mov.w	r7, #4294967295
 8001f56:	4638      	mov	r0, r7
 8001f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	08002734 	.word	0x08002734
 8001f60:	08002754 	.word	0x08002754
 8001f64:	08002714 	.word	0x08002714

08001f68 <__swsetup_r>:
 8001f68:	4b32      	ldr	r3, [pc, #200]	; (8002034 <__swsetup_r+0xcc>)
 8001f6a:	b570      	push	{r4, r5, r6, lr}
 8001f6c:	681d      	ldr	r5, [r3, #0]
 8001f6e:	4606      	mov	r6, r0
 8001f70:	460c      	mov	r4, r1
 8001f72:	b125      	cbz	r5, 8001f7e <__swsetup_r+0x16>
 8001f74:	69ab      	ldr	r3, [r5, #24]
 8001f76:	b913      	cbnz	r3, 8001f7e <__swsetup_r+0x16>
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f000 f953 	bl	8002224 <__sinit>
 8001f7e:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <__swsetup_r+0xd0>)
 8001f80:	429c      	cmp	r4, r3
 8001f82:	d10f      	bne.n	8001fa4 <__swsetup_r+0x3c>
 8001f84:	686c      	ldr	r4, [r5, #4]
 8001f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	0715      	lsls	r5, r2, #28
 8001f8e:	d42c      	bmi.n	8001fea <__swsetup_r+0x82>
 8001f90:	06d0      	lsls	r0, r2, #27
 8001f92:	d411      	bmi.n	8001fb8 <__swsetup_r+0x50>
 8001f94:	2209      	movs	r2, #9
 8001f96:	6032      	str	r2, [r6, #0]
 8001f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9c:	81a3      	strh	r3, [r4, #12]
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	e03e      	b.n	8002022 <__swsetup_r+0xba>
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <__swsetup_r+0xd4>)
 8001fa6:	429c      	cmp	r4, r3
 8001fa8:	d101      	bne.n	8001fae <__swsetup_r+0x46>
 8001faa:	68ac      	ldr	r4, [r5, #8]
 8001fac:	e7eb      	b.n	8001f86 <__swsetup_r+0x1e>
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <__swsetup_r+0xd8>)
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	bf08      	it	eq
 8001fb4:	68ec      	ldreq	r4, [r5, #12]
 8001fb6:	e7e6      	b.n	8001f86 <__swsetup_r+0x1e>
 8001fb8:	0751      	lsls	r1, r2, #29
 8001fba:	d512      	bpl.n	8001fe2 <__swsetup_r+0x7a>
 8001fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fbe:	b141      	cbz	r1, 8001fd2 <__swsetup_r+0x6a>
 8001fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fc4:	4299      	cmp	r1, r3
 8001fc6:	d002      	beq.n	8001fce <__swsetup_r+0x66>
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f000 fa19 	bl	8002400 <_free_r>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8001fd2:	89a3      	ldrh	r3, [r4, #12]
 8001fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001fd8:	81a3      	strh	r3, [r4, #12]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	6063      	str	r3, [r4, #4]
 8001fde:	6923      	ldr	r3, [r4, #16]
 8001fe0:	6023      	str	r3, [r4, #0]
 8001fe2:	89a3      	ldrh	r3, [r4, #12]
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	81a3      	strh	r3, [r4, #12]
 8001fea:	6923      	ldr	r3, [r4, #16]
 8001fec:	b94b      	cbnz	r3, 8002002 <__swsetup_r+0x9a>
 8001fee:	89a3      	ldrh	r3, [r4, #12]
 8001ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff8:	d003      	beq.n	8002002 <__swsetup_r+0x9a>
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	f000 f9bf 	bl	8002380 <__smakebuf_r>
 8002002:	89a2      	ldrh	r2, [r4, #12]
 8002004:	f012 0301 	ands.w	r3, r2, #1
 8002008:	d00c      	beq.n	8002024 <__swsetup_r+0xbc>
 800200a:	2300      	movs	r3, #0
 800200c:	60a3      	str	r3, [r4, #8]
 800200e:	6963      	ldr	r3, [r4, #20]
 8002010:	425b      	negs	r3, r3
 8002012:	61a3      	str	r3, [r4, #24]
 8002014:	6923      	ldr	r3, [r4, #16]
 8002016:	b953      	cbnz	r3, 800202e <__swsetup_r+0xc6>
 8002018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800201c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002020:	d1ba      	bne.n	8001f98 <__swsetup_r+0x30>
 8002022:	bd70      	pop	{r4, r5, r6, pc}
 8002024:	0792      	lsls	r2, r2, #30
 8002026:	bf58      	it	pl
 8002028:	6963      	ldrpl	r3, [r4, #20]
 800202a:	60a3      	str	r3, [r4, #8]
 800202c:	e7f2      	b.n	8002014 <__swsetup_r+0xac>
 800202e:	2000      	movs	r0, #0
 8002030:	e7f7      	b.n	8002022 <__swsetup_r+0xba>
 8002032:	bf00      	nop
 8002034:	2000000c 	.word	0x2000000c
 8002038:	08002734 	.word	0x08002734
 800203c:	08002754 	.word	0x08002754
 8002040:	08002714 	.word	0x08002714

08002044 <__sflush_r>:
 8002044:	898a      	ldrh	r2, [r1, #12]
 8002046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800204a:	4605      	mov	r5, r0
 800204c:	0710      	lsls	r0, r2, #28
 800204e:	460c      	mov	r4, r1
 8002050:	d458      	bmi.n	8002104 <__sflush_r+0xc0>
 8002052:	684b      	ldr	r3, [r1, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	dc05      	bgt.n	8002064 <__sflush_r+0x20>
 8002058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	dc02      	bgt.n	8002064 <__sflush_r+0x20>
 800205e:	2000      	movs	r0, #0
 8002060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002066:	2e00      	cmp	r6, #0
 8002068:	d0f9      	beq.n	800205e <__sflush_r+0x1a>
 800206a:	2300      	movs	r3, #0
 800206c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002070:	682f      	ldr	r7, [r5, #0]
 8002072:	6a21      	ldr	r1, [r4, #32]
 8002074:	602b      	str	r3, [r5, #0]
 8002076:	d032      	beq.n	80020de <__sflush_r+0x9a>
 8002078:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	075a      	lsls	r2, r3, #29
 800207e:	d505      	bpl.n	800208c <__sflush_r+0x48>
 8002080:	6863      	ldr	r3, [r4, #4]
 8002082:	1ac0      	subs	r0, r0, r3
 8002084:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002086:	b10b      	cbz	r3, 800208c <__sflush_r+0x48>
 8002088:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800208a:	1ac0      	subs	r0, r0, r3
 800208c:	2300      	movs	r3, #0
 800208e:	4602      	mov	r2, r0
 8002090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002092:	6a21      	ldr	r1, [r4, #32]
 8002094:	4628      	mov	r0, r5
 8002096:	47b0      	blx	r6
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	89a3      	ldrh	r3, [r4, #12]
 800209c:	d106      	bne.n	80020ac <__sflush_r+0x68>
 800209e:	6829      	ldr	r1, [r5, #0]
 80020a0:	291d      	cmp	r1, #29
 80020a2:	d848      	bhi.n	8002136 <__sflush_r+0xf2>
 80020a4:	4a29      	ldr	r2, [pc, #164]	; (800214c <__sflush_r+0x108>)
 80020a6:	40ca      	lsrs	r2, r1
 80020a8:	07d6      	lsls	r6, r2, #31
 80020aa:	d544      	bpl.n	8002136 <__sflush_r+0xf2>
 80020ac:	2200      	movs	r2, #0
 80020ae:	6062      	str	r2, [r4, #4]
 80020b0:	6922      	ldr	r2, [r4, #16]
 80020b2:	04d9      	lsls	r1, r3, #19
 80020b4:	6022      	str	r2, [r4, #0]
 80020b6:	d504      	bpl.n	80020c2 <__sflush_r+0x7e>
 80020b8:	1c42      	adds	r2, r0, #1
 80020ba:	d101      	bne.n	80020c0 <__sflush_r+0x7c>
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	b903      	cbnz	r3, 80020c2 <__sflush_r+0x7e>
 80020c0:	6560      	str	r0, [r4, #84]	; 0x54
 80020c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020c4:	602f      	str	r7, [r5, #0]
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d0c9      	beq.n	800205e <__sflush_r+0x1a>
 80020ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020ce:	4299      	cmp	r1, r3
 80020d0:	d002      	beq.n	80020d8 <__sflush_r+0x94>
 80020d2:	4628      	mov	r0, r5
 80020d4:	f000 f994 	bl	8002400 <_free_r>
 80020d8:	2000      	movs	r0, #0
 80020da:	6360      	str	r0, [r4, #52]	; 0x34
 80020dc:	e7c0      	b.n	8002060 <__sflush_r+0x1c>
 80020de:	2301      	movs	r3, #1
 80020e0:	4628      	mov	r0, r5
 80020e2:	47b0      	blx	r6
 80020e4:	1c41      	adds	r1, r0, #1
 80020e6:	d1c8      	bne.n	800207a <__sflush_r+0x36>
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0c5      	beq.n	800207a <__sflush_r+0x36>
 80020ee:	2b1d      	cmp	r3, #29
 80020f0:	d001      	beq.n	80020f6 <__sflush_r+0xb2>
 80020f2:	2b16      	cmp	r3, #22
 80020f4:	d101      	bne.n	80020fa <__sflush_r+0xb6>
 80020f6:	602f      	str	r7, [r5, #0]
 80020f8:	e7b1      	b.n	800205e <__sflush_r+0x1a>
 80020fa:	89a3      	ldrh	r3, [r4, #12]
 80020fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002100:	81a3      	strh	r3, [r4, #12]
 8002102:	e7ad      	b.n	8002060 <__sflush_r+0x1c>
 8002104:	690f      	ldr	r7, [r1, #16]
 8002106:	2f00      	cmp	r7, #0
 8002108:	d0a9      	beq.n	800205e <__sflush_r+0x1a>
 800210a:	0793      	lsls	r3, r2, #30
 800210c:	bf18      	it	ne
 800210e:	2300      	movne	r3, #0
 8002110:	680e      	ldr	r6, [r1, #0]
 8002112:	bf08      	it	eq
 8002114:	694b      	ldreq	r3, [r1, #20]
 8002116:	eba6 0807 	sub.w	r8, r6, r7
 800211a:	600f      	str	r7, [r1, #0]
 800211c:	608b      	str	r3, [r1, #8]
 800211e:	f1b8 0f00 	cmp.w	r8, #0
 8002122:	dd9c      	ble.n	800205e <__sflush_r+0x1a>
 8002124:	4643      	mov	r3, r8
 8002126:	463a      	mov	r2, r7
 8002128:	6a21      	ldr	r1, [r4, #32]
 800212a:	4628      	mov	r0, r5
 800212c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800212e:	47b0      	blx	r6
 8002130:	2800      	cmp	r0, #0
 8002132:	dc06      	bgt.n	8002142 <__sflush_r+0xfe>
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213a:	81a3      	strh	r3, [r4, #12]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	e78e      	b.n	8002060 <__sflush_r+0x1c>
 8002142:	4407      	add	r7, r0
 8002144:	eba8 0800 	sub.w	r8, r8, r0
 8002148:	e7e9      	b.n	800211e <__sflush_r+0xda>
 800214a:	bf00      	nop
 800214c:	20400001 	.word	0x20400001

08002150 <_fflush_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	690b      	ldr	r3, [r1, #16]
 8002154:	4605      	mov	r5, r0
 8002156:	460c      	mov	r4, r1
 8002158:	b1db      	cbz	r3, 8002192 <_fflush_r+0x42>
 800215a:	b118      	cbz	r0, 8002164 <_fflush_r+0x14>
 800215c:	6983      	ldr	r3, [r0, #24]
 800215e:	b90b      	cbnz	r3, 8002164 <_fflush_r+0x14>
 8002160:	f000 f860 	bl	8002224 <__sinit>
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <_fflush_r+0x48>)
 8002166:	429c      	cmp	r4, r3
 8002168:	d109      	bne.n	800217e <_fflush_r+0x2e>
 800216a:	686c      	ldr	r4, [r5, #4]
 800216c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002170:	b17b      	cbz	r3, 8002192 <_fflush_r+0x42>
 8002172:	4621      	mov	r1, r4
 8002174:	4628      	mov	r0, r5
 8002176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800217a:	f7ff bf63 	b.w	8002044 <__sflush_r>
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <_fflush_r+0x4c>)
 8002180:	429c      	cmp	r4, r3
 8002182:	d101      	bne.n	8002188 <_fflush_r+0x38>
 8002184:	68ac      	ldr	r4, [r5, #8]
 8002186:	e7f1      	b.n	800216c <_fflush_r+0x1c>
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <_fflush_r+0x50>)
 800218a:	429c      	cmp	r4, r3
 800218c:	bf08      	it	eq
 800218e:	68ec      	ldreq	r4, [r5, #12]
 8002190:	e7ec      	b.n	800216c <_fflush_r+0x1c>
 8002192:	2000      	movs	r0, #0
 8002194:	bd38      	pop	{r3, r4, r5, pc}
 8002196:	bf00      	nop
 8002198:	08002734 	.word	0x08002734
 800219c:	08002754 	.word	0x08002754
 80021a0:	08002714 	.word	0x08002714

080021a4 <std>:
 80021a4:	2300      	movs	r3, #0
 80021a6:	b510      	push	{r4, lr}
 80021a8:	4604      	mov	r4, r0
 80021aa:	e9c0 3300 	strd	r3, r3, [r0]
 80021ae:	6083      	str	r3, [r0, #8]
 80021b0:	8181      	strh	r1, [r0, #12]
 80021b2:	6643      	str	r3, [r0, #100]	; 0x64
 80021b4:	81c2      	strh	r2, [r0, #14]
 80021b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021ba:	6183      	str	r3, [r0, #24]
 80021bc:	4619      	mov	r1, r3
 80021be:	2208      	movs	r2, #8
 80021c0:	305c      	adds	r0, #92	; 0x5c
 80021c2:	f7ff fe13 	bl	8001dec <memset>
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <std+0x38>)
 80021c8:	6224      	str	r4, [r4, #32]
 80021ca:	6263      	str	r3, [r4, #36]	; 0x24
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <std+0x3c>)
 80021ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <std+0x40>)
 80021d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021d4:	4b04      	ldr	r3, [pc, #16]	; (80021e8 <std+0x44>)
 80021d6:	6323      	str	r3, [r4, #48]	; 0x30
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	bf00      	nop
 80021dc:	0800256d 	.word	0x0800256d
 80021e0:	0800258f 	.word	0x0800258f
 80021e4:	080025c7 	.word	0x080025c7
 80021e8:	080025eb 	.word	0x080025eb

080021ec <_cleanup_r>:
 80021ec:	4901      	ldr	r1, [pc, #4]	; (80021f4 <_cleanup_r+0x8>)
 80021ee:	f000 b885 	b.w	80022fc <_fwalk_reent>
 80021f2:	bf00      	nop
 80021f4:	08002151 	.word	0x08002151

080021f8 <__sfmoreglue>:
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	2568      	movs	r5, #104	; 0x68
 80021fc:	1e4a      	subs	r2, r1, #1
 80021fe:	4355      	muls	r5, r2
 8002200:	460e      	mov	r6, r1
 8002202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002206:	f000 f947 	bl	8002498 <_malloc_r>
 800220a:	4604      	mov	r4, r0
 800220c:	b140      	cbz	r0, 8002220 <__sfmoreglue+0x28>
 800220e:	2100      	movs	r1, #0
 8002210:	e9c0 1600 	strd	r1, r6, [r0]
 8002214:	300c      	adds	r0, #12
 8002216:	60a0      	str	r0, [r4, #8]
 8002218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800221c:	f7ff fde6 	bl	8001dec <memset>
 8002220:	4620      	mov	r0, r4
 8002222:	bd70      	pop	{r4, r5, r6, pc}

08002224 <__sinit>:
 8002224:	6983      	ldr	r3, [r0, #24]
 8002226:	b510      	push	{r4, lr}
 8002228:	4604      	mov	r4, r0
 800222a:	bb33      	cbnz	r3, 800227a <__sinit+0x56>
 800222c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002230:	6503      	str	r3, [r0, #80]	; 0x50
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <__sinit+0x58>)
 8002234:	4a12      	ldr	r2, [pc, #72]	; (8002280 <__sinit+0x5c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6282      	str	r2, [r0, #40]	; 0x28
 800223a:	4298      	cmp	r0, r3
 800223c:	bf04      	itt	eq
 800223e:	2301      	moveq	r3, #1
 8002240:	6183      	streq	r3, [r0, #24]
 8002242:	f000 f81f 	bl	8002284 <__sfp>
 8002246:	6060      	str	r0, [r4, #4]
 8002248:	4620      	mov	r0, r4
 800224a:	f000 f81b 	bl	8002284 <__sfp>
 800224e:	60a0      	str	r0, [r4, #8]
 8002250:	4620      	mov	r0, r4
 8002252:	f000 f817 	bl	8002284 <__sfp>
 8002256:	2200      	movs	r2, #0
 8002258:	60e0      	str	r0, [r4, #12]
 800225a:	2104      	movs	r1, #4
 800225c:	6860      	ldr	r0, [r4, #4]
 800225e:	f7ff ffa1 	bl	80021a4 <std>
 8002262:	2201      	movs	r2, #1
 8002264:	2109      	movs	r1, #9
 8002266:	68a0      	ldr	r0, [r4, #8]
 8002268:	f7ff ff9c 	bl	80021a4 <std>
 800226c:	2202      	movs	r2, #2
 800226e:	2112      	movs	r1, #18
 8002270:	68e0      	ldr	r0, [r4, #12]
 8002272:	f7ff ff97 	bl	80021a4 <std>
 8002276:	2301      	movs	r3, #1
 8002278:	61a3      	str	r3, [r4, #24]
 800227a:	bd10      	pop	{r4, pc}
 800227c:	08002710 	.word	0x08002710
 8002280:	080021ed 	.word	0x080021ed

08002284 <__sfp>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	4b1b      	ldr	r3, [pc, #108]	; (80022f4 <__sfp+0x70>)
 8002288:	4607      	mov	r7, r0
 800228a:	681e      	ldr	r6, [r3, #0]
 800228c:	69b3      	ldr	r3, [r6, #24]
 800228e:	b913      	cbnz	r3, 8002296 <__sfp+0x12>
 8002290:	4630      	mov	r0, r6
 8002292:	f7ff ffc7 	bl	8002224 <__sinit>
 8002296:	3648      	adds	r6, #72	; 0x48
 8002298:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800229c:	3b01      	subs	r3, #1
 800229e:	d503      	bpl.n	80022a8 <__sfp+0x24>
 80022a0:	6833      	ldr	r3, [r6, #0]
 80022a2:	b133      	cbz	r3, 80022b2 <__sfp+0x2e>
 80022a4:	6836      	ldr	r6, [r6, #0]
 80022a6:	e7f7      	b.n	8002298 <__sfp+0x14>
 80022a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022ac:	b16d      	cbz	r5, 80022ca <__sfp+0x46>
 80022ae:	3468      	adds	r4, #104	; 0x68
 80022b0:	e7f4      	b.n	800229c <__sfp+0x18>
 80022b2:	2104      	movs	r1, #4
 80022b4:	4638      	mov	r0, r7
 80022b6:	f7ff ff9f 	bl	80021f8 <__sfmoreglue>
 80022ba:	6030      	str	r0, [r6, #0]
 80022bc:	2800      	cmp	r0, #0
 80022be:	d1f1      	bne.n	80022a4 <__sfp+0x20>
 80022c0:	230c      	movs	r3, #12
 80022c2:	4604      	mov	r4, r0
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	4620      	mov	r0, r4
 80022c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <__sfp+0x74>)
 80022cc:	6665      	str	r5, [r4, #100]	; 0x64
 80022ce:	e9c4 5500 	strd	r5, r5, [r4]
 80022d2:	60a5      	str	r5, [r4, #8]
 80022d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80022d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80022dc:	2208      	movs	r2, #8
 80022de:	4629      	mov	r1, r5
 80022e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022e4:	f7ff fd82 	bl	8001dec <memset>
 80022e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80022ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022f0:	e7e9      	b.n	80022c6 <__sfp+0x42>
 80022f2:	bf00      	nop
 80022f4:	08002710 	.word	0x08002710
 80022f8:	ffff0001 	.word	0xffff0001

080022fc <_fwalk_reent>:
 80022fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002300:	4680      	mov	r8, r0
 8002302:	4689      	mov	r9, r1
 8002304:	2600      	movs	r6, #0
 8002306:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800230a:	b914      	cbnz	r4, 8002312 <_fwalk_reent+0x16>
 800230c:	4630      	mov	r0, r6
 800230e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002312:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002316:	3f01      	subs	r7, #1
 8002318:	d501      	bpl.n	800231e <_fwalk_reent+0x22>
 800231a:	6824      	ldr	r4, [r4, #0]
 800231c:	e7f5      	b.n	800230a <_fwalk_reent+0xe>
 800231e:	89ab      	ldrh	r3, [r5, #12]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d907      	bls.n	8002334 <_fwalk_reent+0x38>
 8002324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002328:	3301      	adds	r3, #1
 800232a:	d003      	beq.n	8002334 <_fwalk_reent+0x38>
 800232c:	4629      	mov	r1, r5
 800232e:	4640      	mov	r0, r8
 8002330:	47c8      	blx	r9
 8002332:	4306      	orrs	r6, r0
 8002334:	3568      	adds	r5, #104	; 0x68
 8002336:	e7ee      	b.n	8002316 <_fwalk_reent+0x1a>

08002338 <__swhatbuf_r>:
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	460e      	mov	r6, r1
 800233c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002340:	b096      	sub	sp, #88	; 0x58
 8002342:	2900      	cmp	r1, #0
 8002344:	4614      	mov	r4, r2
 8002346:	461d      	mov	r5, r3
 8002348:	da07      	bge.n	800235a <__swhatbuf_r+0x22>
 800234a:	2300      	movs	r3, #0
 800234c:	602b      	str	r3, [r5, #0]
 800234e:	89b3      	ldrh	r3, [r6, #12]
 8002350:	061a      	lsls	r2, r3, #24
 8002352:	d410      	bmi.n	8002376 <__swhatbuf_r+0x3e>
 8002354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002358:	e00e      	b.n	8002378 <__swhatbuf_r+0x40>
 800235a:	466a      	mov	r2, sp
 800235c:	f000 f96c 	bl	8002638 <_fstat_r>
 8002360:	2800      	cmp	r0, #0
 8002362:	dbf2      	blt.n	800234a <__swhatbuf_r+0x12>
 8002364:	9a01      	ldr	r2, [sp, #4]
 8002366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800236a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800236e:	425a      	negs	r2, r3
 8002370:	415a      	adcs	r2, r3
 8002372:	602a      	str	r2, [r5, #0]
 8002374:	e7ee      	b.n	8002354 <__swhatbuf_r+0x1c>
 8002376:	2340      	movs	r3, #64	; 0x40
 8002378:	2000      	movs	r0, #0
 800237a:	6023      	str	r3, [r4, #0]
 800237c:	b016      	add	sp, #88	; 0x58
 800237e:	bd70      	pop	{r4, r5, r6, pc}

08002380 <__smakebuf_r>:
 8002380:	898b      	ldrh	r3, [r1, #12]
 8002382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002384:	079d      	lsls	r5, r3, #30
 8002386:	4606      	mov	r6, r0
 8002388:	460c      	mov	r4, r1
 800238a:	d507      	bpl.n	800239c <__smakebuf_r+0x1c>
 800238c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	6123      	str	r3, [r4, #16]
 8002394:	2301      	movs	r3, #1
 8002396:	6163      	str	r3, [r4, #20]
 8002398:	b002      	add	sp, #8
 800239a:	bd70      	pop	{r4, r5, r6, pc}
 800239c:	ab01      	add	r3, sp, #4
 800239e:	466a      	mov	r2, sp
 80023a0:	f7ff ffca 	bl	8002338 <__swhatbuf_r>
 80023a4:	9900      	ldr	r1, [sp, #0]
 80023a6:	4605      	mov	r5, r0
 80023a8:	4630      	mov	r0, r6
 80023aa:	f000 f875 	bl	8002498 <_malloc_r>
 80023ae:	b948      	cbnz	r0, 80023c4 <__smakebuf_r+0x44>
 80023b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023b4:	059a      	lsls	r2, r3, #22
 80023b6:	d4ef      	bmi.n	8002398 <__smakebuf_r+0x18>
 80023b8:	f023 0303 	bic.w	r3, r3, #3
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	81a3      	strh	r3, [r4, #12]
 80023c2:	e7e3      	b.n	800238c <__smakebuf_r+0xc>
 80023c4:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <__smakebuf_r+0x7c>)
 80023c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80023c8:	89a3      	ldrh	r3, [r4, #12]
 80023ca:	6020      	str	r0, [r4, #0]
 80023cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d0:	81a3      	strh	r3, [r4, #12]
 80023d2:	9b00      	ldr	r3, [sp, #0]
 80023d4:	6120      	str	r0, [r4, #16]
 80023d6:	6163      	str	r3, [r4, #20]
 80023d8:	9b01      	ldr	r3, [sp, #4]
 80023da:	b15b      	cbz	r3, 80023f4 <__smakebuf_r+0x74>
 80023dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023e0:	4630      	mov	r0, r6
 80023e2:	f000 f93b 	bl	800265c <_isatty_r>
 80023e6:	b128      	cbz	r0, 80023f4 <__smakebuf_r+0x74>
 80023e8:	89a3      	ldrh	r3, [r4, #12]
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	81a3      	strh	r3, [r4, #12]
 80023f4:	89a3      	ldrh	r3, [r4, #12]
 80023f6:	431d      	orrs	r5, r3
 80023f8:	81a5      	strh	r5, [r4, #12]
 80023fa:	e7cd      	b.n	8002398 <__smakebuf_r+0x18>
 80023fc:	080021ed 	.word	0x080021ed

08002400 <_free_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4605      	mov	r5, r0
 8002404:	2900      	cmp	r1, #0
 8002406:	d043      	beq.n	8002490 <_free_r+0x90>
 8002408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800240c:	1f0c      	subs	r4, r1, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	bfb8      	it	lt
 8002412:	18e4      	addlt	r4, r4, r3
 8002414:	f000 f944 	bl	80026a0 <__malloc_lock>
 8002418:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <_free_r+0x94>)
 800241a:	6813      	ldr	r3, [r2, #0]
 800241c:	4610      	mov	r0, r2
 800241e:	b933      	cbnz	r3, 800242e <_free_r+0x2e>
 8002420:	6063      	str	r3, [r4, #4]
 8002422:	6014      	str	r4, [r2, #0]
 8002424:	4628      	mov	r0, r5
 8002426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800242a:	f000 b93a 	b.w	80026a2 <__malloc_unlock>
 800242e:	42a3      	cmp	r3, r4
 8002430:	d90b      	bls.n	800244a <_free_r+0x4a>
 8002432:	6821      	ldr	r1, [r4, #0]
 8002434:	1862      	adds	r2, r4, r1
 8002436:	4293      	cmp	r3, r2
 8002438:	bf01      	itttt	eq
 800243a:	681a      	ldreq	r2, [r3, #0]
 800243c:	685b      	ldreq	r3, [r3, #4]
 800243e:	1852      	addeq	r2, r2, r1
 8002440:	6022      	streq	r2, [r4, #0]
 8002442:	6063      	str	r3, [r4, #4]
 8002444:	6004      	str	r4, [r0, #0]
 8002446:	e7ed      	b.n	8002424 <_free_r+0x24>
 8002448:	4613      	mov	r3, r2
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	b10a      	cbz	r2, 8002452 <_free_r+0x52>
 800244e:	42a2      	cmp	r2, r4
 8002450:	d9fa      	bls.n	8002448 <_free_r+0x48>
 8002452:	6819      	ldr	r1, [r3, #0]
 8002454:	1858      	adds	r0, r3, r1
 8002456:	42a0      	cmp	r0, r4
 8002458:	d10b      	bne.n	8002472 <_free_r+0x72>
 800245a:	6820      	ldr	r0, [r4, #0]
 800245c:	4401      	add	r1, r0
 800245e:	1858      	adds	r0, r3, r1
 8002460:	4282      	cmp	r2, r0
 8002462:	6019      	str	r1, [r3, #0]
 8002464:	d1de      	bne.n	8002424 <_free_r+0x24>
 8002466:	6810      	ldr	r0, [r2, #0]
 8002468:	6852      	ldr	r2, [r2, #4]
 800246a:	4401      	add	r1, r0
 800246c:	6019      	str	r1, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	e7d8      	b.n	8002424 <_free_r+0x24>
 8002472:	d902      	bls.n	800247a <_free_r+0x7a>
 8002474:	230c      	movs	r3, #12
 8002476:	602b      	str	r3, [r5, #0]
 8002478:	e7d4      	b.n	8002424 <_free_r+0x24>
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	1821      	adds	r1, r4, r0
 800247e:	428a      	cmp	r2, r1
 8002480:	bf01      	itttt	eq
 8002482:	6811      	ldreq	r1, [r2, #0]
 8002484:	6852      	ldreq	r2, [r2, #4]
 8002486:	1809      	addeq	r1, r1, r0
 8002488:	6021      	streq	r1, [r4, #0]
 800248a:	6062      	str	r2, [r4, #4]
 800248c:	605c      	str	r4, [r3, #4]
 800248e:	e7c9      	b.n	8002424 <_free_r+0x24>
 8002490:	bd38      	pop	{r3, r4, r5, pc}
 8002492:	bf00      	nop
 8002494:	20000090 	.word	0x20000090

08002498 <_malloc_r>:
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	1ccd      	adds	r5, r1, #3
 800249c:	f025 0503 	bic.w	r5, r5, #3
 80024a0:	3508      	adds	r5, #8
 80024a2:	2d0c      	cmp	r5, #12
 80024a4:	bf38      	it	cc
 80024a6:	250c      	movcc	r5, #12
 80024a8:	2d00      	cmp	r5, #0
 80024aa:	4606      	mov	r6, r0
 80024ac:	db01      	blt.n	80024b2 <_malloc_r+0x1a>
 80024ae:	42a9      	cmp	r1, r5
 80024b0:	d903      	bls.n	80024ba <_malloc_r+0x22>
 80024b2:	230c      	movs	r3, #12
 80024b4:	6033      	str	r3, [r6, #0]
 80024b6:	2000      	movs	r0, #0
 80024b8:	bd70      	pop	{r4, r5, r6, pc}
 80024ba:	f000 f8f1 	bl	80026a0 <__malloc_lock>
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <_malloc_r+0xac>)
 80024c0:	6814      	ldr	r4, [r2, #0]
 80024c2:	4621      	mov	r1, r4
 80024c4:	b991      	cbnz	r1, 80024ec <_malloc_r+0x54>
 80024c6:	4c20      	ldr	r4, [pc, #128]	; (8002548 <_malloc_r+0xb0>)
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	b91b      	cbnz	r3, 80024d4 <_malloc_r+0x3c>
 80024cc:	4630      	mov	r0, r6
 80024ce:	f000 f83d 	bl	800254c <_sbrk_r>
 80024d2:	6020      	str	r0, [r4, #0]
 80024d4:	4629      	mov	r1, r5
 80024d6:	4630      	mov	r0, r6
 80024d8:	f000 f838 	bl	800254c <_sbrk_r>
 80024dc:	1c43      	adds	r3, r0, #1
 80024de:	d124      	bne.n	800252a <_malloc_r+0x92>
 80024e0:	230c      	movs	r3, #12
 80024e2:	4630      	mov	r0, r6
 80024e4:	6033      	str	r3, [r6, #0]
 80024e6:	f000 f8dc 	bl	80026a2 <__malloc_unlock>
 80024ea:	e7e4      	b.n	80024b6 <_malloc_r+0x1e>
 80024ec:	680b      	ldr	r3, [r1, #0]
 80024ee:	1b5b      	subs	r3, r3, r5
 80024f0:	d418      	bmi.n	8002524 <_malloc_r+0x8c>
 80024f2:	2b0b      	cmp	r3, #11
 80024f4:	d90f      	bls.n	8002516 <_malloc_r+0x7e>
 80024f6:	600b      	str	r3, [r1, #0]
 80024f8:	18cc      	adds	r4, r1, r3
 80024fa:	50cd      	str	r5, [r1, r3]
 80024fc:	4630      	mov	r0, r6
 80024fe:	f000 f8d0 	bl	80026a2 <__malloc_unlock>
 8002502:	f104 000b 	add.w	r0, r4, #11
 8002506:	1d23      	adds	r3, r4, #4
 8002508:	f020 0007 	bic.w	r0, r0, #7
 800250c:	1ac3      	subs	r3, r0, r3
 800250e:	d0d3      	beq.n	80024b8 <_malloc_r+0x20>
 8002510:	425a      	negs	r2, r3
 8002512:	50e2      	str	r2, [r4, r3]
 8002514:	e7d0      	b.n	80024b8 <_malloc_r+0x20>
 8002516:	684b      	ldr	r3, [r1, #4]
 8002518:	428c      	cmp	r4, r1
 800251a:	bf16      	itet	ne
 800251c:	6063      	strne	r3, [r4, #4]
 800251e:	6013      	streq	r3, [r2, #0]
 8002520:	460c      	movne	r4, r1
 8002522:	e7eb      	b.n	80024fc <_malloc_r+0x64>
 8002524:	460c      	mov	r4, r1
 8002526:	6849      	ldr	r1, [r1, #4]
 8002528:	e7cc      	b.n	80024c4 <_malloc_r+0x2c>
 800252a:	1cc4      	adds	r4, r0, #3
 800252c:	f024 0403 	bic.w	r4, r4, #3
 8002530:	42a0      	cmp	r0, r4
 8002532:	d005      	beq.n	8002540 <_malloc_r+0xa8>
 8002534:	1a21      	subs	r1, r4, r0
 8002536:	4630      	mov	r0, r6
 8002538:	f000 f808 	bl	800254c <_sbrk_r>
 800253c:	3001      	adds	r0, #1
 800253e:	d0cf      	beq.n	80024e0 <_malloc_r+0x48>
 8002540:	6025      	str	r5, [r4, #0]
 8002542:	e7db      	b.n	80024fc <_malloc_r+0x64>
 8002544:	20000090 	.word	0x20000090
 8002548:	20000094 	.word	0x20000094

0800254c <_sbrk_r>:
 800254c:	b538      	push	{r3, r4, r5, lr}
 800254e:	2300      	movs	r3, #0
 8002550:	4c05      	ldr	r4, [pc, #20]	; (8002568 <_sbrk_r+0x1c>)
 8002552:	4605      	mov	r5, r0
 8002554:	4608      	mov	r0, r1
 8002556:	6023      	str	r3, [r4, #0]
 8002558:	f7fe f818 	bl	800058c <_sbrk>
 800255c:	1c43      	adds	r3, r0, #1
 800255e:	d102      	bne.n	8002566 <_sbrk_r+0x1a>
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	b103      	cbz	r3, 8002566 <_sbrk_r+0x1a>
 8002564:	602b      	str	r3, [r5, #0]
 8002566:	bd38      	pop	{r3, r4, r5, pc}
 8002568:	200000dc 	.word	0x200000dc

0800256c <__sread>:
 800256c:	b510      	push	{r4, lr}
 800256e:	460c      	mov	r4, r1
 8002570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002574:	f000 f896 	bl	80026a4 <_read_r>
 8002578:	2800      	cmp	r0, #0
 800257a:	bfab      	itete	ge
 800257c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800257e:	89a3      	ldrhlt	r3, [r4, #12]
 8002580:	181b      	addge	r3, r3, r0
 8002582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002586:	bfac      	ite	ge
 8002588:	6563      	strge	r3, [r4, #84]	; 0x54
 800258a:	81a3      	strhlt	r3, [r4, #12]
 800258c:	bd10      	pop	{r4, pc}

0800258e <__swrite>:
 800258e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002592:	461f      	mov	r7, r3
 8002594:	898b      	ldrh	r3, [r1, #12]
 8002596:	4605      	mov	r5, r0
 8002598:	05db      	lsls	r3, r3, #23
 800259a:	460c      	mov	r4, r1
 800259c:	4616      	mov	r6, r2
 800259e:	d505      	bpl.n	80025ac <__swrite+0x1e>
 80025a0:	2302      	movs	r3, #2
 80025a2:	2200      	movs	r2, #0
 80025a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025a8:	f000 f868 	bl	800267c <_lseek_r>
 80025ac:	89a3      	ldrh	r3, [r4, #12]
 80025ae:	4632      	mov	r2, r6
 80025b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025b4:	81a3      	strh	r3, [r4, #12]
 80025b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025ba:	463b      	mov	r3, r7
 80025bc:	4628      	mov	r0, r5
 80025be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025c2:	f000 b817 	b.w	80025f4 <_write_r>

080025c6 <__sseek>:
 80025c6:	b510      	push	{r4, lr}
 80025c8:	460c      	mov	r4, r1
 80025ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ce:	f000 f855 	bl	800267c <_lseek_r>
 80025d2:	1c43      	adds	r3, r0, #1
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	bf15      	itete	ne
 80025d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80025da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80025de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80025e2:	81a3      	strheq	r3, [r4, #12]
 80025e4:	bf18      	it	ne
 80025e6:	81a3      	strhne	r3, [r4, #12]
 80025e8:	bd10      	pop	{r4, pc}

080025ea <__sclose>:
 80025ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025ee:	f000 b813 	b.w	8002618 <_close_r>
	...

080025f4 <_write_r>:
 80025f4:	b538      	push	{r3, r4, r5, lr}
 80025f6:	4605      	mov	r5, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	2200      	movs	r2, #0
 80025fe:	4c05      	ldr	r4, [pc, #20]	; (8002614 <_write_r+0x20>)
 8002600:	6022      	str	r2, [r4, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	f7fd ff75 	bl	80004f2 <_write>
 8002608:	1c43      	adds	r3, r0, #1
 800260a:	d102      	bne.n	8002612 <_write_r+0x1e>
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	b103      	cbz	r3, 8002612 <_write_r+0x1e>
 8002610:	602b      	str	r3, [r5, #0]
 8002612:	bd38      	pop	{r3, r4, r5, pc}
 8002614:	200000dc 	.word	0x200000dc

08002618 <_close_r>:
 8002618:	b538      	push	{r3, r4, r5, lr}
 800261a:	2300      	movs	r3, #0
 800261c:	4c05      	ldr	r4, [pc, #20]	; (8002634 <_close_r+0x1c>)
 800261e:	4605      	mov	r5, r0
 8002620:	4608      	mov	r0, r1
 8002622:	6023      	str	r3, [r4, #0]
 8002624:	f7fd ff81 	bl	800052a <_close>
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d102      	bne.n	8002632 <_close_r+0x1a>
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	b103      	cbz	r3, 8002632 <_close_r+0x1a>
 8002630:	602b      	str	r3, [r5, #0]
 8002632:	bd38      	pop	{r3, r4, r5, pc}
 8002634:	200000dc 	.word	0x200000dc

08002638 <_fstat_r>:
 8002638:	b538      	push	{r3, r4, r5, lr}
 800263a:	2300      	movs	r3, #0
 800263c:	4c06      	ldr	r4, [pc, #24]	; (8002658 <_fstat_r+0x20>)
 800263e:	4605      	mov	r5, r0
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	f7fd ff7b 	bl	8000540 <_fstat>
 800264a:	1c43      	adds	r3, r0, #1
 800264c:	d102      	bne.n	8002654 <_fstat_r+0x1c>
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	b103      	cbz	r3, 8002654 <_fstat_r+0x1c>
 8002652:	602b      	str	r3, [r5, #0]
 8002654:	bd38      	pop	{r3, r4, r5, pc}
 8002656:	bf00      	nop
 8002658:	200000dc 	.word	0x200000dc

0800265c <_isatty_r>:
 800265c:	b538      	push	{r3, r4, r5, lr}
 800265e:	2300      	movs	r3, #0
 8002660:	4c05      	ldr	r4, [pc, #20]	; (8002678 <_isatty_r+0x1c>)
 8002662:	4605      	mov	r5, r0
 8002664:	4608      	mov	r0, r1
 8002666:	6023      	str	r3, [r4, #0]
 8002668:	f7fd ff79 	bl	800055e <_isatty>
 800266c:	1c43      	adds	r3, r0, #1
 800266e:	d102      	bne.n	8002676 <_isatty_r+0x1a>
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	b103      	cbz	r3, 8002676 <_isatty_r+0x1a>
 8002674:	602b      	str	r3, [r5, #0]
 8002676:	bd38      	pop	{r3, r4, r5, pc}
 8002678:	200000dc 	.word	0x200000dc

0800267c <_lseek_r>:
 800267c:	b538      	push	{r3, r4, r5, lr}
 800267e:	4605      	mov	r5, r0
 8002680:	4608      	mov	r0, r1
 8002682:	4611      	mov	r1, r2
 8002684:	2200      	movs	r2, #0
 8002686:	4c05      	ldr	r4, [pc, #20]	; (800269c <_lseek_r+0x20>)
 8002688:	6022      	str	r2, [r4, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	f7fd ff71 	bl	8000572 <_lseek>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d102      	bne.n	800269a <_lseek_r+0x1e>
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	b103      	cbz	r3, 800269a <_lseek_r+0x1e>
 8002698:	602b      	str	r3, [r5, #0]
 800269a:	bd38      	pop	{r3, r4, r5, pc}
 800269c:	200000dc 	.word	0x200000dc

080026a0 <__malloc_lock>:
 80026a0:	4770      	bx	lr

080026a2 <__malloc_unlock>:
 80026a2:	4770      	bx	lr

080026a4 <_read_r>:
 80026a4:	b538      	push	{r3, r4, r5, lr}
 80026a6:	4605      	mov	r5, r0
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	2200      	movs	r2, #0
 80026ae:	4c05      	ldr	r4, [pc, #20]	; (80026c4 <_read_r+0x20>)
 80026b0:	6022      	str	r2, [r4, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f7fd ff00 	bl	80004b8 <_read>
 80026b8:	1c43      	adds	r3, r0, #1
 80026ba:	d102      	bne.n	80026c2 <_read_r+0x1e>
 80026bc:	6823      	ldr	r3, [r4, #0]
 80026be:	b103      	cbz	r3, 80026c2 <_read_r+0x1e>
 80026c0:	602b      	str	r3, [r5, #0]
 80026c2:	bd38      	pop	{r3, r4, r5, pc}
 80026c4:	200000dc 	.word	0x200000dc

080026c8 <_init>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr

080026d4 <_fini>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr
