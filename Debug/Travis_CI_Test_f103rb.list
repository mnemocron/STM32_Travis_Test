
Travis_CI_Test_f103rb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  080066b0  080066b0  000166b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e84  08006e84  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08006e84  08006e84  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e84  08006e84  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08006e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001f0  0800707c  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800707c  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157cc  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002da8  00000000  00000000  000359e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  00038790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00039670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019899  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7e0  00000000  00000000  00053ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008938d  00000000  00000000  0005f489  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8816  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000461c  00000000  00000000  000e8894  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001f0 	.word	0x200001f0
 8000128:	00000000 	.word	0x00000000
 800012c:	08006694 	.word	0x08006694

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001f4 	.word	0x200001f4
 8000148:	08006694 	.word	0x08006694

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SCPI_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
size_t SCPI_Write(scpi_t * context, const char * data, size_t len){
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	60b9      	str	r1, [r7, #8]
 8000166:	607a      	str	r2, [r7, #4]
	(void) context;
	return fwrite(data, 1, len, stdout);
 8000168:	4b06      	ldr	r3, [pc, #24]	; (8000184 <SCPI_Write+0x28>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	689b      	ldr	r3, [r3, #8]
 800016e:	687a      	ldr	r2, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	68b8      	ldr	r0, [r7, #8]
 8000174:	f005 f95a 	bl	800542c <fwrite>
 8000178:	4603      	mov	r3, r0
}
 800017a:	4618      	mov	r0, r3
 800017c:	3710      	adds	r7, #16
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	20000020 	.word	0x20000020

08000188 <SCPI_Error>:

int SCPI_Error(scpi_t * context, int_fast16_t err){
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
 8000190:	6039      	str	r1, [r7, #0]
	return 0;
 8000192:	2300      	movs	r3, #0
}
 8000194:	4618      	mov	r0, r3
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <SCPI_Control>:

scpi_result_t SCPI_Control(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val){
 800019e:	b480      	push	{r7}
 80001a0:	b083      	sub	sp, #12
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
 80001a6:	460b      	mov	r3, r1
 80001a8:	70fb      	strb	r3, [r7, #3]
 80001aa:	4613      	mov	r3, r2
 80001ac:	803b      	strh	r3, [r7, #0]
	(void) context;
	return SCPI_RES_OK;
 80001ae:	2301      	movs	r3, #1
}
 80001b0:	4618      	mov	r0, r3
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr

080001ba <SCPI_Reset>:

scpi_result_t SCPI_Reset(scpi_t * context){
 80001ba:	b480      	push	{r7}
 80001bc:	b083      	sub	sp, #12
 80001be:	af00      	add	r7, sp, #0
 80001c0:	6078      	str	r0, [r7, #4]
	// reset ADCs etc.
	return SCPI_RES_OK;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <SCPI_Flush>:

scpi_result_t SCPI_Flush(scpi_t * context){
 80001ce:	b480      	push	{r7}
 80001d0:	b083      	sub	sp, #12
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	6078      	str	r0, [r7, #4]
	(void) context;
	return SCPI_RES_OK;
 80001d6:	2301      	movs	r3, #1
}
 80001d8:	4618      	mov	r0, r3
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
	...

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b088      	sub	sp, #32
 80001e8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fae1 	bl	80007b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 f84d 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 f8b7 	bl	8000364 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f6:	f000 f88b 	bl	8000310 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("booting...");
 80001fa:	4817      	ldr	r0, [pc, #92]	; (8000258 <main+0x74>)
 80001fc:	f005 f998 	bl	8005530 <iprintf>
  SCPI_Init(&scpi_context,
 8000200:	2311      	movs	r3, #17
 8000202:	9307      	str	r3, [sp, #28]
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <main+0x78>)
 8000206:	9306      	str	r3, [sp, #24]
 8000208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800020c:	9305      	str	r3, [sp, #20]
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <main+0x7c>)
 8000210:	9304      	str	r3, [sp, #16]
 8000212:	4b14      	ldr	r3, [pc, #80]	; (8000264 <main+0x80>)
 8000214:	9303      	str	r3, [sp, #12]
 8000216:	2300      	movs	r3, #0
 8000218:	9302      	str	r3, [sp, #8]
 800021a:	4b13      	ldr	r3, [pc, #76]	; (8000268 <main+0x84>)
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	4b13      	ldr	r3, [pc, #76]	; (800026c <main+0x88>)
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	4b13      	ldr	r3, [pc, #76]	; (8000270 <main+0x8c>)
 8000224:	4a13      	ldr	r2, [pc, #76]	; (8000274 <main+0x90>)
 8000226:	4914      	ldr	r1, [pc, #80]	; (8000278 <main+0x94>)
 8000228:	4814      	ldr	r0, [pc, #80]	; (800027c <main+0x98>)
 800022a:	f003 feb1 	bl	8003f90 <SCPI_Init>
   	scpi_units_def,
   	SCPI_IDN1, SCPI_IDN2, SCPI_IDN3, SCPI_IDN4,
   	(char*)&scpi_input_buffer, SCPI_INPUT_BUFFER_LENGTH,
   	scpi_error_queue_data, SCPI_ERROR_QUEUE_SIZE);

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);  // must be enabled again
 800022e:	4b14      	ldr	r3, [pc, #80]	; (8000280 <main+0x9c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	68da      	ldr	r2, [r3, #12]
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <main+0x9c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f042 0220 	orr.w	r2, r2, #32
 800023c:	60da      	str	r2, [r3, #12]
  printf("Done!\n");
 800023e:	4811      	ldr	r0, [pc, #68]	; (8000284 <main+0xa0>)
 8000240:	f005 f9ea 	bl	8005618 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// printf("foo\n");
	HAL_Delay(500);
 8000244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000248:	f000 fb14 	bl	8000874 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800024c:	2120      	movs	r1, #32
 800024e:	480e      	ldr	r0, [pc, #56]	; (8000288 <main+0xa4>)
 8000250:	f000 fe28 	bl	8000ea4 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000254:	e7f6      	b.n	8000244 <main+0x60>
 8000256:	bf00      	nop
 8000258:	080066b0 	.word	0x080066b0
 800025c:	200003f0 	.word	0x200003f0
 8000260:	200002f0 	.word	0x200002f0
 8000264:	080066bc 	.word	0x080066bc
 8000268:	080066c4 	.word	0x080066c4
 800026c:	080066dc 	.word	0x080066dc
 8000270:	08006b30 	.word	0x08006b30
 8000274:	20000000 	.word	0x20000000
 8000278:	08006a10 	.word	0x08006a10
 800027c:	20000258 	.word	0x20000258
 8000280:	20000218 	.word	0x20000218
 8000284:	080066e8 	.word	0x080066e8
 8000288:	40010800 	.word	0x40010800

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	; 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f005 f940 	bl	8005520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ba:	2302      	movs	r3, #2
 80002bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002be:	2300      	movs	r3, #0
 80002c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002c2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c8:	f107 0318 	add.w	r3, r7, #24
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fe25 	bl	8000f1c <HAL_RCC_OscConfig>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002d8:	f000 f8c4 	bl	8000464 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e0:	2302      	movs	r3, #2
 80002e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2102      	movs	r1, #2
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 f890 	bl	800141c <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000302:	f000 f8af 	bl	8000464 <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3740      	adds	r7, #64	; 0x40
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <MX_USART2_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800031c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000348:	f001 fa04 	bl	8001754 <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 f887 	bl	8000464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000218 	.word	0x20000218
 8000360:	40004400 	.word	0x40004400

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b088      	sub	sp, #32
 8000368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000378:	4b2d      	ldr	r3, [pc, #180]	; (8000430 <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a2c      	ldr	r2, [pc, #176]	; (8000430 <MX_GPIO_Init+0xcc>)
 800037e:	f043 0310 	orr.w	r3, r3, #16
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <MX_GPIO_Init+0xcc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0310 	and.w	r3, r3, #16
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b27      	ldr	r3, [pc, #156]	; (8000430 <MX_GPIO_Init+0xcc>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a26      	ldr	r2, [pc, #152]	; (8000430 <MX_GPIO_Init+0xcc>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b24      	ldr	r3, [pc, #144]	; (8000430 <MX_GPIO_Init+0xcc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b21      	ldr	r3, [pc, #132]	; (8000430 <MX_GPIO_Init+0xcc>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a20      	ldr	r2, [pc, #128]	; (8000430 <MX_GPIO_Init+0xcc>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <MX_GPIO_Init+0xcc>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
 80003be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <MX_GPIO_Init+0xcc>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <MX_GPIO_Init+0xcc>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b18      	ldr	r3, [pc, #96]	; (8000430 <MX_GPIO_Init+0xcc>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	603b      	str	r3, [r7, #0]
 80003d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2120      	movs	r1, #32
 80003dc:	4815      	ldr	r0, [pc, #84]	; (8000434 <MX_GPIO_Init+0xd0>)
 80003de:	f000 fd49 	bl	8000e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e8:	4b13      	ldr	r3, [pc, #76]	; (8000438 <MX_GPIO_Init+0xd4>)
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	4811      	ldr	r0, [pc, #68]	; (800043c <MX_GPIO_Init+0xd8>)
 80003f8:	f000 fbe2 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fc:	2320      	movs	r3, #32
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000400:	2301      	movs	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000404:	2300      	movs	r3, #0
 8000406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000408:	2302      	movs	r3, #2
 800040a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4808      	ldr	r0, [pc, #32]	; (8000434 <MX_GPIO_Init+0xd0>)
 8000414:	f000 fbd4 	bl	8000bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	2100      	movs	r1, #0
 800041c:	2028      	movs	r0, #40	; 0x28
 800041e:	f000 fb22 	bl	8000a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000422:	2028      	movs	r0, #40	; 0x28
 8000424:	f000 fb3b 	bl	8000a9e <HAL_NVIC_EnableIRQ>

}
 8000428:	bf00      	nop
 800042a:	3720      	adds	r7, #32
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40021000 	.word	0x40021000
 8000434:	40010800 	.word	0x40010800
 8000438:	10110000 	.word	0x10110000
 800043c:	40011000 	.word	0x40011000

08000440 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 * @see    https://github.com/STMicroelectronics/STM32CubeF4/blob/master/Projects/STM32F401RE-Nucleo/Examples/UART/UART_Printf/Src/main.c
 */
PUTCHAR_PROTOTYPE {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 1);
 8000448:	1d39      	adds	r1, r7, #4
 800044a:	2301      	movs	r3, #1
 800044c:	2201      	movs	r2, #1
 800044e:	4804      	ldr	r0, [pc, #16]	; (8000460 <__io_putchar+0x20>)
 8000450:	f001 f9cd 	bl	80017ee <HAL_UART_Transmit>

	return ch;
 8000454:	687b      	ldr	r3, [r7, #4]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000218 	.word	0x20000218

08000464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000468:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800046a:	e7fe      	b.n	800046a <Error_Handler+0x6>

0800046c <My_CoreTstQ>:
 * Result should be 0 if everything is ok
 * Result should be 1 if something goes wrong
 *
 * Return SCPI_RES_OK
 */
static scpi_result_t My_CoreTstQ(scpi_t * context) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]

    SCPI_ResultInt32(context, 0);
 8000474:	2100      	movs	r1, #0
 8000476:	6878      	ldr	r0, [r7, #4]
 8000478:	f003 fef3 	bl	8004262 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 800047c:	2301      	movs	r3, #1
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <HAL_MspInit+0x5c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <HAL_MspInit+0x5c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_MspInit+0x5c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x5c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <HAL_MspInit+0x5c>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x5c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <HAL_MspInit+0x60>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <HAL_MspInit+0x60>)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010000 	.word	0x40010000

080004ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a19      	ldr	r2, [pc, #100]	; (800056c <HAL_UART_MspInit+0x80>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d12b      	bne.n	8000564 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_UART_MspInit+0x84>)
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <HAL_UART_MspInit+0x84>)
 8000512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000516:	61d3      	str	r3, [r2, #28]
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_UART_MspInit+0x84>)
 800051a:	69db      	ldr	r3, [r3, #28]
 800051c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_UART_MspInit+0x84>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a11      	ldr	r2, [pc, #68]	; (8000570 <HAL_UART_MspInit+0x84>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <HAL_UART_MspInit+0x84>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800053c:	230c      	movs	r3, #12
 800053e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000540:	2302      	movs	r3, #2
 8000542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2302      	movs	r3, #2
 8000546:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <HAL_UART_MspInit+0x88>)
 8000550:	f000 fb36 	bl	8000bc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2026      	movs	r0, #38	; 0x26
 800055a:	f000 fa84 	bl	8000a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800055e:	2026      	movs	r0, #38	; 0x26
 8000560:	f000 fa9d 	bl	8000a9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40004400 	.word	0x40004400
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005be:	f000 f93d 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	* this function is executed for each byte/char entering the USART3 Bus
	* the char can be directly forwarded to the SCPI_Input()
	* the SCPI library has a buffer and automatically detects complete command sequences
	*/
	//if(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE) == SET){
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&rx, 1);  // receive the single char in non-blocking mode
 80005cc:	2201      	movs	r2, #1
 80005ce:	490b      	ldr	r1, [pc, #44]	; (80005fc <USART2_IRQHandler+0x34>)
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <USART2_IRQHandler+0x38>)
 80005d2:	f001 f99e 	bl	8001912 <HAL_UART_Receive_IT>
		SCPI_Input(&scpi_context, &rx, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	4908      	ldr	r1, [pc, #32]	; (80005fc <USART2_IRQHandler+0x34>)
 80005da:	480a      	ldr	r0, [pc, #40]	; (8000604 <USART2_IRQHandler+0x3c>)
 80005dc:	f003 fd11 	bl	8004002 <SCPI_Input>
	//}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <USART2_IRQHandler+0x38>)
 80005e2:	f001 f9eb 	bl	80019bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);  // must be enabled again
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <USART2_IRQHandler+0x38>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	4b04      	ldr	r3, [pc, #16]	; (8000600 <USART2_IRQHandler+0x38>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f042 0220 	orr.w	r2, r2, #32
 80005f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END USART2_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000412 	.word	0x20000412
 8000600:	20000218 	.word	0x20000218
 8000604:	20000258 	.word	0x20000258

08000608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800060c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000610:	f000 fc62 	bl	8000ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e00a      	b.n	8000640 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800062a:	f3af 8000 	nop.w
 800062e:	4601      	mov	r1, r0
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	b2ca      	uxtb	r2, r1
 8000638:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbf0      	blt.n	800062a <_read+0x12>
	}

return len;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000652:	b580      	push	{r7, lr}
 8000654:	b086      	sub	sp, #24
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
 8000662:	e009      	b.n	8000678 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	60ba      	str	r2, [r7, #8]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fee7 	bl	8000440 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	3301      	adds	r3, #1
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	697a      	ldr	r2, [r7, #20]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbf1      	blt.n	8000664 <_write+0x12>
	}
	return len;
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <_close>:

int _close(int file)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
	return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b0:	605a      	str	r2, [r3, #4]
	return 0;
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <_isatty>:

int _isatty(int file)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
	return 1;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr

080006d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b085      	sub	sp, #20
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
	return 0;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
	...

080006ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f4:	4a14      	ldr	r2, [pc, #80]	; (8000748 <_sbrk+0x5c>)
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <_sbrk+0x60>)
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <_sbrk+0x64>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <_sbrk+0x64>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <_sbrk+0x68>)
 800070c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	693a      	ldr	r2, [r7, #16]
 8000718:	429a      	cmp	r2, r3
 800071a:	d207      	bcs.n	800072c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800071c:	f004 fe32 	bl	8005384 <__errno>
 8000720:	4602      	mov	r2, r0
 8000722:	230c      	movs	r3, #12
 8000724:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	e009      	b.n	8000740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <_sbrk+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <_sbrk+0x64>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <_sbrk+0x64>)
 800073c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800073e:	68fb      	ldr	r3, [r7, #12]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20005000 	.word	0x20005000
 800074c:	00000400 	.word	0x00000400
 8000750:	2000020c 	.word	0x2000020c
 8000754:	20000420 	.word	0x20000420

08000758 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000764:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000766:	e003      	b.n	8000770 <LoopCopyDataInit>

08000768 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000768:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800076a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800076c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800076e:	3104      	adds	r1, #4

08000770 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000770:	480a      	ldr	r0, [pc, #40]	; (800079c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000774:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000776:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000778:	d3f6      	bcc.n	8000768 <CopyDataInit>
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800077c:	e002      	b.n	8000784 <LoopFillZerobss>

0800077e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000780:	f842 3b04 	str.w	r3, [r2], #4

08000784 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000788:	d3f9      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078a:	f7ff ffe5 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f004 fe5b 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000792:	f7ff fd27 	bl	80001e4 <main>
  bx lr
 8000796:	4770      	bx	lr
  ldr r3, =_sidata
 8000798:	08006e8c 	.word	0x08006e8c
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007a0:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 80007a4:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 80007a8:	2000041c 	.word	0x2000041c

080007ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_2_IRQHandler>
	...

080007b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_Init+0x28>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <HAL_Init+0x28>)
 80007ba:	f043 0310 	orr.w	r3, r3, #16
 80007be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c0:	2003      	movs	r0, #3
 80007c2:	f000 f945 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f000 f808 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007cc:	f7ff fe5c 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40022000 	.word	0x40022000

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x54>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x58>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f95d 	bl	8000aba <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e00e      	b.n	8000828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d80a      	bhi.n	8000826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f000 f925 	bl	8000a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_InitTick+0x5c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000014 	.word	0x20000014
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20000018 	.word	0x20000018

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <HAL_IncTick+0x20>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	2000001c 	.word	0x2000001c
 800085c:	20000414 	.word	0x20000414

08000860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000414 	.word	0x20000414

08000874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800087c:	f7ff fff0 	bl	8000860 <HAL_GetTick>
 8000880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800088c:	d005      	beq.n	800089a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_Delay+0x40>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	461a      	mov	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089a:	bf00      	nop
 800089c:	f7ff ffe0 	bl	8000860 <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8f7      	bhi.n	800089c <HAL_Delay+0x28>
  {
  }
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000001c 	.word	0x2000001c

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db0b      	blt.n	8000946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <__NVIC_EnableIRQ+0x34>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
         );
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff90 	bl	8000954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff2d 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff42 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff90 	bl	80009a8 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5f 	bl	8000954 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff35 	bl	800091c <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d005      	beq.n	8000af6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2204      	movs	r2, #4
 8000aee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e051      	b.n	8000b9a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 020e 	bic.w	r2, r2, #14
 8000b04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f022 0201 	bic.w	r2, r2, #1
 8000b14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <HAL_DMA_Abort_IT+0xd0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d029      	beq.n	8000b74 <HAL_DMA_Abort_IT+0xa0>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <HAL_DMA_Abort_IT+0xd4>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d022      	beq.n	8000b70 <HAL_DMA_Abort_IT+0x9c>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <HAL_DMA_Abort_IT+0xd8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d01a      	beq.n	8000b6a <HAL_DMA_Abort_IT+0x96>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a1d      	ldr	r2, [pc, #116]	; (8000bb0 <HAL_DMA_Abort_IT+0xdc>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d012      	beq.n	8000b64 <HAL_DMA_Abort_IT+0x90>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a1c      	ldr	r2, [pc, #112]	; (8000bb4 <HAL_DMA_Abort_IT+0xe0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d00a      	beq.n	8000b5e <HAL_DMA_Abort_IT+0x8a>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	; (8000bb8 <HAL_DMA_Abort_IT+0xe4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d102      	bne.n	8000b58 <HAL_DMA_Abort_IT+0x84>
 8000b52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b56:	e00e      	b.n	8000b76 <HAL_DMA_Abort_IT+0xa2>
 8000b58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b5c:	e00b      	b.n	8000b76 <HAL_DMA_Abort_IT+0xa2>
 8000b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b62:	e008      	b.n	8000b76 <HAL_DMA_Abort_IT+0xa2>
 8000b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b68:	e005      	b.n	8000b76 <HAL_DMA_Abort_IT+0xa2>
 8000b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6e:	e002      	b.n	8000b76 <HAL_DMA_Abort_IT+0xa2>
 8000b70:	2310      	movs	r3, #16
 8000b72:	e000      	b.n	8000b76 <HAL_DMA_Abort_IT+0xa2>
 8000b74:	2301      	movs	r3, #1
 8000b76:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <HAL_DMA_Abort_IT+0xe8>)
 8000b78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	4798      	blx	r3
    } 
  }
  return status;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40020008 	.word	0x40020008
 8000ba8:	4002001c 	.word	0x4002001c
 8000bac:	40020030 	.word	0x40020030
 8000bb0:	40020044 	.word	0x40020044
 8000bb4:	40020058 	.word	0x40020058
 8000bb8:	4002006c 	.word	0x4002006c
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b08b      	sub	sp, #44	; 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e127      	b.n	8000e24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	69fa      	ldr	r2, [r7, #28]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	f040 8116 	bne.w	8000e1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b12      	cmp	r3, #18
 8000bf8:	d034      	beq.n	8000c64 <HAL_GPIO_Init+0xa4>
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d80d      	bhi.n	8000c1a <HAL_GPIO_Init+0x5a>
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d02b      	beq.n	8000c5a <HAL_GPIO_Init+0x9a>
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d804      	bhi.n	8000c10 <HAL_GPIO_Init+0x50>
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d031      	beq.n	8000c6e <HAL_GPIO_Init+0xae>
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d01c      	beq.n	8000c48 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c0e:	e048      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d043      	beq.n	8000c9c <HAL_GPIO_Init+0xdc>
 8000c14:	2b11      	cmp	r3, #17
 8000c16:	d01b      	beq.n	8000c50 <HAL_GPIO_Init+0x90>
          break;
 8000c18:	e043      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c1a:	4a89      	ldr	r2, [pc, #548]	; (8000e40 <HAL_GPIO_Init+0x280>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d026      	beq.n	8000c6e <HAL_GPIO_Init+0xae>
 8000c20:	4a87      	ldr	r2, [pc, #540]	; (8000e40 <HAL_GPIO_Init+0x280>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d806      	bhi.n	8000c34 <HAL_GPIO_Init+0x74>
 8000c26:	4a87      	ldr	r2, [pc, #540]	; (8000e44 <HAL_GPIO_Init+0x284>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d020      	beq.n	8000c6e <HAL_GPIO_Init+0xae>
 8000c2c:	4a86      	ldr	r2, [pc, #536]	; (8000e48 <HAL_GPIO_Init+0x288>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01d      	beq.n	8000c6e <HAL_GPIO_Init+0xae>
          break;
 8000c32:	e036      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c34:	4a85      	ldr	r2, [pc, #532]	; (8000e4c <HAL_GPIO_Init+0x28c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d019      	beq.n	8000c6e <HAL_GPIO_Init+0xae>
 8000c3a:	4a85      	ldr	r2, [pc, #532]	; (8000e50 <HAL_GPIO_Init+0x290>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d016      	beq.n	8000c6e <HAL_GPIO_Init+0xae>
 8000c40:	4a84      	ldr	r2, [pc, #528]	; (8000e54 <HAL_GPIO_Init+0x294>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d013      	beq.n	8000c6e <HAL_GPIO_Init+0xae>
          break;
 8000c46:	e02c      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e028      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	3304      	adds	r3, #4
 8000c56:	623b      	str	r3, [r7, #32]
          break;
 8000c58:	e023      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	3308      	adds	r3, #8
 8000c60:	623b      	str	r3, [r7, #32]
          break;
 8000c62:	e01e      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	330c      	adds	r3, #12
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e019      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d102      	bne.n	8000c7c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c76:	2304      	movs	r3, #4
 8000c78:	623b      	str	r3, [r7, #32]
          break;
 8000c7a:	e012      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d105      	bne.n	8000c90 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c84:	2308      	movs	r3, #8
 8000c86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	611a      	str	r2, [r3, #16]
          break;
 8000c8e:	e008      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c90:	2308      	movs	r3, #8
 8000c92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	615a      	str	r2, [r3, #20]
          break;
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
          break;
 8000ca0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2bff      	cmp	r3, #255	; 0xff
 8000ca6:	d801      	bhi.n	8000cac <HAL_GPIO_Init+0xec>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	e001      	b.n	8000cb0 <HAL_GPIO_Init+0xf0>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3304      	adds	r3, #4
 8000cb0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2bff      	cmp	r3, #255	; 0xff
 8000cb6:	d802      	bhi.n	8000cbe <HAL_GPIO_Init+0xfe>
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	e002      	b.n	8000cc4 <HAL_GPIO_Init+0x104>
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	3b08      	subs	r3, #8
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	210f      	movs	r1, #15
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	6a39      	ldr	r1, [r7, #32]
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	431a      	orrs	r2, r3
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 8096 	beq.w	8000e1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf2:	4b59      	ldr	r3, [pc, #356]	; (8000e58 <HAL_GPIO_Init+0x298>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a58      	ldr	r2, [pc, #352]	; (8000e58 <HAL_GPIO_Init+0x298>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b56      	ldr	r3, [pc, #344]	; (8000e58 <HAL_GPIO_Init+0x298>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d0a:	4a54      	ldr	r2, [pc, #336]	; (8000e5c <HAL_GPIO_Init+0x29c>)
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4b      	ldr	r2, [pc, #300]	; (8000e60 <HAL_GPIO_Init+0x2a0>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d013      	beq.n	8000d5e <HAL_GPIO_Init+0x19e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <HAL_GPIO_Init+0x2a4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00d      	beq.n	8000d5a <HAL_GPIO_Init+0x19a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a49      	ldr	r2, [pc, #292]	; (8000e68 <HAL_GPIO_Init+0x2a8>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d007      	beq.n	8000d56 <HAL_GPIO_Init+0x196>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <HAL_GPIO_Init+0x2ac>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_GPIO_Init+0x192>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x1a0>
 8000d52:	2304      	movs	r3, #4
 8000d54:	e004      	b.n	8000d60 <HAL_GPIO_Init+0x1a0>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e002      	b.n	8000d60 <HAL_GPIO_Init+0x1a0>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <HAL_GPIO_Init+0x1a0>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d62:	f002 0203 	and.w	r2, r2, #3
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	4093      	lsls	r3, r2
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d70:	493a      	ldr	r1, [pc, #232]	; (8000e5c <HAL_GPIO_Init+0x29c>)
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3302      	adds	r3, #2
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d8a:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4938      	ldr	r1, [pc, #224]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d98:	4b35      	ldr	r3, [pc, #212]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	4933      	ldr	r1, [pc, #204]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000db2:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	492e      	ldr	r1, [pc, #184]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	604b      	str	r3, [r1, #4]
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	4929      	ldr	r1, [pc, #164]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d006      	beq.n	8000de8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	4924      	ldr	r1, [pc, #144]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	608b      	str	r3, [r1, #8]
 8000de6:	e006      	b.n	8000df6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	491f      	ldr	r1, [pc, #124]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d006      	beq.n	8000e10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	491a      	ldr	r1, [pc, #104]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	60cb      	str	r3, [r1, #12]
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	4915      	ldr	r1, [pc, #84]	; (8000e70 <HAL_GPIO_Init+0x2b0>)
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	3301      	adds	r3, #1
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f47f aed0 	bne.w	8000bd4 <HAL_GPIO_Init+0x14>
  }
}
 8000e34:	bf00      	nop
 8000e36:	372c      	adds	r7, #44	; 0x2c
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	10210000 	.word	0x10210000
 8000e44:	10110000 	.word	0x10110000
 8000e48:	10120000 	.word	0x10120000
 8000e4c:	10310000 	.word	0x10310000
 8000e50:	10320000 	.word	0x10320000
 8000e54:	10220000 	.word	0x10220000
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	40010800 	.word	0x40010800
 8000e64:	40010c00 	.word	0x40010c00
 8000e68:	40011000 	.word	0x40011000
 8000e6c:	40011400 	.word	0x40011400
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
 8000e80:	4613      	mov	r3, r2
 8000e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e84:	787b      	ldrb	r3, [r7, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e90:	e003      	b.n	8000e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e92:	887b      	ldrh	r3, [r7, #2]
 8000e94:	041a      	lsls	r2, r3, #16
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	041a      	lsls	r2, r3, #16
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43d9      	mvns	r1, r3
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	611a      	str	r2, [r3, #16]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
	...

08000ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ef0:	88fb      	ldrh	r3, [r7, #6]
 8000ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f806 	bl	8000f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40010400 	.word	0x40010400

08000f08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e26c      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8087 	beq.w	800104a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f3c:	4b92      	ldr	r3, [pc, #584]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b04      	cmp	r3, #4
 8000f46:	d00c      	beq.n	8000f62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f48:	4b8f      	ldr	r3, [pc, #572]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 030c 	and.w	r3, r3, #12
 8000f50:	2b08      	cmp	r3, #8
 8000f52:	d112      	bne.n	8000f7a <HAL_RCC_OscConfig+0x5e>
 8000f54:	4b8c      	ldr	r3, [pc, #560]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d10b      	bne.n	8000f7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f62:	4b89      	ldr	r3, [pc, #548]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d06c      	beq.n	8001048 <HAL_RCC_OscConfig+0x12c>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d168      	bne.n	8001048 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e246      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f82:	d106      	bne.n	8000f92 <HAL_RCC_OscConfig+0x76>
 8000f84:	4b80      	ldr	r3, [pc, #512]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a7f      	ldr	r2, [pc, #508]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e02e      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x98>
 8000f9a:	4b7b      	ldr	r3, [pc, #492]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a7a      	ldr	r2, [pc, #488]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b78      	ldr	r3, [pc, #480]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a77      	ldr	r2, [pc, #476]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e01d      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_RCC_OscConfig+0xbc>
 8000fbe:	4b72      	ldr	r3, [pc, #456]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a71      	ldr	r2, [pc, #452]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	4b6f      	ldr	r3, [pc, #444]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6e      	ldr	r2, [pc, #440]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e00b      	b.n	8000ff0 <HAL_RCC_OscConfig+0xd4>
 8000fd8:	4b6b      	ldr	r3, [pc, #428]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a6a      	ldr	r2, [pc, #424]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	4b68      	ldr	r3, [pc, #416]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a67      	ldr	r2, [pc, #412]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d013      	beq.n	8001020 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fc32 	bl	8000860 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001000:	f7ff fc2e 	bl	8000860 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b64      	cmp	r3, #100	; 0x64
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e1fa      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0xe4>
 800101e:	e014      	b.n	800104a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fc1e 	bl	8000860 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fc1a 	bl	8000860 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e1e6      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x10c>
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d063      	beq.n	800111e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001062:	4b49      	ldr	r3, [pc, #292]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b08      	cmp	r3, #8
 800106c:	d11c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x18c>
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d116      	bne.n	80010a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107a:	4b43      	ldr	r3, [pc, #268]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d005      	beq.n	8001092 <HAL_RCC_OscConfig+0x176>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e1ba      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001092:	4b3d      	ldr	r3, [pc, #244]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4939      	ldr	r1, [pc, #228]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a6:	e03a      	b.n	800111e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_RCC_OscConfig+0x270>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fbd3 	bl	8000860 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fbcf 	bl	8000860 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e19b      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4927      	ldr	r1, [pc, #156]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	600b      	str	r3, [r1, #0]
 80010f0:	e015      	b.n	800111e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_RCC_OscConfig+0x270>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fbb2 	bl	8000860 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001100:	f7ff fbae 	bl	8000860 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e17a      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d03a      	beq.n	80011a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d019      	beq.n	8001166 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_RCC_OscConfig+0x274>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001138:	f7ff fb92 	bl	8000860 <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fb8e 	bl	8000860 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e15a      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_RCC_OscConfig+0x26c>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 fada 	bl	8001718 <RCC_Delay>
 8001164:	e01c      	b.n	80011a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_RCC_OscConfig+0x274>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116c:	f7ff fb78 	bl	8000860 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001172:	e00f      	b.n	8001194 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001174:	f7ff fb74 	bl	8000860 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d908      	bls.n	8001194 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e140      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	42420000 	.word	0x42420000
 8001190:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e9      	bne.n	8001174 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80a6 	beq.w	80012fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b2:	4b97      	ldr	r3, [pc, #604]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10d      	bne.n	80011da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b94      	ldr	r3, [pc, #592]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	4a93      	ldr	r2, [pc, #588]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	61d3      	str	r3, [r2, #28]
 80011ca:	4b91      	ldr	r3, [pc, #580]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d6:	2301      	movs	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	4b8e      	ldr	r3, [pc, #568]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a8a      	ldr	r2, [pc, #552]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fb35 	bl	8000860 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fa:	f7ff fb31 	bl	8000860 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0fd      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x4f8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d106      	bne.n	800122e <HAL_RCC_OscConfig+0x312>
 8001220:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	4a7a      	ldr	r2, [pc, #488]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6213      	str	r3, [r2, #32]
 800122c:	e02d      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x334>
 8001236:	4b76      	ldr	r3, [pc, #472]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4a75      	ldr	r2, [pc, #468]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800123c:	f023 0301 	bic.w	r3, r3, #1
 8001240:	6213      	str	r3, [r2, #32]
 8001242:	4b73      	ldr	r3, [pc, #460]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a72      	ldr	r2, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 0304 	bic.w	r3, r3, #4
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	e01c      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b05      	cmp	r3, #5
 8001256:	d10c      	bne.n	8001272 <HAL_RCC_OscConfig+0x356>
 8001258:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a6c      	ldr	r2, [pc, #432]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a69      	ldr	r2, [pc, #420]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6213      	str	r3, [r2, #32]
 8001270:	e00b      	b.n	800128a <HAL_RCC_OscConfig+0x36e>
 8001272:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a66      	ldr	r2, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	4b64      	ldr	r3, [pc, #400]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a63      	ldr	r2, [pc, #396]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d015      	beq.n	80012be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fae5 	bl	8000860 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001298:	e00a      	b.n	80012b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff fae1 	bl	8000860 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e0ab      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b0:	4b57      	ldr	r3, [pc, #348]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0ee      	beq.n	800129a <HAL_RCC_OscConfig+0x37e>
 80012bc:	e014      	b.n	80012e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff facf 	bl	8000860 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c6:	f7ff facb 	bl	8000860 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e095      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012dc:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	6a1b      	ldr	r3, [r3, #32]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1ee      	bne.n	80012c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a47      	ldr	r2, [pc, #284]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 8081 	beq.w	8001406 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 030c 	and.w	r3, r3, #12
 800130c:	2b08      	cmp	r3, #8
 800130e:	d061      	beq.n	80013d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d146      	bne.n	80013a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001318:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fa9f 	bl	8000860 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fa9b 	bl	8000860 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e067      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d108      	bne.n	8001360 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	492d      	ldr	r1, [pc, #180]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a19      	ldr	r1, [r3, #32]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	430b      	orrs	r3, r1
 8001372:	4927      	ldr	r1, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fa6f 	bl	8000860 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fa6b 	bl	8000860 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e037      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x46a>
 80013a4:	e02f      	b.n	8001406 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_RCC_OscConfig+0x4fc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fa58 	bl	8000860 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b4:	f7ff fa54 	bl	8000860 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e020      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x498>
 80013d2:	e018      	b.n	8001406 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e013      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d106      	bne.n	8001402 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d001      	beq.n	8001406 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	40007000 	.word	0x40007000
 8001418:	42420060 	.word	0x42420060

0800141c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0d0      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d910      	bls.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b67      	ldr	r3, [pc, #412]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 0207 	bic.w	r2, r3, #7
 8001446:	4965      	ldr	r1, [pc, #404]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b8      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800147e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001482:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800149a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d040      	beq.n	800153c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d115      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e073      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06b      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4936      	ldr	r1, [pc, #216]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff f9a8 	bl	8000860 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff f9a4 	bl	8000860 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e053      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d210      	bcs.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 0207 	bic.w	r2, r3, #7
 8001552:	4922      	ldr	r1, [pc, #136]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e032      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f821 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015ae:	4601      	mov	r1, r0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x1c8>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	fa21 f303 	lsr.w	r3, r1, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1cc>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1d0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f906 	bl	80007dc <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	08006adc 	.word	0x08006adc
 80015e8:	20000014 	.word	0x20000014
 80015ec:	20000018 	.word	0x20000018

080015f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b490      	push	{r4, r7}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015f8:	1d3c      	adds	r4, r7, #4
 80015fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b04      	cmp	r3, #4
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x40>
 800162a:	2b08      	cmp	r3, #8
 800162c:	d003      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x46>
 800162e:	e02d      	b.n	800168c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001630:	4b1e      	ldr	r3, [pc, #120]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8001632:	623b      	str	r3, [r7, #32]
      break;
 8001634:	e02d      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	0c9b      	lsrs	r3, r3, #18
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001642:	4413      	add	r3, r2
 8001644:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001648:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	0c5b      	lsrs	r3, r3, #17
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001662:	4413      	add	r3, r2
 8001664:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001668:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800166e:	fb02 f203 	mul.w	r2, r2, r3
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	e004      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4a0c      	ldr	r2, [pc, #48]	; (80016b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	623b      	str	r3, [r7, #32]
      break;
 800168a:	e002      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800168e:	623b      	str	r3, [r7, #32]
      break;
 8001690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001692:	6a3b      	ldr	r3, [r7, #32]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3728      	adds	r7, #40	; 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bc90      	pop	{r4, r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	08006794 	.word	0x08006794
 80016a4:	080067a4 	.word	0x080067a4
 80016a8:	40021000 	.word	0x40021000
 80016ac:	007a1200 	.word	0x007a1200
 80016b0:	003d0900 	.word	0x003d0900

080016b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016b8:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	20000014 	.word	0x20000014

080016c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016cc:	f7ff fff2 	bl	80016b4 <HAL_RCC_GetHCLKFreq>
 80016d0:	4601      	mov	r1, r0
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	4a03      	ldr	r2, [pc, #12]	; (80016ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000
 80016ec:	08006aec 	.word	0x08006aec

080016f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016f4:	f7ff ffde 	bl	80016b4 <HAL_RCC_GetHCLKFreq>
 80016f8:	4601      	mov	r1, r0
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	0adb      	lsrs	r3, r3, #11
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	4a03      	ldr	r2, [pc, #12]	; (8001714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	08006aec 	.word	0x08006aec

08001718 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <RCC_Delay+0x34>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <RCC_Delay+0x38>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0a5b      	lsrs	r3, r3, #9
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001734:	bf00      	nop
  }
  while (Delay --);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	60fa      	str	r2, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f9      	bne.n	8001734 <RCC_Delay+0x1c>
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000014 	.word	0x20000014
 8001750:	10624dd3 	.word	0x10624dd3

08001754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e03f      	b.n	80017e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7fe feb6 	bl	80004ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2224      	movs	r2, #36	; 0x24
 8001784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fb8d 	bl	8001eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	691a      	ldr	r2, [r3, #16]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b08a      	sub	sp, #40	; 0x28
 80017f2:	af02      	add	r7, sp, #8
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	4613      	mov	r3, r2
 80017fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b20      	cmp	r3, #32
 800180c:	d17c      	bne.n	8001908 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <HAL_UART_Transmit+0x2c>
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e075      	b.n	800190a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_UART_Transmit+0x3e>
 8001828:	2302      	movs	r3, #2
 800182a:	e06e      	b.n	800190a <HAL_UART_Transmit+0x11c>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2221      	movs	r2, #33	; 0x21
 800183e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001842:	f7ff f80d 	bl	8000860 <HAL_GetTick>
 8001846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	88fa      	ldrh	r2, [r7, #6]
 800184c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	88fa      	ldrh	r2, [r7, #6]
 8001852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185c:	d108      	bne.n	8001870 <HAL_UART_Transmit+0x82>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d104      	bne.n	8001870 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	e003      	b.n	8001878 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2200      	movs	r2, #0
 800187c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001880:	e02a      	b.n	80018d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2200      	movs	r2, #0
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f9b0 	bl	8001bf2 <UART_WaitOnFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e036      	b.n	800190a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10b      	bne.n	80018ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	3302      	adds	r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	e007      	b.n	80018ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	3301      	adds	r3, #1
 80018c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3b01      	subs	r3, #1
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018dc:	b29b      	uxth	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1cf      	bne.n	8001882 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	2200      	movs	r2, #0
 80018ea:	2140      	movs	r1, #64	; 0x40
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f980 	bl	8001bf2 <UART_WaitOnFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e006      	b.n	800190a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e000      	b.n	800190a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001908:	2302      	movs	r3, #2
  }
}
 800190a:	4618      	mov	r0, r3
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001912:	b480      	push	{r7}
 8001914:	b085      	sub	sp, #20
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	4613      	mov	r3, r2
 800191e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b20      	cmp	r3, #32
 800192a:	d140      	bne.n	80019ae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_UART_Receive_IT+0x26>
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e039      	b.n	80019b0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_UART_Receive_IT+0x38>
 8001946:	2302      	movs	r3, #2
 8001948:	e032      	b.n	80019b0 <HAL_UART_Receive_IT+0x9e>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	88fa      	ldrh	r2, [r7, #6]
 8001962:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2222      	movs	r2, #34	; 0x22
 800196e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001988:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 0201 	orr.w	r2, r2, #1
 8001998:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0220 	orr.w	r2, r2, #32
 80019a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
  }
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_UART_IRQHandler+0x52>
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f9d5 	bl	8001db6 <UART_Receive_IT>
      return;
 8001a0c:	e0d1      	b.n	8001bb2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80b0 	beq.w	8001b76 <HAL_UART_IRQHandler+0x1ba>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <HAL_UART_IRQHandler+0x70>
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80a5 	beq.w	8001b76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <HAL_UART_IRQHandler+0x90>
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d005      	beq.n	8001a4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00a      	beq.n	8001a6c <HAL_UART_IRQHandler+0xb0>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	f043 0202 	orr.w	r2, r3, #2
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00a      	beq.n	8001a8c <HAL_UART_IRQHandler+0xd0>
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a84:	f043 0204 	orr.w	r2, r3, #4
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00f      	beq.n	8001ab6 <HAL_UART_IRQHandler+0xfa>
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 0320 	and.w	r3, r3, #32
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d104      	bne.n	8001aaa <HAL_UART_IRQHandler+0xee>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	f043 0208 	orr.w	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d078      	beq.n	8001bb0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_UART_IRQHandler+0x11c>
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f96f 	bl	8001db6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	bf14      	ite	ne
 8001ae6:	2301      	movne	r3, #1
 8001ae8:	2300      	moveq	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <HAL_UART_IRQHandler+0x144>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d031      	beq.n	8001b64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8c0 	bl	8001c86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <HAL_UART_IRQHandler+0x1fc>)
 8001b32:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe ffcb 	bl	8000ad4 <HAL_DMA_Abort_IT>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d016      	beq.n	8001b72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b52:	e00e      	b.n	8001b72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f843 	bl	8001be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b5a:	e00a      	b.n	8001b72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f83f 	bl	8001be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b62:	e006      	b.n	8001b72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f83b 	bl	8001be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001b70:	e01e      	b.n	8001bb0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b72:	bf00      	nop
    return;
 8001b74:	e01c      	b.n	8001bb0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_UART_IRQHandler+0x1d6>
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f8ac 	bl	8001ce8 <UART_Transmit_IT>
    return;
 8001b90:	e00f      	b.n	8001bb2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00a      	beq.n	8001bb2 <HAL_UART_IRQHandler+0x1f6>
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f8ed 	bl	8001d86 <UART_EndTransmit_IT>
    return;
 8001bac:	bf00      	nop
 8001bae:	e000      	b.n	8001bb2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8001bb0:	bf00      	nop
  }
}
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	08001cc1 	.word	0x08001cc1

08001bbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	60f8      	str	r0, [r7, #12]
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c02:	e02c      	b.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0a:	d028      	beq.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d007      	beq.n	8001c22 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c12:	f7fe fe25 	bl	8000860 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d21d      	bcs.n	8001c5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c30:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e00f      	b.n	8001c7e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4013      	ands	r3, r2
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	bf0c      	ite	eq
 8001c6e:	2301      	moveq	r3, #1
 8001c70:	2300      	movne	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d0c3      	beq.n	8001c04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001c9c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f7ff ff80 	bl	8001be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b21      	cmp	r3, #33	; 0x21
 8001cfa:	d13e      	bne.n	8001d7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d04:	d114      	bne.n	8001d30 <UART_Transmit_IT+0x48>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d110      	bne.n	8001d30 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	1c9a      	adds	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	621a      	str	r2, [r3, #32]
 8001d2e:	e008      	b.n	8001d42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	1c59      	adds	r1, r3, #1
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6211      	str	r1, [r2, #32]
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	e000      	b.n	8001d7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001d7a:	2302      	movs	r3, #2
  }
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ff08 	bl	8001bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b22      	cmp	r3, #34	; 0x22
 8001dc8:	d170      	bne.n	8001eac <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd2:	d117      	bne.n	8001e04 <UART_Receive_IT+0x4e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d113      	bne.n	8001e04 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	1c9a      	adds	r2, r3, #2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
 8001e02:	e026      	b.n	8001e52 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e16:	d007      	beq.n	8001e28 <UART_Receive_IT+0x72>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <UART_Receive_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d106      	bne.n	8001e36 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	e008      	b.n	8001e48 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d120      	bne.n	8001ea8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0220 	bic.w	r2, r2, #32
 8001e74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695a      	ldr	r2, [r3, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fe95 	bl	8001bce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e002      	b.n	8001eae <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
  }
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ef2:	f023 030c 	bic.w	r3, r3, #12
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a2c      	ldr	r2, [pc, #176]	; (8001fcc <UART_SetConfig+0x114>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d103      	bne.n	8001f28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f20:	f7ff fbe6 	bl	80016f0 <HAL_RCC_GetPCLK2Freq>
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	e002      	b.n	8001f2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f28:	f7ff fbce 	bl	80016c8 <HAL_RCC_GetPCLK1Freq>
 8001f2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	009a      	lsls	r2, r3, #2
 8001f38:	441a      	add	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <UART_SetConfig+0x118>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	0119      	lsls	r1, r3, #4
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009a      	lsls	r2, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <UART_SetConfig+0x118>)
 8001f66:	fba3 0302 	umull	r0, r3, r3, r2
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2064      	movs	r0, #100	; 0x64
 8001f6e:	fb00 f303 	mul.w	r3, r0, r3
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	3332      	adds	r3, #50	; 0x32
 8001f78:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <UART_SetConfig+0x118>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f84:	4419      	add	r1, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009a      	lsls	r2, r3, #2
 8001f90:	441a      	add	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <UART_SetConfig+0x118>)
 8001f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2064      	movs	r0, #100	; 0x64
 8001fa6:	fb00 f303 	mul.w	r3, r0, r3
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	3332      	adds	r3, #50	; 0x32
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <UART_SetConfig+0x118>)
 8001fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	440a      	add	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	51eb851f 	.word	0x51eb851f

08001fd4 <SCPI_ErrorInit>:

/**
 * Initialize error queue
 * @param context - scpi context
 */
void SCPI_ErrorInit(scpi_t * context, scpi_error_t * data, int16_t size) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
    fifo_init(&context->error_queue, data, size);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	333c      	adds	r3, #60	; 0x3c
 8001fe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 f9dd 	bl	80023ac <fifo_init>
}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <SCPI_ErrorEmitEmpty>:

/**
 * Emit no error
 * @param context scpi context
 */
static void SCPI_ErrorEmitEmpty(scpi_t * context) {
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
    if ((SCPI_ErrorCount(context) == 0) && (SCPI_RegGet(context, SCPI_REG_STB) & STB_QMA)) {
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f872 	bl	80020ec <SCPI_ErrorCount>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11c      	bne.n	8002048 <SCPI_ErrorEmitEmpty+0x4e>
 800200e:	2100      	movs	r1, #0
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fb3d 	bl	8002690 <SCPI_RegGet>
 8002016:	4603      	mov	r3, r0
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <SCPI_ErrorEmitEmpty+0x4e>
        SCPI_RegClearBits(context, SCPI_REG_STB, STB_QMA);
 8002020:	2204      	movs	r2, #4
 8002022:	2100      	movs	r1, #0
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fc32 	bl	800288e <SCPI_RegClearBits>

        if (context->interface && context->interface->error) {
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <SCPI_ErrorEmitEmpty+0x4e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <SCPI_ErrorEmitEmpty+0x4e>
            context->interface->error(context, 0);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2100      	movs	r1, #0
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
        }
    }
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <SCPI_ErrorEmit>:
/**
 * Emit error
 * @param context scpi context
 * @param err Error to emit
 */
static void SCPI_ErrorEmit(scpi_t * context, int16_t err) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
    SCPI_RegSetBits(context, SCPI_REG_STB, STB_QMA);
 800205c:	2204      	movs	r2, #4
 800205e:	2100      	movs	r1, #0
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 fbf9 	bl	8002858 <SCPI_RegSetBits>

    if (context->interface && context->interface->error) {
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <SCPI_ErrorEmit+0x38>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <SCPI_ErrorEmit+0x38>
        context->interface->error(context, err);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002082:	4611      	mov	r1, r2
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
    }
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <SCPI_ErrorClear>:

/**
 * Clear error queue
 * @param context - scpi context
 */
void SCPI_ErrorClear(scpi_t * context) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    while (fifo_remove(&context->error_queue, &error)) {
        SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
    }
#endif
    fifo_clear(&context->error_queue);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	333c      	adds	r3, #60	; 0x3c
 800209c:	4618      	mov	r0, r3
 800209e:	f000 f9a0 	bl	80023e2 <fifo_clear>

    SCPI_ErrorEmitEmpty(context);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ffa9 	bl	8001ffa <SCPI_ErrorEmitEmpty>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <SCPI_ErrorPop>:
 * Pop error from queue
 * @param context - scpi context
 * @param error
 * @return
 */
scpi_bool_t SCPI_ErrorPop(scpi_t * context, scpi_error_t * error) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
    if (!error || !context) return FALSE;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <SCPI_ErrorPop+0x16>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <SCPI_ErrorPop+0x1a>
 80020c6:	2300      	movs	r3, #0
 80020c8:	e00c      	b.n	80020e4 <SCPI_ErrorPop+0x34>
    SCPI_ERROR_SETVAL(error, 0, NULL);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	801a      	strh	r2, [r3, #0]
    fifo_remove(&context->error_queue, error);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	333c      	adds	r3, #60	; 0x3c
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f9f3 	bl	80024c2 <fifo_remove>

    SCPI_ErrorEmitEmpty(context);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ff8c 	bl	8001ffa <SCPI_ErrorEmitEmpty>

    return TRUE;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <SCPI_ErrorCount>:
/**
 * Return number of errors/events in the queue
 * @param context
 * @return
 */
int32_t SCPI_ErrorCount(scpi_t * context) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    int16_t result = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	81fb      	strh	r3, [r7, #14]

    fifo_count(&context->error_queue, &result);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	333c      	adds	r3, #60	; 0x3c
 80020fc:	f107 020e 	add.w	r2, r7, #14
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fa50 	bl	80025a8 <fifo_count>

    return result;
 8002108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <SCPI_ErrorAddInternal>:

static scpi_bool_t SCPI_ErrorAddInternal(scpi_t * context, int16_t err, char * info, size_t info_len) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	460b      	mov	r3, r1
 8002122:	817b      	strh	r3, [r7, #10]
    scpi_error_t error_value;
    /* SCPIDEFINE_strndup is sometimes a dumy that does not reference it's arguments. 
       Since info_len is not referenced elsewhere caoing to void prevents unusd argument warnings */
    (void) info_len;
    char * info_ptr = info ? SCPIDEFINE_strndup(&context->error_info_heap, info, info_len) : NULL;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
    SCPI_ERROR_SETVAL(&error_value, err, info_ptr);
 8002128:	897b      	ldrh	r3, [r7, #10]
 800212a:	823b      	strh	r3, [r7, #16]
    if (!fifo_add(&context->error_queue, &error_value)) {
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	333c      	adds	r3, #60	; 0x3c
 8002130:	f107 0210 	add.w	r2, r7, #16
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f98a 	bl	8002450 <fifo_add>
 800213c:	4603      	mov	r3, r0
 800213e:	f083 0301 	eor.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d014      	beq.n	8002172 <SCPI_ErrorAddInternal+0x5e>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        fifo_remove_last(&context->error_queue, &error_value);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	333c      	adds	r3, #60	; 0x3c
 800214c:	f107 0210 	add.w	r2, r7, #16
 8002150:	4611      	mov	r1, r2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f9ec 	bl	8002530 <fifo_remove_last>
        SCPIDEFINE_free(&context->error_info_heap, error_value.device_dependent_info, true);
        SCPI_ERROR_SETVAL(&error_value, SCPI_ERROR_QUEUE_OVERFLOW, NULL);
 8002158:	f64f 63a2 	movw	r3, #65186	; 0xfea2
 800215c:	823b      	strh	r3, [r7, #16]
        fifo_add(&context->error_queue, &error_value);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	333c      	adds	r3, #60	; 0x3c
 8002162:	f107 0210 	add.w	r2, r7, #16
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f971 	bl	8002450 <fifo_add>
        return FALSE;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <SCPI_ErrorAddInternal+0x60>
    }
    return TRUE;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <SCPI_ErrorPushEx>:
 * @param context
 * @param err - error number
 * @param info - additional text information or NULL for no text
 * @param info_len - length of text or 0 for automatic length
 */
void SCPI_ErrorPushEx(scpi_t * context, int16_t err, char * info, size_t info_len) {
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	460b      	mov	r3, r1
 800218a:	817b      	strh	r3, [r7, #10]
    int i;
    /* automatic calculation of length */
    if (info && info_len == 0) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <SCPI_ErrorPushEx+0x26>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <SCPI_ErrorPushEx+0x26>
        info_len = SCPIDEFINE_strnlen(info, SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH);
 8002198:	21ff      	movs	r1, #255	; 0xff
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f003 fa69 	bl	8005672 <strnlen>
 80021a0:	6038      	str	r0, [r7, #0]
    }
    scpi_bool_t queue_overflow = !SCPI_ErrorAddInternal(context, err, info, info_len);
 80021a2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7ff ffb2 	bl	8002114 <SCPI_ErrorAddInternal>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f083 0301 	eor.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	74fb      	strb	r3, [r7, #19]
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	74fb      	strb	r3, [r7, #19]

    for (i = 0; i < ERROR_DEFS_N; i++) {
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	e02b      	b.n	800222a <SCPI_ErrorPushEx+0xae>
        if ((err <= errs[i].from) && (err >= errs[i].to)) {
 80021d2:	4923      	ldr	r1, [pc, #140]	; (8002260 <SCPI_ErrorPushEx+0xe4>)
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	440b      	add	r3, r1
 80021e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dc1b      	bgt.n	8002224 <SCPI_ErrorPushEx+0xa8>
 80021ec:	491c      	ldr	r1, [pc, #112]	; (8002260 <SCPI_ErrorPushEx+0xe4>)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	3302      	adds	r3, #2
 80021fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002200:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002204:	429a      	cmp	r2, r3
 8002206:	db0d      	blt.n	8002224 <SCPI_ErrorPushEx+0xa8>
            SCPI_RegSetBits(context, SCPI_REG_ESR, errs[i].esrBit);
 8002208:	4915      	ldr	r1, [pc, #84]	; (8002260 <SCPI_ErrorPushEx+0xe4>)
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	440b      	add	r3, r1
 8002216:	3304      	adds	r3, #4
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	2102      	movs	r1, #2
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fb1a 	bl	8002858 <SCPI_RegSetBits>
    for (i = 0; i < ERROR_DEFS_N; i++) {
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b08      	cmp	r3, #8
 800222e:	ddd0      	ble.n	80021d2 <SCPI_ErrorPushEx+0x56>
        }
    }

    SCPI_ErrorEmit(context, err);
 8002230:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002234:	4619      	mov	r1, r3
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f7ff ff0a 	bl	8002050 <SCPI_ErrorEmit>
    if (queue_overflow) {
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <SCPI_ErrorPushEx+0xce>
        SCPI_ErrorEmit(context, SCPI_ERROR_QUEUE_OVERFLOW);
 8002242:	4908      	ldr	r1, [pc, #32]	; (8002264 <SCPI_ErrorPushEx+0xe8>)
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff ff03 	bl	8002050 <SCPI_ErrorEmit>
    }

    if (context) {
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <SCPI_ErrorPushEx+0xdc>
        context->cmd_error = TRUE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
}
 8002258:	bf00      	nop
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	08006af4 	.word	0x08006af4
 8002264:	fffffea2 	.word	0xfffffea2

08002268 <SCPI_ErrorPush>:
/**
 * Push error to queue
 * @param context - scpi context
 * @param err - error number
 */
void SCPI_ErrorPush(scpi_t * context, int16_t err) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
    SCPI_ErrorPushEx(context, err, NULL, 0);
 8002274:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002278:	2300      	movs	r3, #0
 800227a:	2200      	movs	r2, #0
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff7d 	bl	800217c <SCPI_ErrorPushEx>
    return;
 8002282:	bf00      	nop
}
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <SCPI_ErrorTranslate>:
/**
 * Translate error number to string
 * @param err - error number
 * @return Error string representation
 */
const char * SCPI_ErrorTranslate(int16_t err) {
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
    switch (err) {
 8002296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800229a:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 800229e:	d04c      	beq.n	800233a <SCPI_ErrorTranslate+0xae>
 80022a0:	f113 0f8a 	cmn.w	r3, #138	; 0x8a
 80022a4:	dc1a      	bgt.n	80022dc <SCPI_ErrorTranslate+0x50>
 80022a6:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 80022aa:	d04e      	beq.n	800234a <SCPI_ErrorTranslate+0xbe>
 80022ac:	f113 0fe0 	cmn.w	r3, #224	; 0xe0
 80022b0:	dc0a      	bgt.n	80022c8 <SCPI_ErrorTranslate+0x3c>
 80022b2:	f513 7faf 	cmn.w	r3, #350	; 0x15e
 80022b6:	d04c      	beq.n	8002352 <SCPI_ErrorTranslate+0xc6>
 80022b8:	f513 7f9b 	cmn.w	r3, #310	; 0x136
 80022bc:	d047      	beq.n	800234e <SCPI_ErrorTranslate+0xc2>
 80022be:	f46f 72b5 	mvn.w	r2, #362	; 0x16a
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d047      	beq.n	8002356 <SCPI_ErrorTranslate+0xca>
 80022c6:	e048      	b.n	800235a <SCPI_ErrorTranslate+0xce>
 80022c8:	f113 0faa 	cmn.w	r3, #170	; 0xaa
 80022cc:	d039      	beq.n	8002342 <SCPI_ErrorTranslate+0xb6>
 80022ce:	f113 0f97 	cmn.w	r3, #151	; 0x97
 80022d2:	d034      	beq.n	800233e <SCPI_ErrorTranslate+0xb2>
 80022d4:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80022d8:	d035      	beq.n	8002346 <SCPI_ErrorTranslate+0xba>
 80022da:	e03e      	b.n	800235a <SCPI_ErrorTranslate+0xce>
 80022dc:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 80022e0:	d023      	beq.n	800232a <SCPI_ErrorTranslate+0x9e>
 80022e2:	f113 0f6c 	cmn.w	r3, #108	; 0x6c
 80022e6:	dc09      	bgt.n	80022fc <SCPI_ErrorTranslate+0x70>
 80022e8:	f113 0f71 	cmn.w	r3, #113	; 0x71
 80022ec:	d021      	beq.n	8002332 <SCPI_ErrorTranslate+0xa6>
 80022ee:	f113 0f6d 	cmn.w	r3, #109	; 0x6d
 80022f2:	d01c      	beq.n	800232e <SCPI_ErrorTranslate+0xa2>
 80022f4:	f113 0f83 	cmn.w	r3, #131	; 0x83
 80022f8:	d01d      	beq.n	8002336 <SCPI_ErrorTranslate+0xaa>
 80022fa:	e02e      	b.n	800235a <SCPI_ErrorTranslate+0xce>
 80022fc:	f113 0f67 	cmn.w	r3, #103	; 0x67
 8002300:	d00f      	beq.n	8002322 <SCPI_ErrorTranslate+0x96>
 8002302:	f113 0f67 	cmn.w	r3, #103	; 0x67
 8002306:	dc03      	bgt.n	8002310 <SCPI_ErrorTranslate+0x84>
 8002308:	f113 0f68 	cmn.w	r3, #104	; 0x68
 800230c:	d00b      	beq.n	8002326 <SCPI_ErrorTranslate+0x9a>
 800230e:	e024      	b.n	800235a <SCPI_ErrorTranslate+0xce>
 8002310:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8002314:	d003      	beq.n	800231e <SCPI_ErrorTranslate+0x92>
 8002316:	2b00      	cmp	r3, #0
 8002318:	d11f      	bne.n	800235a <SCPI_ErrorTranslate+0xce>
#if USE_FULL_ERROR_LIST
#define XE X
#else
#define XE(def, val, str)
#endif
        LIST_OF_ERRORS
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <SCPI_ErrorTranslate+0xdc>)
 800231c:	e01e      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <SCPI_ErrorTranslate+0xe0>)
 8002320:	e01c      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <SCPI_ErrorTranslate+0xe4>)
 8002324:	e01a      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <SCPI_ErrorTranslate+0xe8>)
 8002328:	e018      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <SCPI_ErrorTranslate+0xec>)
 800232c:	e016      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 800232e:	4b13      	ldr	r3, [pc, #76]	; (800237c <SCPI_ErrorTranslate+0xf0>)
 8002330:	e014      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <SCPI_ErrorTranslate+0xf4>)
 8002334:	e012      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <SCPI_ErrorTranslate+0xf8>)
 8002338:	e010      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <SCPI_ErrorTranslate+0xfc>)
 800233c:	e00e      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <SCPI_ErrorTranslate+0x100>)
 8002340:	e00c      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <SCPI_ErrorTranslate+0x104>)
 8002344:	e00a      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <SCPI_ErrorTranslate+0x108>)
 8002348:	e008      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <SCPI_ErrorTranslate+0x10c>)
 800234c:	e006      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <SCPI_ErrorTranslate+0x110>)
 8002350:	e004      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <SCPI_ErrorTranslate+0x114>)
 8002354:	e002      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <SCPI_ErrorTranslate+0x118>)
 8002358:	e000      	b.n	800235c <SCPI_ErrorTranslate+0xd0>
#if USE_USER_ERROR_LIST
        LIST_OF_USER_ERRORS
#endif
#undef X
#undef XE
        default: return "Unknown error";
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <SCPI_ErrorTranslate+0x11c>)
    }
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	080067a8 	.word	0x080067a8
 800236c:	080067b4 	.word	0x080067b4
 8002370:	080067c8 	.word	0x080067c8
 8002374:	080067dc 	.word	0x080067dc
 8002378:	080067ec 	.word	0x080067ec
 800237c:	08006804 	.word	0x08006804
 8002380:	08006818 	.word	0x08006818
 8002384:	0800682c 	.word	0x0800682c
 8002388:	0800683c 	.word	0x0800683c
 800238c:	08006850 	.word	0x08006850
 8002390:	08006864 	.word	0x08006864
 8002394:	08006878 	.word	0x08006878
 8002398:	08006888 	.word	0x08006888
 800239c:	080068a0 	.word	0x080068a0
 80023a0:	080068b0 	.word	0x080068b0
 80023a4:	080068c0 	.word	0x080068c0
 80023a8:	080068d8 	.word	0x080068d8

080023ac <fifo_init>:

/**
 * Initialize fifo
 * @param fifo
 */
void fifo_init(scpi_fifo_t * fifo, scpi_error_t * data, int16_t size) {
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	4613      	mov	r3, r2
 80023b8:	80fb      	strh	r3, [r7, #6]
    fifo->wr = 0;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	809a      	strh	r2, [r3, #4]
    fifo->data = data;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	609a      	str	r2, [r3, #8]
    fifo->size = size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	88fa      	ldrh	r2, [r7, #6]
 80023d6:	80da      	strh	r2, [r3, #6]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <fifo_clear>:

/**
 * Empty fifo
 * @param fifo
 */
void fifo_clear(scpi_fifo_t * fifo) {
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
    fifo->wr = 0;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	801a      	strh	r2, [r3, #0]
    fifo->rd = 0;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	805a      	strh	r2, [r3, #2]
    fifo->count = 0;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	809a      	strh	r2, [r3, #4]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <fifo_is_empty>:
/**
 * Test if fifo is empty
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_empty(scpi_fifo_t * fifo) {
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
    return fifo->count == 0;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
}
 800241e:	4618      	mov	r0, r3
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <fifo_is_full>:
/**
 * Test if fifo is full
 * @param fifo
 * @return
 */
scpi_bool_t fifo_is_full(scpi_fifo_t * fifo) {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    return fifo->count == fifo->size;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800243c:	429a      	cmp	r2, r3
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <fifo_add>:
 * @param fifo
 * @param err
 * @param info
 * @return
 */
scpi_bool_t fifo_add(scpi_fifo_t * fifo, const scpi_error_t * value) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    /* FIFO full? */
    if (fifo_is_full(fifo)) {
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffe4 	bl	8002428 <fifo_is_full>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <fifo_add+0x1a>
        return FALSE;
 8002466:	2300      	movs	r3, #0
 8002468:	e027      	b.n	80024ba <fifo_add+0x6a>
    }
    if (!value) {
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <fifo_add+0x24>
        return FALSE;
 8002470:	2300      	movs	r3, #0
 8002472:	e022      	b.n	80024ba <fifo_add+0x6a>
    }

    fifo->data[fifo->wr] = *value;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	801a      	strh	r2, [r3, #0]
    fifo->wr = (fifo->wr + 1) % (fifo->size);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248e:	3301      	adds	r3, #1
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002496:	fb93 f1f2 	sdiv	r1, r3, r2
 800249a:	fb02 f201 	mul.w	r2, r2, r1
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	b21a      	sxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	801a      	strh	r2, [r3, #0]
    fifo->count += 1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	809a      	strh	r2, [r3, #4]
    return TRUE;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <fifo_remove>:
 * Remove element form fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove(scpi_fifo_t * fifo, scpi_error_t * value) {
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff9a 	bl	8002406 <fifo_is_empty>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <fifo_remove+0x1a>
        return FALSE;
 80024d8:	2300      	movs	r3, #0
 80024da:	e025      	b.n	8002528 <fifo_remove+0x66>
    }

    if (value) {
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <fifo_remove+0x34>
        *value = fifo->data[fifo->rd];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	441a      	add	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	8812      	ldrh	r2, [r2, #0]
 80024f4:	801a      	strh	r2, [r3, #0]
    }

    fifo->rd = (fifo->rd + 1) % (fifo->size);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024fc:	3301      	adds	r3, #1
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002504:	fb93 f1f2 	sdiv	r1, r3, r2
 8002508:	fb02 f201 	mul.w	r2, r2, r1
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	b21a      	sxth	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	805a      	strh	r2, [r3, #2]
    fifo->count -= 1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	b21a      	sxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	809a      	strh	r2, [r3, #4]

    return TRUE;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <fifo_remove_last>:
 * Remove last element from fifo
 * @param fifo
 * @param value
 * @return FALSE - fifo is empty
 */
scpi_bool_t fifo_remove_last(scpi_fifo_t * fifo, scpi_error_t * value) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
    /* FIFO empty? */
    if (fifo_is_empty(fifo)) {
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff63 	bl	8002406 <fifo_is_empty>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <fifo_remove_last+0x1a>
        return FALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	e02a      	b.n	80025a0 <fifo_remove_last+0x70>
    }

    fifo->wr = (fifo->wr + fifo->size - 1) % (fifo->size);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002550:	461a      	mov	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002558:	4413      	add	r3, r2
 800255a:	3b01      	subs	r3, #1
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002562:	fb93 f1f2 	sdiv	r1, r3, r2
 8002566:	fb02 f201 	mul.w	r2, r2, r1
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	b21a      	sxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	801a      	strh	r2, [r3, #0]

    if (value) {
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <fifo_remove_last+0x5c>
        *value = fifo->data[fifo->wr];
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	441a      	add	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	801a      	strh	r2, [r3, #0]
    }
    fifo->count -= 1;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29b      	uxth	r3, r3
 8002598:	b21a      	sxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	809a      	strh	r2, [r3, #4]

    return TRUE;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <fifo_count>:
 * Retrive number of elements in fifo
 * @param fifo
 * @param value
 * @return
 */
scpi_bool_t fifo_count(scpi_fifo_t * fifo, int16_t * value) {
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
    *value = fifo->count;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	801a      	strh	r2, [r3, #0]
    return TRUE;
 80025bc:	2301      	movs	r3, #1
}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <regUpdate>:
/**
 * Update register value
 * @param context
 * @param name - register name
 */
static void regUpdate(scpi_t * context, scpi_reg_name_t name) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name));
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f859 	bl	8002690 <SCPI_RegGet>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f88c 	bl	8002704 <SCPI_RegSet>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <regUpdateEvent>:
 * in the condition register
 * @param context
 * @param condReg - condition register name
 * @param eventReg - event register name
 */
static void regUpdateEvent(scpi_t * context, scpi_reg_val_t oldCondVal, scpi_reg_val_t newCondVal, scpi_reg_name_t eventReg) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	4608      	mov	r0, r1
 80025fe:	4611      	mov	r1, r2
 8002600:	461a      	mov	r2, r3
 8002602:	4603      	mov	r3, r0
 8002604:	817b      	strh	r3, [r7, #10]
 8002606:	460b      	mov	r3, r1
 8002608:	813b      	strh	r3, [r7, #8]
 800260a:	4613      	mov	r3, r2
 800260c:	71fb      	strb	r3, [r7, #7]
    SCPI_RegSet(context, eventReg, ((oldCondVal ^ newCondVal) & newCondVal) | SCPI_RegGet(context, eventReg));
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	43db      	mvns	r3, r3
 8002612:	b29a      	uxth	r2, r3
 8002614:	893b      	ldrh	r3, [r7, #8]
 8002616:	4013      	ands	r3, r2
 8002618:	b29c      	uxth	r4, r3
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	4619      	mov	r1, r3
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f836 	bl	8002690 <SCPI_RegGet>
 8002624:	4603      	mov	r3, r0
 8002626:	4323      	orrs	r3, r4
 8002628:	b29a      	uxth	r2, r3
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f868 	bl	8002704 <SCPI_RegSet>
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}

0800263c <regUpdateSTB>:
 * @param context
 * @param val value of register
 * @param mask name of mask register (enable register)
 * @param stbBits bits to clear or set in STB
 */
static void regUpdateSTB(scpi_t * context, scpi_reg_val_t val, scpi_reg_name_t mask, scpi_reg_val_t stbBits) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	4608      	mov	r0, r1
 8002646:	4611      	mov	r1, r2
 8002648:	461a      	mov	r2, r3
 800264a:	4603      	mov	r3, r0
 800264c:	817b      	strh	r3, [r7, #10]
 800264e:	460b      	mov	r3, r1
 8002650:	727b      	strb	r3, [r7, #9]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
    if (val & SCPI_RegGet(context, mask)) {
 8002656:	7a7b      	ldrb	r3, [r7, #9]
 8002658:	4619      	mov	r1, r3
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f818 	bl	8002690 <SCPI_RegGet>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	897b      	ldrh	r3, [r7, #10]
 8002666:	4013      	ands	r3, r2
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <regUpdateSTB+0x40>
        SCPI_RegSetBits(context, SCPI_REG_STB, stbBits);
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	461a      	mov	r2, r3
 8002672:	2100      	movs	r1, #0
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f8ef 	bl	8002858 <SCPI_RegSetBits>
    } else {
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
    }
}
 800267a:	e005      	b.n	8002688 <regUpdateSTB+0x4c>
        SCPI_RegClearBits(context, SCPI_REG_STB, stbBits);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	461a      	mov	r2, r3
 8002680:	2100      	movs	r1, #0
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f903 	bl	800288e <SCPI_RegClearBits>
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <SCPI_RegGet>:
/**
 * Get register value
 * @param name - register name
 * @return register value
 */
scpi_reg_val_t SCPI_RegGet(scpi_t * context, scpi_reg_name_t name) {
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
    if ((name < SCPI_REG_COUNT) && context) {
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	2b09      	cmp	r3, #9
 80026a0:	d808      	bhi.n	80026b4 <SCPI_RegGet+0x24>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <SCPI_RegGet+0x24>
        return context->registers[name];
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3224      	adds	r2, #36	; 0x24
 80026ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80026b2:	e000      	b.n	80026b6 <SCPI_RegGet+0x26>
    } else {
        return 0;
 80026b4:	2300      	movs	r3, #0
    }
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <writeControl>:
 * Wrapper function to control interface from context
 * @param context
 * @param ctrl number of controll message
 * @param value value of related register
 */
static size_t writeControl(scpi_t * context, scpi_ctrl_name_t ctrl, scpi_reg_val_t val) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
 80026cc:	4613      	mov	r3, r2
 80026ce:	803b      	strh	r3, [r7, #0]
    if (context && context->interface && context->interface->control) {
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d011      	beq.n	80026fa <writeControl+0x3a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <writeControl+0x3a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <writeControl+0x3a>
        return context->interface->control(context, ctrl, val);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	883a      	ldrh	r2, [r7, #0]
 80026f0:	78f9      	ldrb	r1, [r7, #3]
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	e000      	b.n	80026fc <writeControl+0x3c>
    } else {
        return 0;
 80026fa:	2300      	movs	r3, #0
    }
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <SCPI_RegSet>:
/**
 * Set register value
 * @param name - register name
 * @param val - new value
 */
void SCPI_RegSet(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t val) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
 8002710:	4613      	mov	r3, r2
 8002712:	803b      	strh	r3, [r7, #0]
    scpi_bool_t srq = FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]
    scpi_reg_val_t mask;
    scpi_reg_val_t old_val;

    if ((name >= SCPI_REG_COUNT) || (context == NULL)) {
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	2b09      	cmp	r3, #9
 800271c:	f200 8098 	bhi.w	8002850 <SCPI_RegSet+0x14c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8094 	beq.w	8002850 <SCPI_RegSet+0x14c>
        return;
    }

    /* store old register value */
    old_val = context->registers[name];
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3224      	adds	r2, #36	; 0x24
 800272e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002732:	81bb      	strh	r3, [r7, #12]

    /* set register value */
    context->registers[name] = val;
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3224      	adds	r2, #36	; 0x24
 800273a:	8839      	ldrh	r1, [r7, #0]
 800273c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /** @TODO: remove recutsion */
    switch (name) {
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	2b0a      	cmp	r3, #10
 8002744:	d870      	bhi.n	8002828 <SCPI_RegSet+0x124>
 8002746:	a201      	add	r2, pc, #4	; (adr r2, 800274c <SCPI_RegSet+0x48>)
 8002748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274c:	08002779 	.word	0x08002779
 8002750:	080027b9 	.word	0x080027b9
 8002754:	080027c3 	.word	0x080027c3
 8002758:	080027d1 	.word	0x080027d1
 800275c:	08002801 	.word	0x08002801
 8002760:	0800280f 	.word	0x0800280f
 8002764:	08002819 	.word	0x08002819
 8002768:	080027db 	.word	0x080027db
 800276c:	080027e9 	.word	0x080027e9
 8002770:	080027f3 	.word	0x080027f3
 8002774:	08002829 	.word	0x08002829
        case SCPI_REG_STB:
            mask = SCPI_RegGet(context, SCPI_REG_SRE);
 8002778:	2101      	movs	r1, #1
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ff88 	bl	8002690 <SCPI_RegGet>
 8002780:	4603      	mov	r3, r0
 8002782:	817b      	strh	r3, [r7, #10]
            mask &= ~STB_SRQ;
 8002784:	897b      	ldrh	r3, [r7, #10]
 8002786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800278a:	817b      	strh	r3, [r7, #10]
            if (val & mask) {
 800278c:	883a      	ldrh	r2, [r7, #0]
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	4013      	ands	r3, r2
 8002792:	b29b      	uxth	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <SCPI_RegSet+0xaa>
                val |= STB_SRQ;
 8002798:	883b      	ldrh	r3, [r7, #0]
 800279a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279e:	803b      	strh	r3, [r7, #0]
                /* avoid sending SRQ if nothing has changed */
                if (old_val != val) {
 80027a0:	89ba      	ldrh	r2, [r7, #12]
 80027a2:	883b      	ldrh	r3, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d03e      	beq.n	8002826 <SCPI_RegSet+0x122>
                    srq = TRUE;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
                }
            } else {
                val &= ~STB_SRQ;
            }
            break;
 80027ac:	e03b      	b.n	8002826 <SCPI_RegSet+0x122>
                val &= ~STB_SRQ;
 80027ae:	883b      	ldrh	r3, [r7, #0]
 80027b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027b4:	803b      	strh	r3, [r7, #0]
            break;
 80027b6:	e036      	b.n	8002826 <SCPI_RegSet+0x122>
        case SCPI_REG_SRE:
            regUpdate(context, SCPI_REG_STB);
 80027b8:	2100      	movs	r1, #0
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ff04 	bl	80025c8 <regUpdate>
            break;
 80027c0:	e032      	b.n	8002828 <SCPI_RegSet+0x124>
        case SCPI_REG_ESR:
            regUpdateSTB(context, val, SCPI_REG_ESE, STB_ESR);
 80027c2:	8839      	ldrh	r1, [r7, #0]
 80027c4:	2320      	movs	r3, #32
 80027c6:	2203      	movs	r2, #3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff ff37 	bl	800263c <regUpdateSTB>
            break;
 80027ce:	e02b      	b.n	8002828 <SCPI_RegSet+0x124>
        case SCPI_REG_ESE:
            regUpdate(context, SCPI_REG_ESR);
 80027d0:	2102      	movs	r1, #2
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fef8 	bl	80025c8 <regUpdate>
            break;
 80027d8:	e026      	b.n	8002828 <SCPI_RegSet+0x124>
        case SCPI_REG_QUES:
            regUpdateSTB(context, val, SCPI_REG_QUESE, STB_QES);
 80027da:	8839      	ldrh	r1, [r7, #0]
 80027dc:	2308      	movs	r3, #8
 80027de:	2208      	movs	r2, #8
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff2b 	bl	800263c <regUpdateSTB>
            break;
 80027e6:	e01f      	b.n	8002828 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESE:
            regUpdate(context, SCPI_REG_QUES);
 80027e8:	2107      	movs	r1, #7
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff feec 	bl	80025c8 <regUpdate>
            break;
 80027f0:	e01a      	b.n	8002828 <SCPI_RegSet+0x124>
        case SCPI_REG_QUESC:
            regUpdateEvent(context, old_val, val, SCPI_REG_QUES);
 80027f2:	883a      	ldrh	r2, [r7, #0]
 80027f4:	89b9      	ldrh	r1, [r7, #12]
 80027f6:	2307      	movs	r3, #7
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff fefb 	bl	80025f4 <regUpdateEvent>
            break;
 80027fe:	e013      	b.n	8002828 <SCPI_RegSet+0x124>
        case SCPI_REG_OPER:
            regUpdateSTB(context, val, SCPI_REG_OPERE, STB_OPS);
 8002800:	8839      	ldrh	r1, [r7, #0]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	2205      	movs	r2, #5
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff18 	bl	800263c <regUpdateSTB>
            break;
 800280c:	e00c      	b.n	8002828 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERE:
            regUpdate(context, SCPI_REG_OPER);
 800280e:	2104      	movs	r1, #4
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fed9 	bl	80025c8 <regUpdate>
            break;
 8002816:	e007      	b.n	8002828 <SCPI_RegSet+0x124>
        case SCPI_REG_OPERC:
            regUpdateEvent(context, old_val, val, SCPI_REG_OPER);
 8002818:	883a      	ldrh	r2, [r7, #0]
 800281a:	89b9      	ldrh	r1, [r7, #12]
 800281c:	2304      	movs	r3, #4
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fee8 	bl	80025f4 <regUpdateEvent>
            break;
 8002824:	e000      	b.n	8002828 <SCPI_RegSet+0x124>
            break;
 8002826:	bf00      	nop
            /* nothing to do */
            break;
    }

    /* set updated register value */
    context->registers[name] = val;
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3224      	adds	r2, #36	; 0x24
 800282e:	8839      	ldrh	r1, [r7, #0]
 8002830:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    if (srq) {
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <SCPI_RegSet+0x14e>
        writeControl(context, SCPI_CTRL_SRQ, SCPI_RegGet(context, SCPI_REG_STB));
 800283a:	2100      	movs	r1, #0
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff27 	bl	8002690 <SCPI_RegGet>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	2101      	movs	r1, #1
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff39 	bl	80026c0 <writeControl>
 800284e:	e000      	b.n	8002852 <SCPI_RegSet+0x14e>
        return;
 8002850:	bf00      	nop
    }
}
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <SCPI_RegSetBits>:
/**
 * Set register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegSetBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
 8002864:	4613      	mov	r3, r2
 8002866:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) | bits);
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	4619      	mov	r1, r3
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff0f 	bl	8002690 <SCPI_RegGet>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	883b      	ldrh	r3, [r7, #0]
 8002878:	4313      	orrs	r3, r2
 800287a:	b29a      	uxth	r2, r3
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	4619      	mov	r1, r3
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ff3f 	bl	8002704 <SCPI_RegSet>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <SCPI_RegClearBits>:
/**
 * Clear register bits
 * @param name - register name
 * @param bits bit mask
 */
void SCPI_RegClearBits(scpi_t * context, scpi_reg_name_t name, scpi_reg_val_t bits) {
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
 800289a:	4613      	mov	r3, r2
 800289c:	803b      	strh	r3, [r7, #0]
    SCPI_RegSet(context, name, SCPI_RegGet(context, name) & ~bits);
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	4619      	mov	r1, r3
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fef4 	bl	8002690 <SCPI_RegGet>
 80028a8:	4603      	mov	r3, r0
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	4013      	ands	r3, r2
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	4619      	mov	r1, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff20 	bl	8002704 <SCPI_RegSet>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <SCPI_EventClear>:

/**
 * Clear event register
 * @param context
 */
void SCPI_EventClear(scpi_t * context) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    /* TODO */
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2102      	movs	r1, #2
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff13 	bl	8002704 <SCPI_RegSet>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <SCPI_CoreCls>:
 * *CLS - This command clears all status data structures in a device. 
 *        For a device which minimally complies with SCPI. (SCPI std 4.1.3.2)
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreCls(scpi_t * context) {
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
    SCPI_EventClear(context);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffec 	bl	80028cc <SCPI_EventClear>
    SCPI_ErrorClear(context);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fbcb 	bl	8002090 <SCPI_ErrorClear>
    SCPI_RegSet(context, SCPI_REG_OPER, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2104      	movs	r1, #4
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ff00 	bl	8002704 <SCPI_RegSet>
    SCPI_RegSet(context, SCPI_REG_QUES, 0);
 8002904:	2200      	movs	r2, #0
 8002906:	2107      	movs	r1, #7
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fefb 	bl	8002704 <SCPI_RegSet>
    return SCPI_RES_OK;
 800290e:	2301      	movs	r3, #1
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <SCPI_CoreEse>:
/**
 * *ESE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEse(scpi_t * context) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
    int32_t new_ESE;
    if (SCPI_ParamInt32(context, &new_ESE, TRUE)) {
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2201      	movs	r2, #1
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 ff45 	bl	80047b8 <SCPI_ParamInt32>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <SCPI_CoreEse+0x2e>
        SCPI_RegSet(context, SCPI_REG_ESE, (scpi_reg_val_t) new_ESE);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	2103      	movs	r1, #3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fee1 	bl	8002704 <SCPI_RegSet>
        return SCPI_RES_OK;
 8002942:	2301      	movs	r3, #1
 8002944:	e001      	b.n	800294a <SCPI_CoreEse+0x32>
    }
    return SCPI_RES_ERR;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <SCPI_CoreEseQ>:
/**
 * *ESE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEseQ(scpi_t * context) {
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESE));
 800295a:	2103      	movs	r1, #3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff fe97 	bl	8002690 <SCPI_RegGet>
 8002962:	4603      	mov	r3, r0
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f001 fc7b 	bl	8004262 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 800296c:	2301      	movs	r3, #1
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <SCPI_CoreEsrQ>:
/**
 * *ESR?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreEsrQ(scpi_t * context) {
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_ESR));
 800297e:	2102      	movs	r1, #2
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fe85 	bl	8002690 <SCPI_RegGet>
 8002986:	4603      	mov	r3, r0
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f001 fc69 	bl	8004262 <SCPI_ResultInt32>
    SCPI_RegSet(context, SCPI_REG_ESR, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	2102      	movs	r1, #2
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff feb5 	bl	8002704 <SCPI_RegSet>
    return SCPI_RES_OK;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <SCPI_CoreIdnQ>:
 * 
 * example: MANUFACTURE,MODEL,0,01-02-01
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreIdnQ(scpi_t * context) {
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
    int i;
    for (i = 0; i < 4; i++) {
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e025      	b.n	80029fe <SCPI_CoreIdnQ+0x5a>
        if (context->idn[i]) {
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3320      	adds	r3, #32
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d015      	beq.n	80029ee <SCPI_CoreIdnQ+0x4a>
            SCPI_ResultMnemonic(context, context->idn[i]);
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3320      	adds	r3, #32
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	685c      	ldr	r4, [r3, #4]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	3320      	adds	r3, #32
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fbb6 	bl	800014c <strlen>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4621      	mov	r1, r4
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f001 fbb1 	bl	800414e <SCPI_ResultCharacters>
 80029ec:	e004      	b.n	80029f8 <SCPI_CoreIdnQ+0x54>
        } else {
            SCPI_ResultMnemonic(context, "0");
 80029ee:	2201      	movs	r2, #1
 80029f0:	4907      	ldr	r1, [pc, #28]	; (8002a10 <SCPI_CoreIdnQ+0x6c>)
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f001 fbab 	bl	800414e <SCPI_ResultCharacters>
    for (i = 0; i < 4; i++) {
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3301      	adds	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	ddd6      	ble.n	80029b2 <SCPI_CoreIdnQ+0xe>
        }
    }
    return SCPI_RES_OK;
 8002a04:	2301      	movs	r3, #1
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	080068e8 	.word	0x080068e8

08002a14 <SCPI_CoreOpc>:
/**
 * *OPC
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpc(scpi_t * context) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    SCPI_RegSetBits(context, SCPI_REG_ESR, ESR_OPC);
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	2102      	movs	r1, #2
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff19 	bl	8002858 <SCPI_RegSetBits>
    return SCPI_RES_OK;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <SCPI_CoreOpcQ>:
/**
 * *OPC?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreOpcQ(scpi_t * context) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    /* Operation is always completed */
    SCPI_ResultInt32(context, 1);
 8002a38:	2101      	movs	r1, #1
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f001 fc11 	bl	8004262 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <SCPI_CoreRst>:
/**
 * *RST
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreRst(scpi_t * context) {
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->reset) {
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00f      	beq.n	8002a78 <SCPI_CoreRst+0x2e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <SCPI_CoreRst+0x2e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d006      	beq.n	8002a78 <SCPI_CoreRst+0x2e>
        return context->interface->reset(context);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
 8002a74:	4603      	mov	r3, r0
 8002a76:	e000      	b.n	8002a7a <SCPI_CoreRst+0x30>
    }
    return SCPI_RES_OK;
 8002a78:	2301      	movs	r3, #1
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <SCPI_CoreSre>:
/**
 * *SRE
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSre(scpi_t * context) {
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
    int32_t new_SRE;
    if (SCPI_ParamInt32(context, &new_SRE, TRUE)) {
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f001 fe90 	bl	80047b8 <SCPI_ParamInt32>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <SCPI_CoreSre+0x2e>
        SCPI_RegSet(context, SCPI_REG_SRE, (scpi_reg_val_t) new_SRE);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fe2c 	bl	8002704 <SCPI_RegSet>
        return SCPI_RES_OK;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e001      	b.n	8002ab4 <SCPI_CoreSre+0x32>
    }
    return SCPI_RES_ERR;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <SCPI_CoreSreQ>:
/**
 * *SRE?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreSreQ(scpi_t * context) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_SRE));
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fde2 	bl	8002690 <SCPI_RegGet>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f001 fbc6 	bl	8004262 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <SCPI_CoreStbQ>:
/**
 * *STB?
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreStbQ(scpi_t * context) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_RegGet(context, SCPI_REG_STB));
 8002ae8:	2100      	movs	r1, #0
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fdd0 	bl	8002690 <SCPI_RegGet>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f001 fbb4 	bl	8004262 <SCPI_ResultInt32>
    return SCPI_RES_OK;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <SCPI_CoreWai>:
/**
 * *WAI
 * @param context
 * @return 
 */
scpi_result_t SCPI_CoreWai(scpi_t * context) {
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
    (void) context;
    /* NOP */
    return SCPI_RES_OK;
 8002b0c:	2301      	movs	r3, #1
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <isws>:
/**
 * Is white space
 * @param c
 * @return 
 */
static int isws(int c) {
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
    if ((c == ' ') || (c == '\t')) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d002      	beq.n	8002b2c <isws+0x14>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	d101      	bne.n	8002b30 <isws+0x18>
        return 1;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <isws+0x1a>
    }
    return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <isbdigit>:
/**
 * Is binary digit
 * @param c
 * @return 
 */
static int isbdigit(int c) {
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1')) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b30      	cmp	r3, #48	; 0x30
 8002b48:	d002      	beq.n	8002b50 <isbdigit+0x14>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b31      	cmp	r3, #49	; 0x31
 8002b4e:	d101      	bne.n	8002b54 <isbdigit+0x18>
        return 1;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <isbdigit+0x1a>
    }
    return 0;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <isqdigit>:
/**
 * Is hexadecimal digit
 * @param c
 * @return 
 */
static int isqdigit(int c) {
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    if ((c == '0') || (c == '1') || (c == '2') || (c == '3') || (c == '4') || (c == '5') || (c == '6') || (c == '7')) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b30      	cmp	r3, #48	; 0x30
 8002b6c:	d014      	beq.n	8002b98 <isqdigit+0x38>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b31      	cmp	r3, #49	; 0x31
 8002b72:	d011      	beq.n	8002b98 <isqdigit+0x38>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b32      	cmp	r3, #50	; 0x32
 8002b78:	d00e      	beq.n	8002b98 <isqdigit+0x38>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b33      	cmp	r3, #51	; 0x33
 8002b7e:	d00b      	beq.n	8002b98 <isqdigit+0x38>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b34      	cmp	r3, #52	; 0x34
 8002b84:	d008      	beq.n	8002b98 <isqdigit+0x38>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b35      	cmp	r3, #53	; 0x35
 8002b8a:	d005      	beq.n	8002b98 <isqdigit+0x38>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b36      	cmp	r3, #54	; 0x36
 8002b90:	d002      	beq.n	8002b98 <isqdigit+0x38>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b37      	cmp	r3, #55	; 0x37
 8002b96:	d101      	bne.n	8002b9c <isqdigit+0x3c>
        return 1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <isqdigit+0x3e>
    }
    return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <iseos>:
/**
 * Is end of string
 * @param state
 * @return 
 */
static int iseos(lex_state_t * state) {
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
    if ((state->buffer + state->len) <= (state->pos)) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6892      	ldr	r2, [r2, #8]
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d801      	bhi.n	8002bc6 <iseos+0x1e>
        return 1;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <iseos+0x20>
    } else {
        return 0;
 8002bc6:	2300      	movs	r3, #0
    }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <scpiLex_IsEos>:
/**
 * Private export of iseos
 * @param state
 * @return 
 */
int scpiLex_IsEos(lex_state_t * state) {
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
    return iseos(state);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ffe4 	bl	8002ba8 <iseos>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <ischr>:
 * Test current character
 * @param state
 * @param chr
 * @return 
 */
static int ischr(lex_state_t * state, char chr) {
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	70fb      	strb	r3, [r7, #3]
    return (state->pos[0] == chr);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <isplusmn>:
/**
 * Is plus or minus
 * @param c
 * @return 
 */
static int isplusmn(int c) {
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
    return c == '+' || c == '-';
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b2b      	cmp	r3, #43	; 0x2b
 8002c1e:	d002      	beq.n	8002c26 <isplusmn+0x14>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b2d      	cmp	r3, #45	; 0x2d
 8002c24:	d101      	bne.n	8002c2a <isplusmn+0x18>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <isplusmn+0x1a>
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr

08002c36 <isH>:
/**
 * Is letter H
 * @param c
 * @return 
 */
static int isH(int c) {
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
    return c == 'h' || c == 'H';
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b68      	cmp	r3, #104	; 0x68
 8002c42:	d002      	beq.n	8002c4a <isH+0x14>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b48      	cmp	r3, #72	; 0x48
 8002c48:	d101      	bne.n	8002c4e <isH+0x18>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <isH+0x1a>
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <isB>:
/**
 * Is letter B
 * @param c
 * @return 
 */
static int isB(int c) {
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
    return c == 'b' || c == 'B';
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b62      	cmp	r3, #98	; 0x62
 8002c66:	d002      	beq.n	8002c6e <isB+0x14>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b42      	cmp	r3, #66	; 0x42
 8002c6c:	d101      	bne.n	8002c72 <isB+0x18>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <isB+0x1a>
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <isQ>:
/**
 * Is letter Q
 * @param c
 * @return 
 */
static int isQ(int c) {
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
    return c == 'q' || c == 'Q';
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b71      	cmp	r3, #113	; 0x71
 8002c8a:	d002      	beq.n	8002c92 <isQ+0x14>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b51      	cmp	r3, #81	; 0x51
 8002c90:	d101      	bne.n	8002c96 <isQ+0x18>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <isQ+0x1a>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr

08002ca2 <isE>:
/**
 * Is letter E
 * @param c
 * @return 
 */
static int isE(int c) {
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
    return c == 'e' || c == 'E';
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b65      	cmp	r3, #101	; 0x65
 8002cae:	d002      	beq.n	8002cb6 <isE+0x14>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b45      	cmp	r3, #69	; 0x45
 8002cb4:	d101      	bne.n	8002cba <isE+0x18>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <isE+0x1a>
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <skipWs>:
/**
 * Skip all whitespaces
 * @param state
 * @return 
 */
static int skipWs(lex_state_t * state) {
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
    int someSpace = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 8002cd2:	e007      	b.n	8002ce4 <skipWs+0x1e>
        state->pos++;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	605a      	str	r2, [r3, #4]
        someSpace++;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isws(state->pos[0])) {
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff ff5f 	bl	8002ba8 <iseos>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d108      	bne.n	8002d02 <skipWs+0x3c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff0e 	bl	8002b18 <isws>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e8      	bne.n	8002cd4 <skipWs+0xe>
    }

    return someSpace;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <skipDigit>:
/**
 * Skip decimal digit
 * @param state
 * @return 
 */
static int skipDigit(lex_state_t * state) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff ff47 	bl	8002ba8 <iseos>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d113      	bne.n	8002d48 <skipDigit+0x3c>
 8002d20:	f002 fbba 	bl	8005498 <__locale_ctype_ptr>
 8002d24:	4602      	mov	r2, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <skipDigit+0x3c>
        state->pos++;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <skipDigit+0x3e>
    } else {
        return SKIP_NONE;
 8002d48:	2300      	movs	r3, #0
    }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <skipNumbers>:
/**
 * Skip multiple decimal digits
 * @param state
 * @return 
 */
static int skipNumbers(lex_state_t * state) {
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8002d5e:	e007      	b.n	8002d70 <skipNumbers+0x1e>
        state->pos++;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff19 	bl	8002ba8 <iseos>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10c      	bne.n	8002d96 <skipNumbers+0x44>
 8002d7c:	f002 fb8c 	bl	8005498 <__locale_ctype_ptr>
 8002d80:	4602      	mov	r2, r0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e4      	bne.n	8002d60 <skipNumbers+0xe>
    }
    return someNumbers;
 8002d96:	68fb      	ldr	r3, [r7, #12]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <skipPlusmn>:
/**
 * Skip plus or minus
 * @param state
 * @return 
 */
static int skipPlusmn(lex_state_t * state) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && isplusmn(state->pos[0])) {
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fefd 	bl	8002ba8 <iseos>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10f      	bne.n	8002dd4 <skipPlusmn+0x34>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff29 	bl	8002c12 <isplusmn>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <skipPlusmn+0x34>
        state->pos++;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <skipPlusmn+0x36>
    } else {
        return SKIP_NONE;
 8002dd4:	2300      	movs	r3, #0
    }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <skipAlpha>:
/**
 * Skip any character from 'a'-'Z'
 * @param state
 * @return 
 */
static int skipAlpha(lex_state_t * state) {
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
    int someLetters = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8002dea:	e007      	b.n	8002dfc <skipAlpha+0x1e>
        state->pos++;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	605a      	str	r2, [r3, #4]
        someLetters++;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff fed3 	bl	8002ba8 <iseos>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10c      	bne.n	8002e22 <skipAlpha+0x44>
 8002e08:	f002 fb46 	bl	8005498 <__locale_ctype_ptr>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	3301      	adds	r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e4      	bne.n	8002dec <skipAlpha+0xe>
    }
    return someLetters;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <skipChr>:
 * Skip exact character chr or nothing
 * @param state
 * @param chr
 * @return 
 */
static int skipChr(lex_state_t * state, char chr) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
    if (!iseos(state) && ischr(state, chr)) {
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff feb5 	bl	8002ba8 <iseos>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10e      	bne.n	8002e62 <skipChr+0x36>
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	4619      	mov	r1, r3
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f7ff fece 	bl	8002bea <ischr>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <skipChr+0x36>
        state->pos++;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <skipChr+0x38>
    } else {
        return SKIP_NONE;
 8002e62:	2300      	movs	r3, #0
    }
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <skipSlashDot>:
/**
 * Skip slash or dot
 * @param state
 * @return 
 */
static int skipSlashDot(lex_state_t * state) {
 8002e6c:	b590      	push	{r4, r7, lr}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && (ischr(state, '/') | ischr(state, '.'))) {
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff fe97 	bl	8002ba8 <iseos>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d113      	bne.n	8002ea8 <skipSlashDot+0x3c>
 8002e80:	212f      	movs	r1, #47	; 0x2f
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff feb1 	bl	8002bea <ischr>
 8002e88:	4604      	mov	r4, r0
 8002e8a:	212e      	movs	r1, #46	; 0x2e
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff feac 	bl	8002bea <ischr>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4323      	orrs	r3, r4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d006      	beq.n	8002ea8 <skipSlashDot+0x3c>
        state->pos++;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <skipSlashDot+0x3e>
    } else {
        return SKIP_NONE;
 8002ea8:	2300      	movs	r3, #0
    }
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <skipStar>:
/**
 * Skip star
 * @param state
 * @return 
 */
static int skipStar(lex_state_t * state) {
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, '*')) {
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff fe74 	bl	8002ba8 <iseos>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10d      	bne.n	8002ee2 <skipStar+0x30>
 8002ec6:	212a      	movs	r1, #42	; 0x2a
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fe8e 	bl	8002bea <ischr>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d006      	beq.n	8002ee2 <skipStar+0x30>
        state->pos++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <skipStar+0x32>
    } else {
        return SKIP_NONE;
 8002ee2:	2300      	movs	r3, #0
    }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <skipColon>:
/**
 * Skip colon
 * @param state
 * @return 
 */
static int skipColon(lex_state_t * state) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
    if (!iseos(state) && ischr(state, ':')) {
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff fe57 	bl	8002ba8 <iseos>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <skipColon+0x30>
 8002f00:	213a      	movs	r1, #58	; 0x3a
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff fe71 	bl	8002bea <ischr>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d006      	beq.n	8002f1c <skipColon+0x30>
        state->pos++;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	605a      	str	r2, [r3, #4]
        return SKIP_OK;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <skipColon+0x32>
    } else {
        return SKIP_NONE;
 8002f1c:	2300      	movs	r3, #0
    }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <skipProgramMnemonic>:
/**
 * Skip program mnemonic [a-z][a-z0-9_]*
 * @param state
 * @return 
 */
static int skipProgramMnemonic(lex_state_t * state) {
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
    const char * startPos = state->pos;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	60fb      	str	r3, [r7, #12]
    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fe37 	bl	8002ba8 <iseos>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d131      	bne.n	8002fa4 <skipProgramMnemonic+0x7e>
 8002f40:	f002 faaa 	bl	8005498 <__locale_ctype_ptr>
 8002f44:	4602      	mov	r2, r0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d024      	beq.n	8002fa4 <skipProgramMnemonic+0x7e>
        state->pos++;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8002f64:	e004      	b.n	8002f70 <skipProgramMnemonic+0x4a>
            state->pos++;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff fe19 	bl	8002ba8 <iseos>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d113      	bne.n	8002fa4 <skipProgramMnemonic+0x7e>
 8002f7c:	f002 fa8c 	bl	8005498 <__locale_ctype_ptr>
 8002f80:	4602      	mov	r2, r0
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e7      	bne.n	8002f66 <skipProgramMnemonic+0x40>
 8002f96:	215f      	movs	r1, #95	; 0x5f
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fe26 	bl	8002bea <ischr>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e0      	bne.n	8002f66 <skipProgramMnemonic+0x40>
        }
    }

    if (iseos(state)) {
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fdff 	bl	8002ba8 <iseos>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d004      	beq.n	8002fba <skipProgramMnemonic+0x94>
        return (state->pos - startPos) * SKIP_INCOMPLETE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6852      	ldr	r2, [r2, #4]
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	e004      	b.n	8002fc4 <skipProgramMnemonic+0x9e>
    } else {
        return (state->pos - startPos) * SKIP_OK;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1ad3      	subs	r3, r2, r3
    }
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <scpiLex_WhiteSpace>:
 * Detect token white space
 * @param state
 * @param token
 * @return 
 */
int scpiLex_WhiteSpace(lex_state_t * state, scpi_token_t * token) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	605a      	str	r2, [r3, #4]

    skipWs(state);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fe71 	bl	8002cc6 <skipWs>

    token->len = state->pos - token->ptr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	1ad2      	subs	r2, r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	609a      	str	r2, [r3, #8]

    if (token->len > 0) {
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	dd03      	ble.n	8003004 <scpiLex_WhiteSpace+0x38>
        token->type = SCPI_TOKEN_WS;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2217      	movs	r2, #23
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	e002      	b.n	800300a <scpiLex_WhiteSpace+0x3e>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	221a      	movs	r2, #26
 8003008:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <skipCommonProgramHeader>:
/**
 * Skip command program header \*<PROGRAM MNEMONIC>
 * @param state
 * @return 
 */
static int skipCommonProgramHeader(lex_state_t * state) {
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
    int res;
    if (skipStar(state)) {
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ff47 	bl	8002eb2 <skipStar>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01c      	beq.n	8003064 <skipCommonProgramHeader+0x4e>
        res = skipProgramMnemonic(state);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ff7b 	bl	8002f26 <skipProgramMnemonic>
 8003030:	60f8      	str	r0, [r7, #12]
        if (res == SKIP_NONE && iseos(state)) {
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d108      	bne.n	800304a <skipCommonProgramHeader+0x34>
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fdb5 	bl	8002ba8 <iseos>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <skipCommonProgramHeader+0x34>
            return SKIP_INCOMPLETE;
 8003044:	f04f 33ff 	mov.w	r3, #4294967295
 8003048:	e00d      	b.n	8003066 <skipCommonProgramHeader+0x50>
        } else if (res <= SKIP_INCOMPLETE) {
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	da01      	bge.n	8003054 <skipCommonProgramHeader+0x3e>
            return SKIP_OK;
 8003050:	2301      	movs	r3, #1
 8003052:	e008      	b.n	8003066 <skipCommonProgramHeader+0x50>
        } else if (res >= SKIP_OK) {
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	dd01      	ble.n	800305e <skipCommonProgramHeader+0x48>
            return SKIP_OK;
 800305a:	2301      	movs	r3, #1
 800305c:	e003      	b.n	8003066 <skipCommonProgramHeader+0x50>
        } else {
            return SKIP_INCOMPLETE;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e000      	b.n	8003066 <skipCommonProgramHeader+0x50>
        }
    }
    return SKIP_NONE;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <skipCompoundProgramHeader>:
/**
 * Skip compound program header :<PROGRAM MNEMONIC>:<PROGRAM MNEMONIC>...
 * @param state
 * @return 
 */
static int skipCompoundProgramHeader(lex_state_t * state) {
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
    int res;
    int firstColon = skipColon(state);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff ff38 	bl	8002eec <skipColon>
 800307c:	60f8      	str	r0, [r7, #12]

    res = skipProgramMnemonic(state);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ff51 	bl	8002f26 <skipProgramMnemonic>
 8003084:	60b8      	str	r0, [r7, #8]
    if (res >= SKIP_OK) {
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	dd17      	ble.n	80030bc <skipCompoundProgramHeader+0x4e>
        while (skipColon(state)) {
 800308c:	e00e      	b.n	80030ac <skipCompoundProgramHeader+0x3e>
            res = skipProgramMnemonic(state);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ff49 	bl	8002f26 <skipProgramMnemonic>
 8003094:	60b8      	str	r0, [r7, #8]
            if (res <= SKIP_INCOMPLETE) {
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	da01      	bge.n	80030a0 <skipCompoundProgramHeader+0x32>
                return SKIP_OK;
 800309c:	2301      	movs	r3, #1
 800309e:	e019      	b.n	80030d4 <skipCompoundProgramHeader+0x66>
            } else if (res == SKIP_NONE) {
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <skipCompoundProgramHeader+0x3e>
                return SKIP_INCOMPLETE;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	e013      	b.n	80030d4 <skipCompoundProgramHeader+0x66>
        while (skipColon(state)) {
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ff1d 	bl	8002eec <skipColon>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ea      	bne.n	800308e <skipCompoundProgramHeader+0x20>
            }
        }
        return SKIP_OK;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e00b      	b.n	80030d4 <skipCompoundProgramHeader+0x66>
    } else if (res <= SKIP_INCOMPLETE) {
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da01      	bge.n	80030c6 <skipCompoundProgramHeader+0x58>
        return SKIP_OK;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e006      	b.n	80030d4 <skipCompoundProgramHeader+0x66>
    } else if (firstColon) {
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <skipCompoundProgramHeader+0x64>
        return SKIP_INCOMPLETE;
 80030cc:	f04f 33ff 	mov.w	r3, #4294967295
 80030d0:	e000      	b.n	80030d4 <skipCompoundProgramHeader+0x66>
    } else {
        return SKIP_NONE;
 80030d2:	2300      	movs	r3, #0
    }
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <scpiLex_ProgramHeader>:
 * Detect token command or compound program header
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramHeader(lex_state_t * state, scpi_token_t * token) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
    int res;
    token->ptr = state->pos;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	221a      	movs	r2, #26
 80030f2:	701a      	strb	r2, [r3, #0]

    res = skipCommonProgramHeader(state);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff8e 	bl	8003016 <skipCommonProgramHeader>
 80030fa:	60f8      	str	r0, [r7, #12]
    if (res >= SKIP_OK) {
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	dd0e      	ble.n	8003120 <scpiLex_ProgramHeader+0x44>
        if (skipChr(state, '?') >= SKIP_OK) {
 8003102:	213f      	movs	r1, #63	; 0x3f
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fe91 	bl	8002e2c <skipChr>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	dd03      	ble.n	8003118 <scpiLex_ProgramHeader+0x3c>
            token->type = SCPI_TOKEN_COMMON_QUERY_PROGRAM_HEADER;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2216      	movs	r2, #22
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e029      	b.n	800316c <scpiLex_ProgramHeader+0x90>
        } else {
            token->type = SCPI_TOKEN_COMMON_PROGRAM_HEADER;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2213      	movs	r2, #19
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e025      	b.n	800316c <scpiLex_ProgramHeader+0x90>
        }
    } else if (res <= SKIP_INCOMPLETE) {
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da03      	bge.n	800312e <scpiLex_ProgramHeader+0x52>
        token->type = SCPI_TOKEN_INCOMPLETE_COMMON_PROGRAM_HEADER;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2214      	movs	r2, #20
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e01e      	b.n	800316c <scpiLex_ProgramHeader+0x90>
    } else if (res == SKIP_NONE) {
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d11b      	bne.n	800316c <scpiLex_ProgramHeader+0x90>
        res = skipCompoundProgramHeader(state);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff9a 	bl	800306e <skipCompoundProgramHeader>
 800313a:	60f8      	str	r0, [r7, #12]

        if (res >= SKIP_OK) {
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	dd0e      	ble.n	8003160 <scpiLex_ProgramHeader+0x84>
            if (skipChr(state, '?') >= SKIP_OK) {
 8003142:	213f      	movs	r1, #63	; 0x3f
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fe71 	bl	8002e2c <skipChr>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	dd03      	ble.n	8003158 <scpiLex_ProgramHeader+0x7c>
                token->type = SCPI_TOKEN_COMPOUND_QUERY_PROGRAM_HEADER;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2215      	movs	r2, #21
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e009      	b.n	800316c <scpiLex_ProgramHeader+0x90>
            } else {
                token->type = SCPI_TOKEN_COMPOUND_PROGRAM_HEADER;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2211      	movs	r2, #17
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e005      	b.n	800316c <scpiLex_ProgramHeader+0x90>
            }
        } else if (res <= SKIP_INCOMPLETE) {
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	da02      	bge.n	800316c <scpiLex_ProgramHeader+0x90>
            token->type = SCPI_TOKEN_INCOMPLETE_COMPOUND_PROGRAM_HEADER;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2212      	movs	r2, #18
 800316a:	701a      	strb	r2, [r3, #0]
        }
    }

    if (token->type != SCPI_TOKEN_UNKNOWN) {
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b1a      	cmp	r3, #26
 8003172:	d008      	beq.n	8003186 <scpiLex_ProgramHeader+0xaa>
        token->len = state->pos - token->ptr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	461a      	mov	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e006      	b.n	8003194 <scpiLex_ProgramHeader+0xb8>
    } else {
        token->len = 0;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
        state->pos = token->ptr;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]
    }

    return token->len;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <scpiLex_CharacterProgramData>:
 * Detect token "Character program data"
 * @param state
 * @param token
 * @return 
 */
int scpiLex_CharacterProgramData(lex_state_t * state, scpi_token_t * token) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && isalpha((uint8_t)(state->pos[0]))) {
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fcf8 	bl	8002ba8 <iseos>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d131      	bne.n	8003222 <scpiLex_CharacterProgramData+0x82>
 80031be:	f002 f96b 	bl	8005498 <__locale_ctype_ptr>
 80031c2:	4602      	mov	r2, r0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d024      	beq.n	8003222 <scpiLex_CharacterProgramData+0x82>
        state->pos++;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 80031e2:	e004      	b.n	80031ee <scpiLex_CharacterProgramData+0x4e>
            state->pos++;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	605a      	str	r2, [r3, #4]
        while (!iseos(state) && (isalnum((uint8_t)(state->pos[0])) || ischr(state, '_'))) {
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff fcda 	bl	8002ba8 <iseos>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d113      	bne.n	8003222 <scpiLex_CharacterProgramData+0x82>
 80031fa:	f002 f94d 	bl	8005498 <__locale_ctype_ptr>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e7      	bne.n	80031e4 <scpiLex_CharacterProgramData+0x44>
 8003214:	215f      	movs	r1, #95	; 0x5f
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fce7 	bl	8002bea <ischr>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1e0      	bne.n	80031e4 <scpiLex_CharacterProgramData+0x44>
        }
    }

    token->len = state->pos - token->ptr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	461a      	mov	r2, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	1ad2      	subs	r2, r2, r3
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	dd03      	ble.n	8003242 <scpiLex_CharacterProgramData+0xa2>
        token->type = SCPI_TOKEN_PROGRAM_MNEMONIC;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2209      	movs	r2, #9
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e002      	b.n	8003248 <scpiLex_CharacterProgramData+0xa8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	221a      	movs	r2, #26
 8003246:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <skipMantisa>:

/* 7.7.2 <DECIMAL NUMERIC PROGRAM DATA> */
static int skipMantisa(lex_state_t * state) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]

    skipPlusmn(state);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fd9d 	bl	8002da0 <skipPlusmn>

    someNumbers += skipNumbers(state);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fd73 	bl	8002d52 <skipNumbers>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

    if (skipChr(state, '.')) {
 8003274:	212e      	movs	r1, #46	; 0x2e
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fdd8 	bl	8002e2c <skipChr>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <skipMantisa+0x3c>
        someNumbers += skipNumbers(state);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff fd65 	bl	8002d52 <skipNumbers>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
    }

    return someNumbers;
 8003290:	68fb      	ldr	r3, [r7, #12]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <skipExponent>:

static int skipExponent(lex_state_t * state) {
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]

    if (!iseos(state) && isE(state->pos[0])) {
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fc7e 	bl	8002ba8 <iseos>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d117      	bne.n	80032e2 <skipExponent+0x48>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fcf2 	bl	8002ca2 <isE>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <skipExponent+0x48>
        state->pos++;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	605a      	str	r2, [r3, #4]

        skipWs(state);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fcf9 	bl	8002cc6 <skipWs>

        skipPlusmn(state);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff fd63 	bl	8002da0 <skipPlusmn>

        someNumbers = skipNumbers(state);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff fd39 	bl	8002d52 <skipNumbers>
 80032e0:	60f8      	str	r0, [r7, #12]
    }

    return someNumbers;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <scpiLex_DecimalNumericProgramData>:
 * Detect token Decimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_DecimalNumericProgramData(lex_state_t * state, scpi_token_t * token) {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
    char * rollback;
    token->ptr = state->pos;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	605a      	str	r2, [r3, #4]

    if (skipMantisa(state)) {
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffa8 	bl	8003254 <skipMantisa>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00f      	beq.n	800332a <scpiLex_DecimalNumericProgramData+0x3e>
        rollback = state->pos;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	60fb      	str	r3, [r7, #12]
        skipWs(state);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff fcd8 	bl	8002cc6 <skipWs>
        if (!skipExponent(state)) {
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff ffbf 	bl	800329a <skipExponent>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d107      	bne.n	8003332 <scpiLex_DecimalNumericProgramData+0x46>
            state->pos = rollback;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e003      	b.n	8003332 <scpiLex_DecimalNumericProgramData+0x46>
        }
    } else {
        state->pos = token->ptr;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	605a      	str	r2, [r3, #4]
    }

    token->len = state->pos - token->ptr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	461a      	mov	r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	1ad2      	subs	r2, r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	609a      	str	r2, [r3, #8]
    if (token->len > 0) {
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	dd03      	ble.n	8003352 <scpiLex_DecimalNumericProgramData+0x66>
        token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	220a      	movs	r2, #10
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e002      	b.n	8003358 <scpiLex_DecimalNumericProgramData+0x6c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	221a      	movs	r2, #26
 8003356:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <scpiLex_SuffixProgramData>:

/* 7.7.3 <SUFFIX PROGRAM DATA> */
int scpiLex_SuffixProgramData(lex_state_t * state, scpi_token_t * token) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	605a      	str	r2, [r3, #4]

    skipChr(state, '/');
 8003376:	212f      	movs	r1, #47	; 0x2f
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fd57 	bl	8002e2c <skipChr>

    /* TODO: strict parsing  : SLASH? (ALPHA+ (MINUS? DIGIT)?) ((SLASH | DOT) (ALPHA+ (MINUS? DIGIT)?))* */
    if (skipAlpha(state)) {
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff fd2d 	bl	8002dde <skipAlpha>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d017      	beq.n	80033ba <scpiLex_SuffixProgramData+0x56>
        skipChr(state, '-');
 800338a:	212d      	movs	r1, #45	; 0x2d
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff fd4d 	bl	8002e2c <skipChr>
        skipDigit(state);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff fcba 	bl	8002d0c <skipDigit>

        while (skipSlashDot(state)) {
 8003398:	e009      	b.n	80033ae <scpiLex_SuffixProgramData+0x4a>
            skipAlpha(state);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fd1f 	bl	8002dde <skipAlpha>
            skipChr(state, '-');
 80033a0:	212d      	movs	r1, #45	; 0x2d
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fd42 	bl	8002e2c <skipChr>
            skipDigit(state);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fcaf 	bl	8002d0c <skipDigit>
        while (skipSlashDot(state)) {
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fd5c 	bl	8002e6c <skipSlashDot>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1ef      	bne.n	800339a <scpiLex_SuffixProgramData+0x36>
        }
    }

    token->len = state->pos - token->ptr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	461a      	mov	r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	1ad2      	subs	r2, r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	609a      	str	r2, [r3, #8]
    if ((token->len > 0)) {
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	dd03      	ble.n	80033da <scpiLex_SuffixProgramData+0x76>
        token->type = SCPI_TOKEN_SUFFIX_PROGRAM_DATA;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	220c      	movs	r2, #12
 80033d6:	701a      	strb	r2, [r3, #0]
 80033d8:	e009      	b.n	80033ee <scpiLex_SuffixProgramData+0x8a>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	221a      	movs	r2, #26
 80033de:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <skipHexNum>:

/* 7.7.4 <NONDECIMAL NUMERIC PROGRAM DATA> */
static int skipHexNum(lex_state_t * state) {
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b084      	sub	sp, #16
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8003406:	e007      	b.n	8003418 <skipHexNum+0x1e>
        state->pos++;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isxdigit((uint8_t)(state->pos[0]))) {
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff fbc5 	bl	8002ba8 <iseos>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10c      	bne.n	800343e <skipHexNum+0x44>
 8003424:	f002 f838 	bl	8005498 <__locale_ctype_ptr>
 8003428:	4602      	mov	r2, r0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e4      	bne.n	8003408 <skipHexNum+0xe>
    }
    return someNumbers;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <skipOctNum>:

static int skipOctNum(lex_state_t * state) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8003454:	e007      	b.n	8003466 <skipOctNum+0x1e>
        state->pos++;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	605a      	str	r2, [r3, #4]
        someNumbers++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isqdigit(state->pos[0])) {
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fb9e 	bl	8002ba8 <iseos>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <skipOctNum+0x3c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fb71 	bl	8002b60 <isqdigit>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e8      	bne.n	8003456 <skipOctNum+0xe>
    }
    return someNumbers;
 8003484:	68fb      	ldr	r3, [r7, #12]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <skipBinNum>:

static int skipBinNum(lex_state_t * state) {
 800348e:	b580      	push	{r7, lr}
 8003490:	b084      	sub	sp, #16
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
    int someNumbers = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 800349a:	e007      	b.n	80034ac <skipBinNum+0x1e>
        state->pos++;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	605a      	str	r2, [r3, #4]
        someNumbers++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3301      	adds	r3, #1
 80034aa:	60fb      	str	r3, [r7, #12]
    while (!iseos(state) && isbdigit(state->pos[0])) {
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fb7b 	bl	8002ba8 <iseos>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d108      	bne.n	80034ca <skipBinNum+0x3c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fb3c 	bl	8002b3c <isbdigit>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e8      	bne.n	800349c <skipBinNum+0xe>
    }
    return someNumbers;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <scpiLex_NondecimalNumericData>:
 * Detect token nondecimal number
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NondecimalNumericData(lex_state_t * state, scpi_token_t * token) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
    int someNumbers = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	605a      	str	r2, [r3, #4]
    if (skipChr(state, '#')) {
 80034ea:	2123      	movs	r1, #35	; 0x23
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff fc9d 	bl	8002e2c <skipChr>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d046      	beq.n	8003586 <scpiLex_NondecimalNumericData+0xb2>
        if (!iseos(state)) {
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff fb55 	bl	8002ba8 <iseos>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d140      	bne.n	8003586 <scpiLex_NondecimalNumericData+0xb2>
            if (isH(state->pos[0])) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fb93 	bl	8002c36 <isH>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <scpiLex_NondecimalNumericData+0x5c>
                state->pos++;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	605a      	str	r2, [r3, #4]
                someNumbers = skipHexNum(state);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff ff6a 	bl	80033fa <skipHexNum>
 8003526:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_HEXNUM;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2206      	movs	r2, #6
 800352c:	701a      	strb	r2, [r3, #0]
 800352e:	e02a      	b.n	8003586 <scpiLex_NondecimalNumericData+0xb2>
            } else if (isQ(state->pos[0])) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff fba1 	bl	8002c7e <isQ>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <scpiLex_NondecimalNumericData+0x88>
                state->pos++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	605a      	str	r2, [r3, #4]
                someNumbers = skipOctNum(state);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff7b 	bl	8003448 <skipOctNum>
 8003552:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_OCTNUM;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2207      	movs	r2, #7
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	e014      	b.n	8003586 <scpiLex_NondecimalNumericData+0xb2>
            } else if (isB(state->pos[0])) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fb79 	bl	8002c5a <isB>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <scpiLex_NondecimalNumericData+0xb2>
                state->pos++;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]
                someNumbers = skipBinNum(state);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ff88 	bl	800348e <skipBinNum>
 800357e:	60f8      	str	r0, [r7, #12]
                token->type = SCPI_TOKEN_BINNUM;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2208      	movs	r2, #8
 8003584:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (someNumbers) {
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00d      	beq.n	80035a8 <scpiLex_NondecimalNumericData+0xd4>
        token->ptr += 2; /* ignore number prefix */
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	1c9a      	adds	r2, r3, #2
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	605a      	str	r2, [r3, #4]
        token->len = state->pos - token->ptr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	461a      	mov	r2, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	1ad2      	subs	r2, r2, r3
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	e009      	b.n	80035bc <scpiLex_NondecimalNumericData+0xe8>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	221a      	movs	r2, #26
 80035ac:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
    }
    return token->len > 0 ? token->len + 2 : 0;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	dd03      	ble.n	80035cc <scpiLex_NondecimalNumericData+0xf8>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	3302      	adds	r3, #2
 80035ca:	e000      	b.n	80035ce <scpiLex_NondecimalNumericData+0xfa>
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <isascii7bit>:

/* 7.7.5 <STRING PROGRAM DATA> */
static int isascii7bit(int c) {
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
    return (c >= 0) && (c <= 0x7f);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	db04      	blt.n	80035ee <isascii7bit+0x18>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b7f      	cmp	r3, #127	; 0x7f
 80035e8:	dc01      	bgt.n	80035ee <isascii7bit+0x18>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <isascii7bit+0x1a>
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <skipQuoteProgramData>:

static void skipQuoteProgramData(lex_state_t * state, char quote) {
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
    while (!iseos(state)) {
 8003606:	e03d      	b.n	8003684 <skipQuoteProgramData+0x8a>
        if (isascii7bit(state->pos[0]) && !ischr(state, quote)) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ffe1 	bl	80035d6 <isascii7bit>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <skipQuoteProgramData+0x3c>
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fae3 	bl	8002bea <ischr>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <skipQuoteProgramData+0x3c>
            state->pos++;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	e026      	b.n	8003684 <skipQuoteProgramData+0x8a>
        } else if (ischr(state, quote)) {
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff fad5 	bl	8002bea <ischr>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d025      	beq.n	8003692 <skipQuoteProgramData+0x98>
            state->pos++;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	605a      	str	r2, [r3, #4]
            if (!iseos(state) && ischr(state, quote)) {
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff faa9 	bl	8002ba8 <iseos>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10d      	bne.n	8003678 <skipQuoteProgramData+0x7e>
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f7ff fac2 	bl	8002bea <ischr>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <skipQuoteProgramData+0x7e>
                state->pos++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	e005      	b.n	8003684 <skipQuoteProgramData+0x8a>
            } else {
                state->pos--;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	1e5a      	subs	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	605a      	str	r2, [r3, #4]
                break;
 8003682:	e007      	b.n	8003694 <skipQuoteProgramData+0x9a>
    while (!iseos(state)) {
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fa8f 	bl	8002ba8 <iseos>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0bb      	beq.n	8003608 <skipQuoteProgramData+0xe>
            }
        } else {
            break;
        }
    }
}
 8003690:	e000      	b.n	8003694 <skipQuoteProgramData+0x9a>
            break;
 8003692:	bf00      	nop
}
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <skipDoubleQuoteProgramData>:

static void skipDoubleQuoteProgramData(lex_state_t * state) {
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '"');
 80036a4:	2122      	movs	r1, #34	; 0x22
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ffa7 	bl	80035fa <skipQuoteProgramData>
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <skipSingleQuoteProgramData>:

static void skipSingleQuoteProgramData(lex_state_t * state) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
    skipQuoteProgramData(state, '\'');
 80036bc:	2127      	movs	r1, #39	; 0x27
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ff9b 	bl	80035fa <skipQuoteProgramData>
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <scpiLex_StringProgramData>:
 * Detect token String data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_StringProgramData(lex_state_t * state, scpi_token_t * token) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	605a      	str	r2, [r3, #4]

    if (!iseos(state)) {
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fa62 	bl	8002ba8 <iseos>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d162      	bne.n	80037b0 <scpiLex_StringProgramData+0xe4>
        if (ischr(state, '"')) {
 80036ea:	2122      	movs	r1, #34	; 0x22
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fa7c 	bl	8002bea <ischr>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d02a      	beq.n	800374e <scpiLex_StringProgramData+0x82>
            state->pos++;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	220f      	movs	r2, #15
 8003706:	701a      	strb	r2, [r3, #0]
            skipDoubleQuoteProgramData(state);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff ffc7 	bl	800369c <skipDoubleQuoteProgramData>
            if (!iseos(state) && ischr(state, '"')) {
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff fa4a 	bl	8002ba8 <iseos>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d114      	bne.n	8003744 <scpiLex_StringProgramData+0x78>
 800371a:	2122      	movs	r1, #34	; 0x22
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff fa64 	bl	8002bea <ischr>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <scpiLex_StringProgramData+0x78>
                state->pos++;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	461a      	mov	r2, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	1ad2      	subs	r2, r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	609a      	str	r2, [r3, #8]
 8003742:	e035      	b.n	80037b0 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	e030      	b.n	80037b0 <scpiLex_StringProgramData+0xe4>
            }
        } else if (ischr(state, '\'')) {
 800374e:	2127      	movs	r1, #39	; 0x27
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fa4a 	bl	8002bea <ischr>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d029      	beq.n	80037b0 <scpiLex_StringProgramData+0xe4>
            state->pos++;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	605a      	str	r2, [r3, #4]
            token->type = SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	220e      	movs	r2, #14
 800376a:	701a      	strb	r2, [r3, #0]
            skipSingleQuoteProgramData(state);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ffa1 	bl	80036b4 <skipSingleQuoteProgramData>
            if (!iseos(state) && ischr(state, '\'')) {
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff fa18 	bl	8002ba8 <iseos>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d114      	bne.n	80037a8 <scpiLex_StringProgramData+0xdc>
 800377e:	2127      	movs	r1, #39	; 0x27
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fa32 	bl	8002bea <ischr>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <scpiLex_StringProgramData+0xdc>
                state->pos++;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	1c5a      	adds	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	605a      	str	r2, [r3, #4]
                token->len = state->pos - token->ptr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	1ad2      	subs	r2, r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	e003      	b.n	80037b0 <scpiLex_StringProgramData+0xe4>
            } else {
                state->pos = token->ptr;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	605a      	str	r2, [r3, #4]
            }
        }
    }

    token->len = state->pos - token->ptr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	461a      	mov	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	1ad2      	subs	r2, r2, r3
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dc09      	bgt.n	80037dc <scpiLex_StringProgramData+0x110>
        /* token->ptr++;
         * token->len -= 2; */
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	221a      	movs	r2, #26
 80037cc:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	605a      	str	r2, [r3, #4]
        token->len = 0;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
    }

    return token->len > 0 ? token->len : 0;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <isNonzeroDigit>:

/* 7.7.6 <ARBITRARY BLOCK PROGRAM DATA> */
static int isNonzeroDigit(int c) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
    return isdigit(c) && (c != '0');
 80037f4:	f001 fe50 	bl	8005498 <__locale_ctype_ptr>
 80037f8:	4602      	mov	r2, r0
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3301      	adds	r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <isNonzeroDigit+0x28>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b30      	cmp	r3, #48	; 0x30
 800380e:	d001      	beq.n	8003814 <isNonzeroDigit+0x28>
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <isNonzeroDigit+0x2a>
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <scpiLex_ArbitraryBlockProgramData>:
 * Detect token Block Data
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ArbitraryBlockProgramData(lex_state_t * state, scpi_token_t * token) {
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
    int i;
    int arbitraryBlockLength = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
    const char * ptr = state->pos;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60bb      	str	r3, [r7, #8]
    int validData = -1;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	60fb      	str	r3, [r7, #12]
    token->ptr = state->pos;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	605a      	str	r2, [r3, #4]

    if (skipChr(state, '#')) {
 8003840:	2123      	movs	r1, #35	; 0x23
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff faf2 	bl	8002e2c <skipChr>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d079      	beq.n	8003942 <scpiLex_ArbitraryBlockProgramData+0x124>
        if (!iseos(state) && isNonzeroDigit(state->pos[0])) {
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff f9aa 	bl	8002ba8 <iseos>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d169      	bne.n	800392e <scpiLex_ArbitraryBlockProgramData+0x110>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ffc3 	bl	80037ec <isNonzeroDigit>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d060      	beq.n	800392e <scpiLex_ArbitraryBlockProgramData+0x110>
            /* Get number of digits */
            i = state->pos[0] - '0';
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	3b30      	subs	r3, #48	; 0x30
 8003874:	617b      	str	r3, [r7, #20]
            state->pos++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	605a      	str	r2, [r3, #4]

            for (; i > 0; i--) {
 8003880:	e027      	b.n	80038d2 <scpiLex_ArbitraryBlockProgramData+0xb4>
                if (!iseos(state) && isdigit((uint8_t)(state->pos[0]))) {
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff f990 	bl	8002ba8 <iseos>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d124      	bne.n	80038d8 <scpiLex_ArbitraryBlockProgramData+0xba>
 800388e:	f001 fe03 	bl	8005498 <__locale_ctype_ptr>
 8003892:	4602      	mov	r2, r0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	3301      	adds	r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <scpiLex_ArbitraryBlockProgramData+0xba>
                    arbitraryBlockLength *= 10;
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	613b      	str	r3, [r7, #16]
                    arbitraryBlockLength += (state->pos[0] - '0');
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	3b30      	subs	r3, #48	; 0x30
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
                    state->pos++;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	605a      	str	r2, [r3, #4]
            for (; i > 0; i--) {
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	dcd4      	bgt.n	8003882 <scpiLex_ArbitraryBlockProgramData+0x64>
                } else {
                    break;
                }
            }

            if (i == 0) {
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11e      	bne.n	800391c <scpiLex_ArbitraryBlockProgramData+0xfe>
                state->pos += arbitraryBlockLength;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	441a      	add	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	605a      	str	r2, [r3, #4]
                if ((state->buffer + state->len) >= (state->pos)) {
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6892      	ldr	r2, [r2, #8]
 80038f2:	441a      	add	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d30c      	bcc.n	8003916 <scpiLex_ArbitraryBlockProgramData+0xf8>
                    token->ptr = state->pos - arbitraryBlockLength;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	425b      	negs	r3, r3
 8003904:	441a      	add	r2, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	605a      	str	r2, [r3, #4]
                    token->len = arbitraryBlockLength;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	609a      	str	r2, [r3, #8]
                    validData = 1;
 8003910:	2301      	movs	r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 8003914:	e014      	b.n	8003940 <scpiLex_ArbitraryBlockProgramData+0x122>
                } else {
                    validData = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800391a:	e011      	b.n	8003940 <scpiLex_ArbitraryBlockProgramData+0x122>
                }
            } else if (iseos(state)) {
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff f943 	bl	8002ba8 <iseos>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00b      	beq.n	8003940 <scpiLex_ArbitraryBlockProgramData+0x122>
                validData = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
            if (i == 0) {
 800392c:	e008      	b.n	8003940 <scpiLex_ArbitraryBlockProgramData+0x122>
            }
        } else if (iseos(state)) {
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff f93a 	bl	8002ba8 <iseos>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <scpiLex_ArbitraryBlockProgramData+0x124>
            validData = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	e000      	b.n	8003942 <scpiLex_ArbitraryBlockProgramData+0x124>
            if (i == 0) {
 8003940:	bf00      	nop
        }
    }

    if (validData == 1) {
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d103      	bne.n	8003950 <scpiLex_ArbitraryBlockProgramData+0x132>
        /* valid */
        token->type = SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	220d      	movs	r2, #13
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e01a      	b.n	8003986 <scpiLex_ArbitraryBlockProgramData+0x168>
    } else if (validData == 0) {
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10d      	bne.n	8003972 <scpiLex_ArbitraryBlockProgramData+0x154>
        /* incomplete */
        token->type = SCPI_TOKEN_UNKNOWN;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	221a      	movs	r2, #26
 800395a:	701a      	strb	r2, [r3, #0]
        token->len = 0;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
        state->pos = state->buffer + state->len;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6892      	ldr	r2, [r2, #8]
 800396a:	441a      	add	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	e009      	b.n	8003986 <scpiLex_ArbitraryBlockProgramData+0x168>
    } else {
        /* invalid */
        token->type = SCPI_TOKEN_UNKNOWN;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	221a      	movs	r2, #26
 8003976:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]
    }

    return token->len + (token->ptr - ptr);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4619      	mov	r1, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	1acb      	subs	r3, r1, r3
 8003994:	4413      	add	r3, r2
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <isProgramExpression>:

/* 7.7.7 <EXPRESSION PROGRAM DATA> */
static int isProgramExpression(int c) {
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
    if ((c >= 0x20) && (c <= 0x7e)) {
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b1f      	cmp	r3, #31
 80039aa:	dd16      	ble.n	80039da <isProgramExpression+0x3c>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b7e      	cmp	r3, #126	; 0x7e
 80039b0:	dc13      	bgt.n	80039da <isProgramExpression+0x3c>
        if ((c != '"')
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b22      	cmp	r3, #34	; 0x22
 80039b6:	d010      	beq.n	80039da <isProgramExpression+0x3c>
                && (c != '#')
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b23      	cmp	r3, #35	; 0x23
 80039bc:	d00d      	beq.n	80039da <isProgramExpression+0x3c>
                && (c != '\'')
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b27      	cmp	r3, #39	; 0x27
 80039c2:	d00a      	beq.n	80039da <isProgramExpression+0x3c>
                && (c != '(')
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b28      	cmp	r3, #40	; 0x28
 80039c8:	d007      	beq.n	80039da <isProgramExpression+0x3c>
                && (c != ')')
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b29      	cmp	r3, #41	; 0x29
 80039ce:	d004      	beq.n	80039da <isProgramExpression+0x3c>
                && (c != ';')) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b3b      	cmp	r3, #59	; 0x3b
 80039d4:	d001      	beq.n	80039da <isProgramExpression+0x3c>
            return 1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <isProgramExpression+0x3e>
        }
    }

    return 0;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr

080039e6 <skipProgramExpression>:

static void skipProgramExpression(lex_state_t * state) {
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 80039ee:	e004      	b.n	80039fa <skipProgramExpression+0x14>
        state->pos++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	605a      	str	r2, [r3, #4]
    while (!iseos(state) && isProgramExpression(state->pos[0])) {
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff f8d4 	bl	8002ba8 <iseos>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d108      	bne.n	8003a18 <skipProgramExpression+0x32>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ffc6 	bl	800399e <isProgramExpression>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1eb      	bne.n	80039f0 <skipProgramExpression+0xa>
    }
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <scpiLex_ProgramExpression>:
 * Detect token Expression
 * @param state
 * @param token
 * @return 
 */
int scpiLex_ProgramExpression(lex_state_t * state, scpi_token_t * token) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	605a      	str	r2, [r3, #4]

    if (!iseos(state) && ischr(state, '(')) {
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff f8b8 	bl	8002ba8 <iseos>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12c      	bne.n	8003a98 <scpiLex_ProgramExpression+0x78>
 8003a3e:	2128      	movs	r1, #40	; 0x28
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff f8d2 	bl	8002bea <ischr>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d025      	beq.n	8003a98 <scpiLex_ProgramExpression+0x78>
        state->pos++;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	605a      	str	r2, [r3, #4]
        skipProgramExpression(state);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffc5 	bl	80039e6 <skipProgramExpression>

        if (!iseos(state) && ischr(state, ')')) {
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff f8a3 	bl	8002ba8 <iseos>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d114      	bne.n	8003a92 <scpiLex_ProgramExpression+0x72>
 8003a68:	2129      	movs	r1, #41	; 0x29
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff f8bd 	bl	8002bea <ischr>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00d      	beq.n	8003a92 <scpiLex_ProgramExpression+0x72>
            state->pos++;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]
            token->len = state->pos - token->ptr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	461a      	mov	r2, r3
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	e002      	b.n	8003a98 <scpiLex_ProgramExpression+0x78>
        } else {
            token->len = 0;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
        }
    }

    if ((token->len > 0)) {
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	dd03      	ble.n	8003aa8 <scpiLex_ProgramExpression+0x88>
        token->type = SCPI_TOKEN_PROGRAM_EXPRESSION;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e009      	b.n	8003abc <scpiLex_ProgramExpression+0x9c>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	221a      	movs	r2, #26
 8003aac:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <scpiLex_Comma>:
 * Detect token comma
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Comma(lex_state_t * state, scpi_token_t * token) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ',')) {
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff f9a5 	bl	8002e2c <skipChr>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d006      	beq.n	8003af6 <scpiLex_Comma+0x2e>
        token->len = 1;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2201      	movs	r2, #1
 8003aec:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_COMMA;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	e005      	b.n	8003b02 <scpiLex_Comma+0x3a>
    } else {
        token->len = 0;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	221a      	movs	r2, #26
 8003b00:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <scpiLex_Semicolon>:
 * Detect token semicolon
 * @param state
 * @param token
 * @return 
 */
int scpiLex_Semicolon(lex_state_t * state, scpi_token_t * token) {
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	605a      	str	r2, [r3, #4]

    if (skipChr(state, ';')) {
 8003b20:	213b      	movs	r1, #59	; 0x3b
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7ff f982 	bl	8002e2c <skipChr>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d006      	beq.n	8003b3c <scpiLex_Semicolon+0x2e>
        token->len = 1;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_SEMICOLON;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e005      	b.n	8003b48 <scpiLex_Semicolon+0x3a>
    } else {
        token->len = 0;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
        token->type = SCPI_TOKEN_UNKNOWN;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	221a      	movs	r2, #26
 8003b46:	701a      	strb	r2, [r3, #0]
    }

    return token->len;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <scpiLex_NewLine>:
 * Detect token New line
 * @param state
 * @param token
 * @return 
 */
int scpiLex_NewLine(lex_state_t * state, scpi_token_t * token) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
    token->ptr = state->pos;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	605a      	str	r2, [r3, #4]

    skipChr(state, '\r');
 8003b66:	210d      	movs	r1, #13
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff f95f 	bl	8002e2c <skipChr>
    skipChr(state, '\n');
 8003b6e:	210a      	movs	r1, #10
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff f95b 	bl	8002e2c <skipChr>

    token->len = state->pos - token->ptr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	1ad2      	subs	r2, r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	609a      	str	r2, [r3, #8]

    if ((token->len > 0)) {
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	dd03      	ble.n	8003b96 <scpiLex_NewLine+0x42>
        token->type = SCPI_TOKEN_NL;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2205      	movs	r2, #5
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e009      	b.n	8003baa <scpiLex_NewLine+0x56>
    } else {
        token->type = SCPI_TOKEN_UNKNOWN;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	221a      	movs	r2, #26
 8003b9a:	701a      	strb	r2, [r3, #0]
        state->pos = token->ptr;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	605a      	str	r2, [r3, #4]
        token->len = 0;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
    }

    return token->len;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <SCPI_SystemVersionQ>:
/**
 * SYSTem:VERSion?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemVersionQ(scpi_t * context) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
    SCPI_ResultMnemonic(context, SCPI_STD_VERSION_REVISION);
 8003bc0:	2206      	movs	r2, #6
 8003bc2:	4904      	ldr	r1, [pc, #16]	; (8003bd4 <SCPI_SystemVersionQ+0x1c>)
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fac2 	bl	800414e <SCPI_ResultCharacters>
    return SCPI_RES_OK;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	080068ec 	.word	0x080068ec

08003bd8 <SCPI_SystemErrorNextQ>:
/**
 * SYSTem:ERRor[:NEXT]?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorNextQ(scpi_t * context) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    scpi_error_t error;
    SCPI_ErrorPop(context, &error);
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	4619      	mov	r1, r3
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7fe fa62 	bl	80020b0 <SCPI_ErrorPop>
    SCPI_ResultError(context, &error);
 8003bec:	f107 030c 	add.w	r3, r7, #12
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fb46 	bl	8004284 <SCPI_ResultError>
#if USE_DEVICE_DEPENDENT_ERROR_INFORMATION
    SCPIDEFINE_free(&context->error_info_heap, error.device_dependent_info, false);
#endif
    return SCPI_RES_OK;
 8003bf8:	2301      	movs	r3, #1
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <SCPI_SystemErrorCountQ>:
/**
 * SYSTem:ERRor:COUNt?
 * @param context
 * @return
 */
scpi_result_t SCPI_SystemErrorCountQ(scpi_t * context) {
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
    SCPI_ResultInt32(context, SCPI_ErrorCount(context));
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe fa6e 	bl	80020ec <SCPI_ErrorCount>
 8003c10:	4603      	mov	r3, r0
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fb24 	bl	8004262 <SCPI_ResultInt32>

    return SCPI_RES_OK;
 8003c1a:	2301      	movs	r3, #1
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <writeData>:
 * @param context
 * @param data
 * @param len - lenght of data to be written
 * @return number of bytes written
 */
static size_t writeData(scpi_t * context, const char * data, size_t len) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
    if (len > 0) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <writeData+0x24>
        return context->interface->write(context, data, len);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	4798      	blx	r3
 8003c44:	4603      	mov	r3, r0
 8003c46:	e000      	b.n	8003c4a <writeData+0x26>
    } else {
        return 0;
 8003c48:	2300      	movs	r3, #0
    }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <flushData>:
/**
 * Flush data to SCPI output
 * @param context
 * @return
 */
static int flushData(scpi_t * context) {
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
    if (context && context->interface && context->interface->flush) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00f      	beq.n	8003c80 <flushData+0x2e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <flushData+0x2e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d006      	beq.n	8003c80 <flushData+0x2e>
        return context->interface->flush(context);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	e000      	b.n	8003c82 <flushData+0x30>
    } else {
        return SCPI_RES_OK;
 8003c80:	2301      	movs	r3, #1
    }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <writeDelimiter>:
/**
 * Write result delimiter to output
 * @param context
 * @return number of bytes written
 */
static size_t writeDelimiter(scpi_t * context) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dd06      	ble.n	8003caa <writeDelimiter+0x1e>
        return writeData(context, ",", 1);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4905      	ldr	r1, [pc, #20]	; (8003cb4 <writeDelimiter+0x28>)
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff ffbf 	bl	8003c24 <writeData>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	e000      	b.n	8003cac <writeDelimiter+0x20>
    } else {
        return 0;
 8003caa:	2300      	movs	r3, #0
    }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	080068f4 	.word	0x080068f4

08003cb8 <writeNewLine>:
/**
 * Conditionaly write "New Line"
 * @param context
 * @return number of characters written
 */
static size_t writeNewLine(scpi_t * context) {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	dd0a      	ble.n	8003cde <writeNewLine+0x26>
        size_t len;
#ifndef SCPI_LINE_ENDING
#error no termination character defined
#endif
        len = writeData(context, SCPI_LINE_ENDING, strlen(SCPI_LINE_ENDING));
 8003cc8:	2202      	movs	r2, #2
 8003cca:	4907      	ldr	r1, [pc, #28]	; (8003ce8 <writeNewLine+0x30>)
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ffa9 	bl	8003c24 <writeData>
 8003cd2:	60f8      	str	r0, [r7, #12]
        flushData(context);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ffbc 	bl	8003c52 <flushData>
        return len;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	e000      	b.n	8003ce0 <writeNewLine+0x28>
    } else {
        return 0;
 8003cde:	2300      	movs	r3, #0
    }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	080068f8 	.word	0x080068f8

08003cec <writeSemicolon>:
/**
 * Conditionaly write ";"
 * @param context
 * @return number of characters written
 */
static size_t writeSemicolon(scpi_t * context) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
    if (context->output_count > 0) {
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	dd06      	ble.n	8003d0a <writeSemicolon+0x1e>
        return writeData(context, ";", 1);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4905      	ldr	r1, [pc, #20]	; (8003d14 <writeSemicolon+0x28>)
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff8f 	bl	8003c24 <writeData>
 8003d06:	4603      	mov	r3, r0
 8003d08:	e000      	b.n	8003d0c <writeSemicolon+0x20>
    } else {
        return 0;
 8003d0a:	2300      	movs	r3, #0
    }
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	080068fc 	.word	0x080068fc

08003d18 <processCommand>:

/**
 * Process command
 * @param context
 */
static scpi_bool_t processCommand(scpi_t * context) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    const scpi_command_t * cmd = context->param_list.cmd;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	613b      	str	r3, [r7, #16]
    lex_state_t * state = &context->param_list.lex_state;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3314      	adds	r3, #20
 8003d2a:	60fb      	str	r3, [r7, #12]
    scpi_bool_t result = TRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	75fb      	strb	r3, [r7, #23]

    /* conditionaly write ; */
    writeSemicolon(context);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ffdb 	bl	8003cec <writeSemicolon>

    context->cmd_error = FALSE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    context->output_count = 0;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
    context->input_count = 0;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34
    context->arbitrary_reminding = 0;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* if callback exists - call command callback */
    if (cmd->callback != NULL) {
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01d      	beq.n	8003d96 <processCommand+0x7e>
        if ((cmd->callback(context) != SCPI_RES_OK)) {
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d00f      	beq.n	8003d88 <processCommand+0x70>
            if (!context->cmd_error) {
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d6e:	f083 0301 	eor.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <processCommand+0x6a>
                SCPI_ErrorPush(context, SCPI_ERROR_EXECUTION_ERROR);
 8003d78:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fe fa73 	bl	8002268 <SCPI_ErrorPush>
            }
            result = FALSE;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]
 8003d86:	e006      	b.n	8003d96 <processCommand+0x7e>
        } else {
            if (context->cmd_error) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <processCommand+0x7e>
                result = FALSE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    /* set error if command callback did not read all parameters */
    if (state->pos < (state->buffer + state->len) && !context->cmd_error) {
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	6889      	ldr	r1, [r1, #8]
 8003da2:	440b      	add	r3, r1
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d20e      	bcs.n	8003dc6 <processCommand+0xae>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dae:	f083 0301 	eor.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d006      	beq.n	8003dc6 <processCommand+0xae>
        SCPI_ErrorPush(context, SCPI_ERROR_PARAMETER_NOT_ALLOWED);
 8003db8:	f06f 016b 	mvn.w	r1, #107	; 0x6b
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fe fa53 	bl	8002268 <SCPI_ErrorPush>
        result = FALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]
    }

    return result;
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <findCommandHeader>:
/**
 * Cycle all patterns and search matching pattern. Execute command callback.
 * @param context
 * @result TRUE if context->paramlist is filled with correct values
 */
static scpi_bool_t findCommandHeader(scpi_t * context, const char * header, int len) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
    int32_t i;
    const scpi_command_t * cmd;

    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e01e      	b.n	8003e20 <findCommandHeader+0x50>
        cmd = &context->cmdlist[i];
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4613      	mov	r3, r2
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	613b      	str	r3, [r7, #16]
        if (matchCommand(cmd->pattern, header, len, NULL, 0, 0)) {
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2300      	movs	r3, #0
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	f001 f890 	bl	8004f2a <matchCommand>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <findCommandHeader+0x4a>
            context->param_list.cmd = cmd;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	611a      	str	r2, [r3, #16]
            return TRUE;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00e      	b.n	8003e38 <findCommandHeader+0x68>
    for (i = 0; context->cmdlist[i].pattern != NULL; i++) {
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1d5      	bne.n	8003de2 <findCommandHeader+0x12>
        }
    }
    return FALSE;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <SCPI_Parse>:
 * @param context
 * @param data - complete command line
 * @param len - command line length
 * @return FALSE if there was some error during evaluation of commands
 */
scpi_bool_t SCPI_Parse(scpi_t * context, char * data, int len) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scpi_parser_state_t * state;
    int r;
    scpi_token_t cmd_prev = {SCPI_TOKEN_UNKNOWN, NULL, 0};
 8003e52:	231a      	movs	r3, #26
 8003e54:	753b      	strb	r3, [r7, #20]
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]

    if (context == NULL) {
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <SCPI_Parse+0x28>
        return FALSE;
 8003e64:	2300      	movs	r3, #0
 8003e66:	e08f      	b.n	8003f88 <SCPI_Parse+0x148>
    }

    state = &context->parser_state;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3364      	adds	r3, #100	; 0x64
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    context->output_count = 0;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30

    while (1) {
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68b9      	ldr	r1, [r7, #8]
 8003e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e7a:	f000 fd8a 	bl	8004992 <scpiParser_detectProgramMessageUnit>
 8003e7e:	6238      	str	r0, [r7, #32]

        if (state->programHeader.type == SCPI_TOKEN_INVALID) {
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b19      	cmp	r3, #25
 8003e86:	d108      	bne.n	8003e9a <SCPI_Parse+0x5a>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_CHARACTER);
 8003e88:	f06f 0164 	mvn.w	r1, #100	; 0x64
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f7fe f9eb 	bl	8002268 <SCPI_ErrorPush>
            result = FALSE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003e98:	e063      	b.n	8003f62 <SCPI_Parse+0x122>
        } else if (state->programHeader.len > 0) {
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	dd5f      	ble.n	8003f62 <SCPI_Parse+0x122>

            composeCompoundCommand(&cmd_prev, &state->programHeader);
 8003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea4:	f107 0314 	add.w	r3, r7, #20
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fa06 	bl	80052bc <composeCompoundCommand>

            if (findCommandHeader(context, state->programHeader.ptr, state->programHeader.len)) {
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff ff88 	bl	8003dd0 <findCommandHeader>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d02c      	beq.n	8003f20 <SCPI_Parse+0xe0>

                context->param_list.lex_state.buffer = state->programData.ptr;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	615a      	str	r2, [r3, #20]
                context->param_list.lex_state.pos = context->param_list.lex_state.buffer;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	619a      	str	r2, [r3, #24]
                context->param_list.lex_state.len = state->programData.len;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	61da      	str	r2, [r3, #28]
                context->param_list.cmd_raw.data = state->programHeader.ptr;
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	629a      	str	r2, [r3, #40]	; 0x28
                context->param_list.cmd_raw.position = 0;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	625a      	str	r2, [r3, #36]	; 0x24
                context->param_list.cmd_raw.length = state->programHeader.len;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	621a      	str	r2, [r3, #32]

                result &= processCommand(context);
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7ff ff0e 	bl	8003d18 <processCommand>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf14      	ite	ne
 8003f0a:	2301      	movne	r3, #1
 8003f0c:	2300      	moveq	r3, #0
 8003f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                cmd_prev = state->programHeader;
 8003f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003f1e:	e020      	b.n	8003f62 <SCPI_Parse+0x122>
            } else {
                /* place undefined header with error */
                /* calculate length of errornouse header and trim \r\n */
                size_t r2 = r;
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
                while (r2 > 0 && (data[r2 - 1] == '\r' || data[r2 - 1] == '\n')) r2--;
 8003f24:	e002      	b.n	8003f2c <SCPI_Parse+0xec>
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00d      	beq.n	8003f4e <SCPI_Parse+0x10e>
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	3b01      	subs	r3, #1
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	4413      	add	r3, r2
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b0d      	cmp	r3, #13
 8003f3e:	d0f2      	beq.n	8003f26 <SCPI_Parse+0xe6>
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	3b01      	subs	r3, #1
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	4413      	add	r3, r2
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b0a      	cmp	r3, #10
 8003f4c:	d0eb      	beq.n	8003f26 <SCPI_Parse+0xe6>
                SCPI_ErrorPushEx(context, SCPI_ERROR_UNDEFINED_HEADER, data, r2);
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	f06f 0170 	mvn.w	r1, #112	; 0x70
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7fe f910 	bl	800217c <SCPI_ErrorPushEx>
                result = FALSE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
        }

        if (r < len) {
 8003f62:	6a3a      	ldr	r2, [r7, #32]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	da08      	bge.n	8003f7c <SCPI_Parse+0x13c>
            data += r;
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	4413      	add	r3, r2
 8003f70:	60bb      	str	r3, [r7, #8]
            len -= r;
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	607b      	str	r3, [r7, #4]
        r = scpiParser_detectProgramMessageUnit(state, data, len);
 8003f7a:	e77b      	b.n	8003e74 <SCPI_Parse+0x34>
        } else {
            break;
 8003f7c:	bf00      	nop
        }

    }

    /* conditionaly write new line */
    writeNewLine(context);
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff fe9a 	bl	8003cb8 <writeNewLine>

    return result;
 8003f84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3730      	adds	r7, #48	; 0x30
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <SCPI_Init>:
        const scpi_command_t * commands,
        scpi_interface_t * interface,
        const scpi_unit_def_t * units,
        const char * idn1, const char * idn2, const char * idn3, const char * idn4,
        char * input_buffer, size_t input_buffer_length,
        scpi_error_t * error_queue_data, int16_t error_queue_size) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
    memset(context, 0, sizeof (*context));
 8003f9e:	2298      	movs	r2, #152	; 0x98
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f001 fabc 	bl	8005520 <memset>
    context->cmdlist = commands;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	601a      	str	r2, [r3, #0]
    context->interface = interface;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	62da      	str	r2, [r3, #44]	; 0x2c
    context->units = units;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	65da      	str	r2, [r3, #92]	; 0x5c
    context->idn[0] = idn1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    context->idn[1] = idn2;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    context->idn[2] = idn3;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a3a      	ldr	r2, [r7, #32]
 8003fce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    context->idn[3] = idn4;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    context->buffer.data = input_buffer;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fde:	60da      	str	r2, [r3, #12]
    context->buffer.length = input_buffer_length;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe4:	605a      	str	r2, [r3, #4]
    context->buffer.position = 0;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
    SCPI_ErrorInit(context, error_queue_data, error_queue_size);
 8003fec:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7fd ffed 	bl	8001fd4 <SCPI_ErrorInit>
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <SCPI_Input>:
 * @param context
 * @param data - data to process
 * @param len - length of data
 * @return
 */
scpi_bool_t SCPI_Input(scpi_t * context, const char * data, int len) {
 8004002:	b580      	push	{r7, lr}
 8004004:	b088      	sub	sp, #32
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
    scpi_bool_t result = TRUE;
 800400e:	2301      	movs	r3, #1
 8004010:	77fb      	strb	r3, [r7, #31]
    size_t totcmdlen = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
    int cmdlen = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]

    if (len == 0) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d114      	bne.n	800404a <SCPI_Input+0x48>
        context->buffer.data[context->buffer.position] = 0;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4413      	add	r3, r2
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
        result = SCPI_Parse(context, context->buffer.data, context->buffer.position);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	68d9      	ldr	r1, [r3, #12]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	461a      	mov	r2, r3
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f7ff ff01 	bl	8003e40 <SCPI_Parse>
 800403e:	4603      	mov	r3, r0
 8004040:	77fb      	strb	r3, [r7, #31]
        context->buffer.position = 0;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	e07c      	b.n	8004144 <SCPI_Input+0x142>
    } else {
        int buffer_free;

        buffer_free = context->buffer.length - context->buffer.position;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	613b      	str	r3, [r7, #16]
        if (len > (buffer_free - 1)) {
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3b01      	subs	r3, #1
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	dd10      	ble.n	8004082 <SCPI_Input+0x80>
            /* Input buffer overrun - invalidate buffer */
            context->buffer.position = 0;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
            context->buffer.data[context->buffer.position] = 0;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4413      	add	r3, r2
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]
            SCPI_ErrorPush(context, SCPI_ERROR_INPUT_BUFFER_OVERRUN);
 8004074:	f46f 71b5 	mvn.w	r1, #362	; 0x16a
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f7fe f8f5 	bl	8002268 <SCPI_ErrorPush>
            return FALSE;
 800407e:	2300      	movs	r3, #0
 8004080:	e061      	b.n	8004146 <SCPI_Input+0x144>
        }
        memcpy(&context->buffer.data[context->buffer.position], data, len);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	4413      	add	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68b9      	ldr	r1, [r7, #8]
 8004090:	4618      	mov	r0, r3
 8004092:	f001 fa21 	bl	80054d8 <memcpy>
        context->buffer.position += len;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	441a      	add	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	609a      	str	r2, [r3, #8]
        context->buffer.data[context->buffer.position] = 0;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	4413      	add	r3, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]


        while (1) {
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	18d1      	adds	r1, r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 fc63 	bl	8004992 <scpiParser_detectProgramMessageUnit>
 80040cc:	6178      	str	r0, [r7, #20]
            totcmdlen += cmdlen;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4413      	add	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]

            if (context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NL) {
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d11e      	bne.n	800411e <SCPI_Input+0x11c>
                result = SCPI_Parse(context, context->buffer.data, totcmdlen);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff fea9 	bl	8003e40 <SCPI_Parse>
 80040ee:	4603      	mov	r3, r0
 80040f0:	77fb      	strb	r3, [r7, #31]
                memmove(context->buffer.data, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68d8      	ldr	r0, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	18d1      	adds	r1, r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	461a      	mov	r2, r3
 8004108:	f001 f9f1 	bl	80054ee <memmove>
                context->buffer.position -= totcmdlen;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	1ad2      	subs	r2, r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]
                totcmdlen = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e7c8      	b.n	80040b0 <SCPI_Input+0xae>
            } else {
                if (context->parser_state.programHeader.type == SCPI_TOKEN_UNKNOWN
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8004124:	2b1a      	cmp	r3, #26
 8004126:	d104      	bne.n	8004132 <SCPI_Input+0x130>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <SCPI_Input+0x13c>
                if (totcmdlen >= context->buffer.position) break;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d202      	bcs.n	8004142 <SCPI_Input+0x140>
            cmdlen = scpiParser_detectProgramMessageUnit(&context->parser_state, context->buffer.data + totcmdlen, context->buffer.position - totcmdlen);
 800413c:	e7b8      	b.n	80040b0 <SCPI_Input+0xae>
                        && context->parser_state.termination == SCPI_MESSAGE_TERMINATION_NONE) break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <SCPI_Input+0x142>
                if (totcmdlen >= context->buffer.position) break;
 8004142:	bf00      	nop
            }
        }
    }

    return result;
 8004144:	7ffb      	ldrb	r3, [r7, #31]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <SCPI_ResultCharacters>:
 * Write raw string result to the output
 * @param context
 * @param data
 * @return
 */
size_t SCPI_ResultCharacters(scpi_t * context, const char * data, size_t len) {
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
    size_t result = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
    result += writeDelimiter(context);
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f7ff fd94 	bl	8003c8c <writeDelimiter>
 8004164:	4602      	mov	r2, r0
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    result += writeData(context, data, len);
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff fd57 	bl	8003c24 <writeData>
 8004176:	4602      	mov	r2, r0
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	4413      	add	r3, r2
 800417c:	617b      	str	r3, [r7, #20]
    context->output_count++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 8004188:	697b      	ldr	r3, [r7, #20]
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <getBasePrefix>:
/**
 * Return prefix of nondecimal base
 * @param base
 * @return
 */
static const char * getBasePrefix(int8_t base) {
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	71fb      	strb	r3, [r7, #7]
    switch (base) {
 800419e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a2:	2b08      	cmp	r3, #8
 80041a4:	d005      	beq.n	80041b2 <getBasePrefix+0x1e>
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d005      	beq.n	80041b6 <getBasePrefix+0x22>
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d105      	bne.n	80041ba <getBasePrefix+0x26>
        case 2: return "#B";
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <getBasePrefix+0x34>)
 80041b0:	e004      	b.n	80041bc <getBasePrefix+0x28>
        case 8: return "#Q";
 80041b2:	4b06      	ldr	r3, [pc, #24]	; (80041cc <getBasePrefix+0x38>)
 80041b4:	e002      	b.n	80041bc <getBasePrefix+0x28>
        case 16: return "#H";
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <getBasePrefix+0x3c>)
 80041b8:	e000      	b.n	80041bc <getBasePrefix+0x28>
        default: return NULL;
 80041ba:	2300      	movs	r3, #0
    }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	08006900 	.word	0x08006900
 80041cc:	08006904 	.word	0x08006904
 80041d0:	08006908 	.word	0x08006908

080041d4 <resultUInt32BaseSign>:
 * @param val
 * @param base
 * @param sign
 * @return
 */
static size_t resultUInt32BaseSign(scpi_t * context, uint32_t val, int8_t base, scpi_bool_t sign) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b092      	sub	sp, #72	; 0x48
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	4611      	mov	r1, r2
 80041e0:	461a      	mov	r2, r3
 80041e2:	460b      	mov	r3, r1
 80041e4:	71fb      	strb	r3, [r7, #7]
 80041e6:	4613      	mov	r3, r2
 80041e8:	71bb      	strb	r3, [r7, #6]
    char buffer[32 + 1];
    const char * basePrefix;
    size_t result = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t len;

    len = UInt32ToStrBaseSign(val, buffer, sizeof (buffer), base, sign);
 80041ee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80041f2:	f107 0110 	add.w	r1, r7, #16
 80041f6:	79bb      	ldrb	r3, [r7, #6]
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4613      	mov	r3, r2
 80041fc:	2221      	movs	r2, #33	; 0x21
 80041fe:	68b8      	ldr	r0, [r7, #8]
 8004200:	f000 fc92 	bl	8004b28 <UInt32ToStrBaseSign>
 8004204:	63b8      	str	r0, [r7, #56]	; 0x38
    basePrefix = getBasePrefix(base);
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	4618      	mov	r0, r3
 800420c:	f7ff ffc2 	bl	8004194 <getBasePrefix>
 8004210:	6378      	str	r0, [r7, #52]	; 0x34

    result += writeDelimiter(context);
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fd3a 	bl	8003c8c <writeDelimiter>
 8004218:	4602      	mov	r2, r0
 800421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421c:	4413      	add	r3, r2
 800421e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (basePrefix != NULL) {
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <resultUInt32BaseSign+0x64>
        result += writeData(context, basePrefix, 2);
 8004226:	2202      	movs	r2, #2
 8004228:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff fcfa 	bl	8003c24 <writeData>
 8004230:	4602      	mov	r2, r0
 8004232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004234:	4413      	add	r3, r2
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    result += writeData(context, buffer, len);
 8004238:	f107 0310 	add.w	r3, r7, #16
 800423c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800423e:	4619      	mov	r1, r3
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7ff fcef 	bl	8003c24 <writeData>
 8004246:	4602      	mov	r2, r0
 8004248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424a:	4413      	add	r3, r2
 800424c:	63fb      	str	r3, [r7, #60]	; 0x3c
    context->output_count++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
    return result;
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800425a:	4618      	mov	r0, r3
 800425c:	3740      	adds	r7, #64	; 0x40
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <SCPI_ResultInt32>:
 * Write signed 32 bit integer value to the result
 * @param context
 * @param val
 * @return
 */
size_t SCPI_ResultInt32(scpi_t * context, int32_t val) {
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
    return resultUInt32BaseSign(context, val, 10, TRUE);
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	2301      	movs	r3, #1
 8004270:	220a      	movs	r2, #10
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ffae 	bl	80041d4 <resultUInt32BaseSign>
 8004278:	4603      	mov	r3, r0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <SCPI_ResultError>:
 *
 * @param context
 * @param error
 * @return
 */
size_t SCPI_ResultError(scpi_t * context, scpi_error_t * error) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
    size_t result = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
    size_t outputlimit = SCPI_STD_ERROR_DESC_MAX_STRING_LENGTH;
 8004292:	23ff      	movs	r3, #255	; 0xff
 8004294:	623b      	str	r3, [r7, #32]
    size_t step = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]

    const char * data[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t len[SCPIDEFINE_DESCRIPTION_MAX_PARTS];
    size_t i;

    data[0] = SCPI_ErrorTranslate(error->error_code);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd fff3 	bl	800228c <SCPI_ErrorTranslate>
 80042a6:	4603      	mov	r3, r0
 80042a8:	613b      	str	r3, [r7, #16]
    len[0] = strlen(data[0]);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fb ff4d 	bl	800014c <strlen>
 80042b2:	4603      	mov	r3, r0
 80042b4:	60fb      	str	r3, [r7, #12]
#else
    SCPIDEFINE_get_parts(&context->error_info_heap, data[1], &len[1], &data[2], &len[2]);
#endif
#endif

    result += SCPI_ResultInt32(context, error->error_code);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffcf 	bl	8004262 <SCPI_ResultInt32>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	4413      	add	r3, r2
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeDelimiter(context);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fcdd 	bl	8003c8c <writeDelimiter>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	4413      	add	r3, r2
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
    result += writeData(context, "\"", 1);
 80042da:	2201      	movs	r2, #1
 80042dc:	4976      	ldr	r1, [pc, #472]	; (80044b8 <SCPI_ResultError+0x234>)
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fca0 	bl	8003c24 <writeData>
 80042e4:	4602      	mov	r2, r0
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	4413      	add	r3, r2
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	e0c4      	b.n	800447c <SCPI_ResultError+0x1f8>
        if (i == 1) {
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d109      	bne.n	800430c <SCPI_ResultError+0x88>
            result += writeSemicolon(context);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fcf7 	bl	8003cec <writeSemicolon>
 80042fe:	4602      	mov	r2, r0
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	4413      	add	r3, r2
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
            outputlimit -= 1;
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	3b01      	subs	r3, #1
 800430a:	623b      	str	r3, [r7, #32]
        }
        if (len[i] > outputlimit) {
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004314:	4413      	add	r3, r2
 8004316:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800431a:	6a3a      	ldr	r2, [r7, #32]
 800431c:	429a      	cmp	r2, r3
 800431e:	d273      	bcs.n	8004408 <SCPI_ResultError+0x184>
            len[i] = outputlimit;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004328:	4413      	add	r3, r2
 800432a:	6a3a      	ldr	r2, [r7, #32]
 800432c:	f843 2c1c 	str.w	r2, [r3, #-28]
        }

        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8004330:	e06a      	b.n	8004408 <SCPI_ResultError+0x184>
            if ((step = quote - data[i] + 1) >= outputlimit) {
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800433c:	440b      	add	r3, r1
 800433e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	3301      	adds	r3, #1
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	429a      	cmp	r2, r3
 800434e:	d312      	bcc.n	8004376 <SCPI_ResultError+0xf2>
                len[i] -= 1;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004358:	4413      	add	r3, r2
 800435a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800435e:	1e5a      	subs	r2, r3, #1
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004368:	440b      	add	r3, r1
 800436a:	f843 2c1c 	str.w	r2, [r3, #-28]
                outputlimit -= 1;
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	3b01      	subs	r3, #1
 8004372:	623b      	str	r3, [r7, #32]
                break;
 8004374:	e05f      	b.n	8004436 <SCPI_ResultError+0x1b2>
            }
            result += writeData(context, data[i], step);
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800437e:	4413      	add	r3, r2
 8004380:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff fc4b 	bl	8003c24 <writeData>
 800438e:	4602      	mov	r2, r0
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	4413      	add	r3, r2
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
            result += writeData(context, "\"", 1);
 8004396:	2201      	movs	r2, #1
 8004398:	4947      	ldr	r1, [pc, #284]	; (80044b8 <SCPI_ResultError+0x234>)
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff fc42 	bl	8003c24 <writeData>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	4413      	add	r3, r2
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
            len[i] -= step;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043b0:	4413      	add	r3, r2
 80043b2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	1ad2      	subs	r2, r2, r3
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80043c2:	440b      	add	r3, r1
 80043c4:	f843 2c1c 	str.w	r2, [r3, #-28]
            outputlimit -= step + 1;
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	623b      	str	r3, [r7, #32]
            data[i] = quote + 1;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80043de:	440b      	add	r3, r1
 80043e0:	f843 2c18 	str.w	r2, [r3, #-24]
            if (len[i] > outputlimit) {
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043ec:	4413      	add	r3, r2
 80043ee:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80043f2:	6a3a      	ldr	r2, [r7, #32]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d207      	bcs.n	8004408 <SCPI_ResultError+0x184>
                len[i] = outputlimit;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004400:	4413      	add	r3, r2
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	f843 2c1c 	str.w	r2, [r3, #-28]
        while ((quote = strnpbrk(data[i], len[i], "\""))) {
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004410:	4413      	add	r3, r2
 8004412:	f853 0c18 	ldr.w	r0, [r3, #-24]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800441e:	4413      	add	r3, r2
 8004420:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004424:	4a24      	ldr	r2, [pc, #144]	; (80044b8 <SCPI_ResultError+0x234>)
 8004426:	4619      	mov	r1, r3
 8004428:	f000 fb4e 	bl	8004ac8 <strnpbrk>
 800442c:	6178      	str	r0, [r7, #20]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f47f af7e 	bne.w	8004332 <SCPI_ResultError+0xae>
            }
        }

        result += writeData(context, data[i], len[i]);
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800443e:	4413      	add	r3, r2
 8004440:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800444c:	4413      	add	r3, r2
 800444e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004452:	461a      	mov	r2, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fbe5 	bl	8003c24 <writeData>
 800445a:	4602      	mov	r2, r0
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	4413      	add	r3, r2
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
        outputlimit -= len[i];
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800446a:	4413      	add	r3, r2
 800446c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	623b      	str	r3, [r7, #32]
    for (i = 0; (i < SCPIDEFINE_DESCRIPTION_MAX_PARTS) && data[i] && outputlimit; i++) {
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3301      	adds	r3, #1
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <SCPI_ResultError+0x218>
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800448a:	4413      	add	r3, r2
 800448c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <SCPI_ResultError+0x218>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f47f af2b 	bne.w	80042f2 <SCPI_ResultError+0x6e>
    }
    result += writeData(context, "\"", 1);
 800449c:	2201      	movs	r2, #1
 800449e:	4906      	ldr	r1, [pc, #24]	; (80044b8 <SCPI_ResultError+0x234>)
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fbbf 	bl	8003c24 <writeData>
 80044a6:	4602      	mov	r2, r0
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	4413      	add	r3, r2
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24

    return result;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3728      	adds	r7, #40	; 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	0800690c 	.word	0x0800690c

080044bc <invalidateToken>:
/**
 * Invalidate token
 * @param token
 * @param ptr
 */
static void invalidateToken(scpi_token_t * token, char * ptr) {
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
    token->len = 0;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
    token->ptr = ptr;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	605a      	str	r2, [r3, #4]
    token->type = SCPI_TOKEN_UNKNOWN;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	221a      	movs	r2, #26
 80044d6:	701a      	strb	r2, [r3, #0]
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr
	...

080044e4 <SCPI_Parameter>:
 * @param context
 * @param parameter
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_Parameter(scpi_t * context, scpi_parameter_t * parameter, scpi_bool_t mandatory) {
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	71fb      	strb	r3, [r7, #7]
    lex_state_t * state;

    if (!parameter) {
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <SCPI_Parameter+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 80044f8:	4939      	ldr	r1, [pc, #228]	; (80045e0 <SCPI_Parameter+0xfc>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7fd feb4 	bl	8002268 <SCPI_ErrorPush>
        return FALSE;
 8004500:	2300      	movs	r3, #0
 8004502:	e069      	b.n	80045d8 <SCPI_Parameter+0xf4>
    }

    invalidateToken(parameter, NULL);
 8004504:	2100      	movs	r1, #0
 8004506:	68b8      	ldr	r0, [r7, #8]
 8004508:	f7ff ffd8 	bl	80044bc <invalidateToken>

    state = &context->param_list.lex_state;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3314      	adds	r3, #20
 8004510:	617b      	str	r3, [r7, #20]

    if (state->pos >= (state->buffer + state->len)) {
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6979      	ldr	r1, [r7, #20]
 800451c:	6889      	ldr	r1, [r1, #8]
 800451e:	440b      	add	r3, r1
 8004520:	429a      	cmp	r2, r3
 8004522:	d30d      	bcc.n	8004540 <SCPI_Parameter+0x5c>
        if (mandatory) {
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <SCPI_Parameter+0x52>
            SCPI_ErrorPush(context, SCPI_ERROR_MISSING_PARAMETER);
 800452a:	f06f 016c 	mvn.w	r1, #108	; 0x6c
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7fd fe9a 	bl	8002268 <SCPI_ErrorPush>
 8004534:	e002      	b.n	800453c <SCPI_Parameter+0x58>
        } else {
            parameter->type = SCPI_TOKEN_PROGRAM_MNEMONIC; /* TODO: select something different */
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2209      	movs	r2, #9
 800453a:	701a      	strb	r2, [r3, #0]
        }
        return FALSE;
 800453c:	2300      	movs	r3, #0
 800453e:	e04b      	b.n	80045d8 <SCPI_Parameter+0xf4>
    }
    if (context->input_count != 0) {
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004544:	2b00      	cmp	r3, #0
 8004546:	d012      	beq.n	800456e <SCPI_Parameter+0x8a>
        scpiLex_Comma(state, parameter);
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7ff fabc 	bl	8003ac8 <scpiLex_Comma>
        if (parameter->type != SCPI_TOKEN_COMMA) {
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <SCPI_Parameter+0x8a>
            invalidateToken(parameter, NULL);
 8004558:	2100      	movs	r1, #0
 800455a:	68b8      	ldr	r0, [r7, #8]
 800455c:	f7ff ffae 	bl	80044bc <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_SEPARATOR);
 8004560:	f06f 0166 	mvn.w	r1, #102	; 0x66
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7fd fe7f 	bl	8002268 <SCPI_ErrorPush>
            return FALSE;
 800456a:	2300      	movs	r3, #0
 800456c:	e034      	b.n	80045d8 <SCPI_Parameter+0xf4>
        }
    }

    context->input_count++;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	635a      	str	r2, [r3, #52]	; 0x34

    scpiParser_parseProgramData(&context->param_list.lex_state, parameter);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3314      	adds	r3, #20
 800457c:	68b9      	ldr	r1, [r7, #8]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f92c 	bl	80047dc <scpiParser_parseProgramData>

    switch (parameter->type) {
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	3b06      	subs	r3, #6
 800458a:	2b0a      	cmp	r3, #10
 800458c:	d81a      	bhi.n	80045c4 <SCPI_Parameter+0xe0>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <SCPI_Parameter+0xb0>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c1 	.word	0x080045c1
 80045a4:	080045c1 	.word	0x080045c1
 80045a8:	080045c1 	.word	0x080045c1
 80045ac:	080045c5 	.word	0x080045c5
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045c1 	.word	0x080045c1
 80045b8:	080045c1 	.word	0x080045c1
 80045bc:	080045c1 	.word	0x080045c1
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
        case SCPI_TOKEN_ARBITRARY_BLOCK_PROGRAM_DATA:
        case SCPI_TOKEN_SINGLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_DOUBLE_QUOTE_PROGRAM_DATA:
        case SCPI_TOKEN_PROGRAM_EXPRESSION:
            return TRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e009      	b.n	80045d8 <SCPI_Parameter+0xf4>
        default:
            invalidateToken(parameter, NULL);
 80045c4:	2100      	movs	r1, #0
 80045c6:	68b8      	ldr	r0, [r7, #8]
 80045c8:	f7ff ff78 	bl	80044bc <invalidateToken>
            SCPI_ErrorPush(context, SCPI_ERROR_INVALID_STRING_DATA);
 80045cc:	f06f 0196 	mvn.w	r1, #150	; 0x96
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7fd fe49 	bl	8002268 <SCPI_ErrorPush>
            return FALSE;
 80045d6:	2300      	movs	r3, #0
    }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	fffffeca 	.word	0xfffffeca

080045e4 <SCPI_ParamIsNumber>:
 * Detect if parameter is number
 * @param parameter
 * @param suffixAllowed
 * @return
 */
scpi_bool_t SCPI_ParamIsNumber(scpi_parameter_t * parameter, scpi_bool_t suffixAllowed) {
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	70fb      	strb	r3, [r7, #3]
    switch (parameter->type) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	3b06      	subs	r3, #6
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d812      	bhi.n	8004620 <SCPI_ParamIsNumber+0x3c>
 80045fa:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <SCPI_ParamIsNumber+0x1c>)
 80045fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004600:	08004619 	.word	0x08004619
 8004604:	08004619 	.word	0x08004619
 8004608:	08004619 	.word	0x08004619
 800460c:	08004621 	.word	0x08004621
 8004610:	08004619 	.word	0x08004619
 8004614:	0800461d 	.word	0x0800461d
        case SCPI_TOKEN_HEXNUM:
        case SCPI_TOKEN_OCTNUM:
        case SCPI_TOKEN_BINNUM:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
            return TRUE;
 8004618:	2301      	movs	r3, #1
 800461a:	e002      	b.n	8004622 <SCPI_ParamIsNumber+0x3e>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            return suffixAllowed;
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	e000      	b.n	8004622 <SCPI_ParamIsNumber+0x3e>
        default:
            return FALSE;
 8004620:	2300      	movs	r3, #0
    }
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <ParamSignToUInt32>:
 * @param parameter
 * @param value result
 * @param sign
 * @return TRUE if succesful
 */
static scpi_bool_t ParamSignToUInt32(scpi_t * context, scpi_parameter_t * parameter, uint32_t * value, scpi_bool_t sign) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	70fb      	strb	r3, [r7, #3]

    if (!value) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <ParamSignToUInt32+0x20>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8004640:	4933      	ldr	r1, [pc, #204]	; (8004710 <ParamSignToUInt32+0xe4>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7fd fe10 	bl	8002268 <SCPI_ErrorPush>
        return FALSE;
 8004648:	2300      	movs	r3, #0
 800464a:	e05d      	b.n	8004708 <ParamSignToUInt32+0xdc>
    }

    switch (parameter->type) {
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	3b06      	subs	r3, #6
 8004652:	2b05      	cmp	r3, #5
 8004654:	d857      	bhi.n	8004706 <ParamSignToUInt32+0xda>
 8004656:	a201      	add	r2, pc, #4	; (adr r2, 800465c <ParamSignToUInt32+0x30>)
 8004658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465c:	08004675 	.word	0x08004675
 8004660:	08004691 	.word	0x08004691
 8004664:	080046ad 	.word	0x080046ad
 8004668:	08004707 	.word	0x08004707
 800466c:	080046c9 	.word	0x080046c9
 8004670:	080046c9 	.word	0x080046c9
        case SCPI_TOKEN_HEXNUM:
            return strBaseToUInt32(parameter->ptr, value, 16) > 0 ? TRUE : FALSE;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2210      	movs	r2, #16
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fb0d 	bl	8004c9c <strBaseToUInt32>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf14      	ite	ne
 8004688:	2301      	movne	r3, #1
 800468a:	2300      	moveq	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e03b      	b.n	8004708 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_OCTNUM:
            return strBaseToUInt32(parameter->ptr, value, 8) > 0 ? TRUE : FALSE;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2208      	movs	r2, #8
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 faff 	bl	8004c9c <strBaseToUInt32>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf14      	ite	ne
 80046a4:	2301      	movne	r3, #1
 80046a6:	2300      	moveq	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e02d      	b.n	8004708 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_BINNUM:
            return strBaseToUInt32(parameter->ptr, value, 2) > 0 ? TRUE : FALSE;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2202      	movs	r2, #2
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 faf1 	bl	8004c9c <strBaseToUInt32>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf14      	ite	ne
 80046c0:	2301      	movne	r3, #1
 80046c2:	2300      	moveq	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	e01f      	b.n	8004708 <ParamSignToUInt32+0xdc>
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA:
        case SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX:
            if (sign) {
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00d      	beq.n	80046ea <ParamSignToUInt32+0xbe>
                return strBaseToInt32(parameter->ptr, (int32_t *) value, 10) > 0 ? TRUE : FALSE;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	220a      	movs	r2, #10
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fac6 	bl	8004c68 <strBaseToInt32>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	bf14      	ite	ne
 80046e2:	2301      	movne	r3, #1
 80046e4:	2300      	moveq	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	e00e      	b.n	8004708 <ParamSignToUInt32+0xdc>
            } else {
                return strBaseToUInt32(parameter->ptr, value, 10) > 0 ? TRUE : FALSE;
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	220a      	movs	r2, #10
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fad2 	bl	8004c9c <strBaseToUInt32>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	e000      	b.n	8004708 <ParamSignToUInt32+0xdc>
            }
        default:
            return FALSE;
 8004706:	2300      	movs	r3, #0
    }
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	fffffeca 	.word	0xfffffeca

08004714 <ParamSignUInt32>:
 * @param value
 * @param mandatory
 * @param sign
 * @return
 */
static scpi_bool_t ParamSignUInt32(scpi_t * context, uint32_t * value, scpi_bool_t mandatory, scpi_bool_t sign) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	460b      	mov	r3, r1
 8004724:	71fb      	strb	r3, [r7, #7]
 8004726:	4613      	mov	r3, r2
 8004728:	71bb      	strb	r3, [r7, #6]
    scpi_bool_t result;
    scpi_parameter_t param;

    if (!value) {
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <ParamSignUInt32+0x28>
        SCPI_ErrorPush(context, SCPI_ERROR_SYSTEM_ERROR);
 8004730:	4920      	ldr	r1, [pc, #128]	; (80047b4 <ParamSignUInt32+0xa0>)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7fd fd98 	bl	8002268 <SCPI_ErrorPush>
        return FALSE;
 8004738:	2300      	movs	r3, #0
 800473a:	e037      	b.n	80047ac <ParamSignUInt32+0x98>
    }

    result = SCPI_Parameter(context, &param, mandatory);
 800473c:	79fa      	ldrb	r2, [r7, #7]
 800473e:	f107 0310 	add.w	r3, r7, #16
 8004742:	4619      	mov	r1, r3
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff fecd 	bl	80044e4 <SCPI_Parameter>
 800474a:	4603      	mov	r3, r0
 800474c:	77fb      	strb	r3, [r7, #31]
    if (result) {
 800474e:	7ffb      	ldrb	r3, [r7, #31]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d02a      	beq.n	80047aa <ParamSignUInt32+0x96>
        if (SCPI_ParamIsNumber(&param, FALSE)) {
 8004754:	f107 0310 	add.w	r3, r7, #16
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ff42 	bl	80045e4 <SCPI_ParamIsNumber>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <ParamSignUInt32+0x66>
            result = ParamSignToUInt32(context, &param, value, sign);
 8004766:	79bb      	ldrb	r3, [r7, #6]
 8004768:	f107 0110 	add.w	r1, r7, #16
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f7ff ff5c 	bl	800462c <ParamSignToUInt32>
 8004774:	4603      	mov	r3, r0
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e017      	b.n	80047aa <ParamSignUInt32+0x96>
        } else if (SCPI_ParamIsNumber(&param, TRUE)) {
 800477a:	f107 0310 	add.w	r3, r7, #16
 800477e:	2101      	movs	r1, #1
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff2f 	bl	80045e4 <SCPI_ParamIsNumber>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d007      	beq.n	800479c <ParamSignUInt32+0x88>
            SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
 800478c:	f06f 0189 	mvn.w	r1, #137	; 0x89
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f7fd fd69 	bl	8002268 <SCPI_ErrorPush>
            result = FALSE;
 8004796:	2300      	movs	r3, #0
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e006      	b.n	80047aa <ParamSignUInt32+0x96>
        } else {
            SCPI_ErrorPush(context, SCPI_ERROR_DATA_TYPE_ERROR);
 800479c:	f06f 0167 	mvn.w	r1, #103	; 0x67
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7fd fd61 	bl	8002268 <SCPI_ErrorPush>
            result = FALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	77fb      	strb	r3, [r7, #31]
        }
    }
    return result;
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	fffffeca 	.word	0xfffffeca

080047b8 <SCPI_ParamInt32>:
 * @param context
 * @param value
 * @param mandatory
 * @return
 */
scpi_bool_t SCPI_ParamInt32(scpi_t * context, int32_t * value, scpi_bool_t mandatory) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
    return ParamSignUInt32(context, (uint32_t *) value, mandatory, TRUE);
 80047c6:	79fa      	ldrb	r2, [r7, #7]
 80047c8:	2301      	movs	r3, #1
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff ffa1 	bl	8004714 <ParamSignUInt32>
 80047d2:	4603      	mov	r3, r0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <scpiParser_parseProgramData>:
 * Parse one parameter and detect type
 * @param state
 * @param token
 * @return
 */
int scpiParser_parseProgramData(lex_state_t * state, scpi_token_t * token) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	; 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
    scpi_token_t tmp;
    int result = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
    int wsLen;
    int suffixLen;
    int realLen = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	623b      	str	r3, [r7, #32]
    realLen += scpiLex_WhiteSpace(state, &tmp);
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	4619      	mov	r1, r3
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fe fbe9 	bl	8002fcc <scpiLex_WhiteSpace>
 80047fa:	4602      	mov	r2, r0
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	4413      	add	r3, r2
 8004800:	623b      	str	r3, [r7, #32]

    if (result == 0) result = scpiLex_NondecimalNumericData(state, token);
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d104      	bne.n	8004812 <scpiParser_parseProgramData+0x36>
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fe fe62 	bl	80034d4 <scpiLex_NondecimalNumericData>
 8004810:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_CharacterProgramData(state, token);
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <scpiParser_parseProgramData+0x46>
 8004818:	6839      	ldr	r1, [r7, #0]
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe fcc0 	bl	80031a0 <scpiLex_CharacterProgramData>
 8004820:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) {
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	2b00      	cmp	r3, #0
 8004826:	d126      	bne.n	8004876 <scpiParser_parseProgramData+0x9a>
        result = scpiLex_DecimalNumericProgramData(state, token);
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fe fd5e 	bl	80032ec <scpiLex_DecimalNumericProgramData>
 8004830:	6278      	str	r0, [r7, #36]	; 0x24
        if (result != 0) {
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01e      	beq.n	8004876 <scpiParser_parseProgramData+0x9a>
            wsLen = scpiLex_WhiteSpace(state, &tmp);
 8004838:	f107 030c 	add.w	r3, r7, #12
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fe fbc4 	bl	8002fcc <scpiLex_WhiteSpace>
 8004844:	61f8      	str	r0, [r7, #28]
            suffixLen = scpiLex_SuffixProgramData(state, &tmp);
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fe fd89 	bl	8003364 <scpiLex_SuffixProgramData>
 8004852:	61b8      	str	r0, [r7, #24]
            if (suffixLen > 0) {
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	2b00      	cmp	r3, #0
 8004858:	dd0d      	ble.n	8004876 <scpiParser_parseProgramData+0x9a>
                token->len += wsLen + suffixLen;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	69f9      	ldr	r1, [r7, #28]
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	440b      	add	r3, r1
 8004864:	441a      	add	r2, r3
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	609a      	str	r2, [r3, #8]
                token->type = SCPI_TOKEN_DECIMAL_NUMERIC_PROGRAM_DATA_WITH_SUFFIX;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	220b      	movs	r2, #11
 800486e:	701a      	strb	r2, [r3, #0]
                result = token->len;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    if (result == 0) result = scpiLex_StringProgramData(state, token);
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <scpiParser_parseProgramData+0xaa>
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fe ff24 	bl	80036cc <scpiLex_StringProgramData>
 8004884:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ArbitraryBlockProgramData(state, token);
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <scpiParser_parseProgramData+0xba>
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fe ffc5 	bl	800381e <scpiLex_ArbitraryBlockProgramData>
 8004894:	6278      	str	r0, [r7, #36]	; 0x24
    if (result == 0) result = scpiLex_ProgramExpression(state, token);
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <scpiParser_parseProgramData+0xca>
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff f8be 	bl	8003a20 <scpiLex_ProgramExpression>
 80048a4:	6278      	str	r0, [r7, #36]	; 0x24

    realLen += scpiLex_WhiteSpace(state, &tmp);
 80048a6:	f107 030c 	add.w	r3, r7, #12
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fe fb8d 	bl	8002fcc <scpiLex_WhiteSpace>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	4413      	add	r3, r2
 80048b8:	623b      	str	r3, [r7, #32]

    return result + realLen;
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	4413      	add	r3, r2
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3728      	adds	r7, #40	; 0x28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <scpiParser_parseAllProgramData>:
 * @param state
 * @param token
 * @param numberOfParameters
 * @return
 */
int scpiParser_parseAllProgramData(lex_state_t * state, scpi_token_t * token, int * numberOfParameters) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]

    int result;
    scpi_token_t tmp;
    int paramCount = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	623b      	str	r3, [r7, #32]

    token->len = -1;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f04f 32ff 	mov.w	r2, #4294967295
 80048de:	609a      	str	r2, [r3, #8]
    token->type = SCPI_TOKEN_ALL_PROGRAM_DATA;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2218      	movs	r2, #24
 80048e4:	701a      	strb	r2, [r3, #0]
    token->ptr = state->pos;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	605a      	str	r2, [r3, #4]


    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 80048ee:	2301      	movs	r3, #1
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
 80048f2:	e037      	b.n	8004964 <scpiParser_parseAllProgramData+0x9c>
        token->len += result;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	441a      	add	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	609a      	str	r2, [r3, #8]

        if (result == 0) {
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d109      	bne.n	800491a <scpiParser_parseAllProgramData+0x52>
            token->type = SCPI_TOKEN_UNKNOWN;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	221a      	movs	r2, #26
 800490a:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295
 8004916:	623b      	str	r3, [r7, #32]
            break;
 8004918:	e027      	b.n	800496a <scpiParser_parseAllProgramData+0xa2>
        }

        result = scpiParser_parseProgramData(state, &tmp);
 800491a:	f107 0314 	add.w	r3, r7, #20
 800491e:	4619      	mov	r1, r3
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f7ff ff5b 	bl	80047dc <scpiParser_parseProgramData>
 8004926:	6278      	str	r0, [r7, #36]	; 0x24
        if (tmp.type != SCPI_TOKEN_UNKNOWN) {
 8004928:	7d3b      	ldrb	r3, [r7, #20]
 800492a:	2b1a      	cmp	r3, #26
 800492c:	d006      	beq.n	800493c <scpiParser_parseAllProgramData+0x74>
            token->len += result;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	441a      	add	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	609a      	str	r2, [r3, #8]
 800493a:	e009      	b.n	8004950 <scpiParser_parseAllProgramData+0x88>
        } else {
            token->type = SCPI_TOKEN_UNKNOWN;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	221a      	movs	r2, #26
 8004940:	701a      	strb	r2, [r3, #0]
            token->len = 0;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2200      	movs	r2, #0
 8004946:	609a      	str	r2, [r3, #8]
            paramCount = -1;
 8004948:	f04f 33ff 	mov.w	r3, #4294967295
 800494c:	623b      	str	r3, [r7, #32]
            break;
 800494e:	e00c      	b.n	800496a <scpiParser_parseAllProgramData+0xa2>
        }
        paramCount++;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	3301      	adds	r3, #1
 8004954:	623b      	str	r3, [r7, #32]
    for (result = 1; result != 0; result = scpiLex_Comma(state, &tmp)) {
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	4619      	mov	r1, r3
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff f8b3 	bl	8003ac8 <scpiLex_Comma>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1c4      	bne.n	80048f4 <scpiParser_parseAllProgramData+0x2c>
    }

    if (token->len == -1) {
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d102      	bne.n	800497a <scpiParser_parseAllProgramData+0xb2>
        token->len = 0;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
    }

    if (numberOfParameters != NULL) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <scpiParser_parseAllProgramData+0xbe>
        *numberOfParameters = paramCount;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a3a      	ldr	r2, [r7, #32]
 8004984:	601a      	str	r2, [r3, #0]
    }
    return token->len;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	689b      	ldr	r3, [r3, #8]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3728      	adds	r7, #40	; 0x28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <scpiParser_detectProgramMessageUnit>:
 * @param state
 * @param buffer
 * @param len
 * @return
 */
int scpiParser_detectProgramMessageUnit(scpi_parser_state_t * state, char * buffer, int len) {
 8004992:	b580      	push	{r7, lr}
 8004994:	b08c      	sub	sp, #48	; 0x30
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
    lex_state_t lex_state;
    scpi_token_t tmp;
    int result = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    lex_state.buffer = lex_state.pos = buffer;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	623b      	str	r3, [r7, #32]
    lex_state.len = len;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
    state->numberOfParameters = 0;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	619a      	str	r2, [r3, #24]

    /* ignore whitespace at the begginig */
    scpiLex_WhiteSpace(&lex_state, &tmp);
 80049b4:	f107 0214 	add.w	r2, r7, #20
 80049b8:	f107 0320 	add.w	r3, r7, #32
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe fb04 	bl	8002fcc <scpiLex_WhiteSpace>

    if (scpiLex_ProgramHeader(&lex_state, &state->programHeader) >= 0) {
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	f107 0320 	add.w	r3, r7, #32
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fb85 	bl	80030dc <scpiLex_ProgramHeader>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db1e      	blt.n	8004a16 <scpiParser_detectProgramMessageUnit+0x84>
        if (scpiLex_WhiteSpace(&lex_state, &tmp) > 0) {
 80049d8:	f107 0214 	add.w	r2, r7, #20
 80049dc:	f107 0320 	add.w	r3, r7, #32
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe faf2 	bl	8002fcc <scpiLex_WhiteSpace>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	dd0b      	ble.n	8004a06 <scpiParser_detectProgramMessageUnit+0x74>
            scpiParser_parseAllProgramData(&lex_state, &state->programData, &state->numberOfParameters);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f103 010c 	add.w	r1, r3, #12
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f103 0218 	add.w	r2, r3, #24
 80049fa:	f107 0320 	add.w	r3, r7, #32
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff62 	bl	80048c8 <scpiParser_parseAllProgramData>
 8004a04:	e014      	b.n	8004a30 <scpiParser_detectProgramMessageUnit+0x9e>
        } else {
            invalidateToken(&state->programData, lex_state.pos);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fd54 	bl	80044bc <invalidateToken>
 8004a14:	e00c      	b.n	8004a30 <scpiParser_detectProgramMessageUnit+0x9e>
        }
    } else {
        invalidateToken(&state->programHeader, lex_state.buffer);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fd4d 	bl	80044bc <invalidateToken>
        invalidateToken(&state->programData, lex_state.buffer);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	330c      	adds	r3, #12
 8004a26:	6a3a      	ldr	r2, [r7, #32]
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fd46 	bl	80044bc <invalidateToken>
    }

    if (result == 0) result = scpiLex_NewLine(&lex_state, &tmp);
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d108      	bne.n	8004a48 <scpiParser_detectProgramMessageUnit+0xb6>
 8004a36:	f107 0214 	add.w	r2, r7, #20
 8004a3a:	f107 0320 	add.w	r3, r7, #32
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff f887 	bl	8003b54 <scpiLex_NewLine>
 8004a46:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (result == 0) result = scpiLex_Semicolon(&lex_state, &tmp);
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d108      	bne.n	8004a60 <scpiParser_detectProgramMessageUnit+0xce>
 8004a4e:	f107 0214 	add.w	r2, r7, #20
 8004a52:	f107 0320 	add.w	r3, r7, #32
 8004a56:	4611      	mov	r1, r2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff f858 	bl	8003b0e <scpiLex_Semicolon>
 8004a5e:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (!scpiLex_IsEos(&lex_state) && (result == 0)) {
 8004a60:	f107 0320 	add.w	r3, r7, #32
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe f8b4 	bl	8002bd2 <scpiLex_IsEos>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d112      	bne.n	8004a96 <scpiParser_detectProgramMessageUnit+0x104>
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <scpiParser_detectProgramMessageUnit+0x104>
        lex_state.pos++;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	3301      	adds	r3, #1
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24

        state->programHeader.len = 1;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	609a      	str	r2, [r3, #8]
        state->programHeader.type = SCPI_TOKEN_INVALID;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2219      	movs	r2, #25
 8004a86:	701a      	strb	r2, [r3, #0]

        invalidateToken(&state->programData, lex_state.buffer);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7ff fd13 	bl	80044bc <invalidateToken>
    }

    if (SCPI_TOKEN_SEMICOLON == tmp.type) {
 8004a96:	7d3b      	ldrb	r3, [r7, #20]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d103      	bne.n	8004aa4 <scpiParser_detectProgramMessageUnit+0x112>
        state->termination = SCPI_MESSAGE_TERMINATION_SEMICOLON;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	771a      	strb	r2, [r3, #28]
 8004aa2:	e009      	b.n	8004ab8 <scpiParser_detectProgramMessageUnit+0x126>
    } else if (SCPI_TOKEN_NL == tmp.type) {
 8004aa4:	7d3b      	ldrb	r3, [r7, #20]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d103      	bne.n	8004ab2 <scpiParser_detectProgramMessageUnit+0x120>
        state->termination = SCPI_MESSAGE_TERMINATION_NL;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	771a      	strb	r2, [r3, #28]
 8004ab0:	e002      	b.n	8004ab8 <scpiParser_detectProgramMessageUnit+0x126>
    } else {
        state->termination = SCPI_MESSAGE_TERMINATION_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }

    return lex_state.pos - lex_state.buffer;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	461a      	mov	r2, r3
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	1ad3      	subs	r3, r2, r3
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3730      	adds	r7, #48	; 0x30
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <strnpbrk>:
 * @param str
 * @param size
 * @param set
 * @return
 */
char * strnpbrk(const char *str, size_t size, const char *set) {
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
    const char *scanp;
    long c, sc;
    const char * strend = str + size;
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4413      	add	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]

    while ((strend != str) && ((c = *str++) != 0)) {
 8004adc:	e011      	b.n	8004b02 <strnpbrk+0x3a>
        for (scanp = set; (sc = *scanp++) != '\0';)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e006      	b.n	8004af2 <strnpbrk+0x2a>
            if (sc == c)
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d102      	bne.n	8004af2 <strnpbrk+0x2a>
                return ((char *) (str - 1));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	e014      	b.n	8004b1c <strnpbrk+0x54>
        for (scanp = set; (sc = *scanp++) != '\0';)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	61fa      	str	r2, [r7, #28]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <strnpbrk+0x1c>
    while ((strend != str) && ((c = *str++) != 0)) {
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d007      	beq.n	8004b1a <strnpbrk+0x52>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	60fa      	str	r2, [r7, #12]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e1      	bne.n	8004ade <strnpbrk+0x16>
    }
    return (NULL);
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3724      	adds	r7, #36	; 0x24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr
	...

08004b28 <UInt32ToStrBaseSign>:
 * @param len   string buffer length
 * @param base  output base
 * @param sign
 * @return number of bytes written to str (without '\0')
 */
size_t UInt32ToStrBaseSign(uint32_t val, char * str, size_t len, int8_t base, scpi_bool_t sign) {
 8004b28:	b4b0      	push	{r4, r5, r7}
 8004b2a:	b08f      	sub	sp, #60	; 0x3c
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	70fb      	strb	r3, [r7, #3]
    const char digits[] = "0123456789ABCDEF";
 8004b36:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <UInt32ToStrBaseSign+0x138>)
 8004b38:	f107 0414 	add.w	r4, r7, #20
 8004b3c:	461d      	mov	r5, r3
 8004b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b42:	682b      	ldr	r3, [r5, #0]
 8004b44:	7023      	strb	r3, [r4, #0]

#define ADD_CHAR(c) if (pos < len) str[pos++] = (c)
    uint32_t x = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
    int_fast8_t digit;
    size_t pos = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	633b      	str	r3, [r7, #48]	; 0x30
    uint32_t uval = val;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (uval == 0) {
 8004b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <UInt32ToStrBaseSign+0x48>
        ADD_CHAR('0');
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d26f      	bcs.n	8004c40 <UInt32ToStrBaseSign+0x118>
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	633a      	str	r2, [r7, #48]	; 0x30
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4413      	add	r3, r2
 8004b6a:	2230      	movs	r2, #48	; 0x30
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e067      	b.n	8004c40 <UInt32ToStrBaseSign+0x118>
    } else {

        switch (base) {
 8004b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d007      	beq.n	8004b88 <UInt32ToStrBaseSign+0x60>
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d00e      	beq.n	8004b9a <UInt32ToStrBaseSign+0x72>
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d107      	bne.n	8004b90 <UInt32ToStrBaseSign+0x68>
            case 2:
                x = 0x80000000L;
 8004b80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8004b86:	e00c      	b.n	8004ba2 <UInt32ToStrBaseSign+0x7a>
            case 8:
                x = 0x40000000L;
 8004b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8004b8e:	e008      	b.n	8004ba2 <UInt32ToStrBaseSign+0x7a>
            default:
            case 10:
                base = 10;
 8004b90:	230a      	movs	r3, #10
 8004b92:	70fb      	strb	r3, [r7, #3]
                x = 1000000000L;
 8004b94:	4b33      	ldr	r3, [pc, #204]	; (8004c64 <UInt32ToStrBaseSign+0x13c>)
 8004b96:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8004b98:	e003      	b.n	8004ba2 <UInt32ToStrBaseSign+0x7a>
            case 16:
                x = 0x10000000L;
 8004b9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
                break;
 8004ba0:	bf00      	nop
        }

        /* add sign for numbers in base 10 */
        if (sign && ((int32_t) val < 0) && (base == 10)) {
 8004ba2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01b      	beq.n	8004be2 <UInt32ToStrBaseSign+0xba>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da18      	bge.n	8004be2 <UInt32ToStrBaseSign+0xba>
 8004bb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bb4:	2b0a      	cmp	r3, #10
 8004bb6:	d114      	bne.n	8004be2 <UInt32ToStrBaseSign+0xba>
            uval = -val;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	425b      	negs	r3, r3
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
            ADD_CHAR('-');
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d20d      	bcs.n	8004be2 <UInt32ToStrBaseSign+0xba>
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	633a      	str	r2, [r7, #48]	; 0x30
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4413      	add	r3, r2
 8004bd0:	222d      	movs	r2, #45	; 0x2d
 8004bd2:	701a      	strb	r2, [r3, #0]
        }

        /* remove leading zeros */
        while ((uval / x) == 0) {
 8004bd4:	e005      	b.n	8004be2 <UInt32ToStrBaseSign+0xba>
            x /= base;
 8004bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
        while ((uval / x) == 0) {
 8004be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0f3      	beq.n	8004bd6 <UInt32ToStrBaseSign+0xae>
        }

        do {
            digit = (uint8_t) (uval / x);
 8004bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
            ADD_CHAR(digits[digit]);
 8004bfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d20a      	bcs.n	8004c18 <UInt32ToStrBaseSign+0xf0>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	633a      	str	r2, [r7, #48]	; 0x30
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f107 0114 	add.w	r1, r7, #20
 8004c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c12:	440a      	add	r2, r1
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	701a      	strb	r2, [r3, #0]
            uval -= digit * x;
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
            x /= base;
 8004c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
        } while (x && (pos < len));
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <UInt32ToStrBaseSign+0x118>
 8004c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d3d6      	bcc.n	8004bee <UInt32ToStrBaseSign+0xc6>
    }

    if (pos < len) str[pos] = 0;
 8004c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d204      	bcs.n	8004c52 <UInt32ToStrBaseSign+0x12a>
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	4413      	add	r3, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	701a      	strb	r2, [r3, #0]
    return pos;
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
#undef ADD_CHAR
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	373c      	adds	r7, #60	; 0x3c
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bcb0      	pop	{r4, r5, r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	080069d4 	.word	0x080069d4
 8004c64:	3b9aca00 	.word	0x3b9aca00

08004c68 <strBaseToInt32>:
 * Converts string to signed 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToInt32(const char * str, int32_t * val, int8_t base) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtol(str, &endptr, base);
 8004c76:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004c7a:	f107 0314 	add.w	r3, r7, #20
 8004c7e:	4619      	mov	r1, r3
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fd7d 	bl	8005780 <strtol>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	601a      	str	r2, [r3, #0]
    return endptr - str;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <strBaseToUInt32>:
 * Converts string to unsigned 32bit integer representation
 * @param str   string value
 * @param val   32bit integer result
 * @return      number of bytes used in string
 */
size_t strBaseToUInt32(const char * str, uint32_t * val, int8_t base) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	71fb      	strb	r3, [r7, #7]
    char * endptr;
    *val = strtoul(str, &endptr, base);
 8004caa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004cae:	f107 0314 	add.w	r3, r7, #20
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fdf3 	bl	80058a0 <strtoul>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	601a      	str	r2, [r3, #0]
    return endptr - str;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1ad3      	subs	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <compareStr>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if len1==len2 and "len" characters of both strings are equal
 */
scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
    if (len1 != len2) {
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d001      	beq.n	8004cea <compareStr+0x1a>
        return FALSE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	e00a      	b.n	8004d00 <compareStr+0x30>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len2) == 0) {
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fc9a 	bl	8005628 <strncasecmp>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <compareStr+0x2e>
        return TRUE;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <compareStr+0x30>
    }

    return FALSE;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <compareStrAndNum>:
 * @param len1
 * @param str2
 * @param len2
 * @return TRUE if strings match
 */
scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2, int32_t * num) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
    scpi_bool_t result = FALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	77fb      	strb	r3, [r7, #31]
    size_t i;

    if (len2 < len1) {
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d201      	bcs.n	8004d26 <compareStrAndNum+0x1e>
        return FALSE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	e044      	b.n	8004db0 <compareStrAndNum+0xa8>
    }

    if (SCPIDEFINE_strncasecmp(str1, str2, len1) == 0) {
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 fc7c 	bl	8005628 <strncasecmp>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d13b      	bne.n	8004dae <compareStrAndNum+0xa6>
        result = TRUE;
 8004d36:	2301      	movs	r3, #1
 8004d38:	77fb      	strb	r3, [r7, #31]

        if (num) {
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d01b      	beq.n	8004d78 <compareStrAndNum+0x70>
            if (len1 == len2) {
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d032      	beq.n	8004dae <compareStrAndNum+0xa6>
                /* *num = 1; */
            } else {
                int32_t tmpNum;
                i = len1 + strBaseToInt32(str2 + len1, &tmpNum, 10);
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f107 0114 	add.w	r1, r7, #20
 8004d52:	220a      	movs	r2, #10
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff87 	bl	8004c68 <strBaseToInt32>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4413      	add	r3, r2
 8004d60:	61bb      	str	r3, [r7, #24]
                if (i != len2) {
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d002      	beq.n	8004d70 <compareStrAndNum+0x68>
                    result = FALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	77fb      	strb	r3, [r7, #31]
 8004d6e:	e01e      	b.n	8004dae <compareStrAndNum+0xa6>
                } else {
                    *num = tmpNum;
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e01a      	b.n	8004dae <compareStrAndNum+0xa6>
                }
            }
        } else {
            for (i = len1; i < len2; i++) {
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	e013      	b.n	8004da6 <compareStrAndNum+0x9e>
                if (!isdigit((int) str2[i])) {
 8004d7e:	f000 fb8b 	bl	8005498 <__locale_ctype_ptr>
 8004d82:	4601      	mov	r1, r0
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	4413      	add	r3, r2
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	440b      	add	r3, r1
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <compareStrAndNum+0x98>
                    result = FALSE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	77fb      	strb	r3, [r7, #31]
                    break;
 8004d9e:	e006      	b.n	8004dae <compareStrAndNum+0xa6>
            for (i = len1; i < len2; i++) {
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	3301      	adds	r3, #1
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d3e7      	bcc.n	8004d7e <compareStrAndNum+0x76>
                }
            }
        }
    }

    return result;
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <patternSeparatorShortPos>:
 * search the first lowercase letter
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorShortPos(const char * pattern, size_t len) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
    size_t i;
    for (i = 0; (i < len) && pattern[i]; i++) {
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e012      	b.n	8004dee <patternSeparatorShortPos+0x36>
        if (islower((unsigned char) pattern[i])) {
 8004dc8:	f000 fb66 	bl	8005498 <__locale_ctype_ptr>
 8004dcc:	4601      	mov	r1, r0
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	440b      	add	r3, r1
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d101      	bne.n	8004de8 <patternSeparatorShortPos+0x30>
            return i;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	e00d      	b.n	8004e04 <patternSeparatorShortPos+0x4c>
    for (i = 0; (i < len) && pattern[i]; i++) {
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d205      	bcs.n	8004e02 <patternSeparatorShortPos+0x4a>
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e2      	bne.n	8004dc8 <patternSeparatorShortPos+0x10>
        }
    }
    return i;
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <patternSeparatorPos>:
 * Find pattern separator position
 * @param pattern
 * @param len - max search length
 * @return position of separator or len
 */
static size_t patternSeparatorPos(const char * pattern, size_t len) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]

    char * separator = strnpbrk(pattern, len, "?:[]");
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <patternSeparatorPos+0x30>)
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fe54 	bl	8004ac8 <strnpbrk>
 8004e20:	60f8      	str	r0, [r7, #12]
    if (separator == NULL) {
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d101      	bne.n	8004e2c <patternSeparatorPos+0x20>
        return len;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	e002      	b.n	8004e32 <patternSeparatorPos+0x26>
    } else {
        return separator - pattern;
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	1ad3      	subs	r3, r2, r3
    }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	080069f4 	.word	0x080069f4

08004e40 <cmdSeparatorPos>:
 * Find command separator position
 * @param cmd - input command
 * @param len - max search length
 * @return position of separator or len
 */
static size_t cmdSeparatorPos(const char * cmd, size_t len) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
    char * separator = strnpbrk(cmd, len, ":?");
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <cmdSeparatorPos+0x34>)
 8004e4c:	6839      	ldr	r1, [r7, #0]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fe3a 	bl	8004ac8 <strnpbrk>
 8004e54:	60b8      	str	r0, [r7, #8]
    size_t result;
    if (separator == NULL) {
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <cmdSeparatorPos+0x22>
        result = len;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e003      	b.n	8004e6a <cmdSeparatorPos+0x2a>
    } else {
        result = separator - cmd;
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	60fb      	str	r3, [r7, #12]
    }

    return result;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	080069fc 	.word	0x080069fc

08004e78 <matchPattern>:
 * @param pattern_len
 * @param str
 * @param str_len
 * @return
 */
scpi_bool_t matchPattern(const char * pattern, size_t pattern_len, const char * str, size_t str_len, int32_t * num) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	603b      	str	r3, [r7, #0]
    int pattern_sep_pos_short;

    if ((pattern_len > 0) && pattern[pattern_len - 1] == '#') {
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02c      	beq.n	8004ee6 <matchPattern+0x6e>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b23      	cmp	r3, #35	; 0x23
 8004e98:	d125      	bne.n	8004ee6 <matchPattern+0x6e>
        size_t new_pattern_len = pattern_len - 1;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, new_pattern_len);
 8004ea0:	6979      	ldr	r1, [r7, #20]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7ff ff88 	bl	8004db8 <patternSeparatorShortPos>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	613b      	str	r3, [r7, #16]

        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6979      	ldr	r1, [r7, #20]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7ff ff26 	bl	8004d08 <compareStrAndNum>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10a      	bne.n	8004ed8 <matchPattern+0x60>
                compareStrAndNum(pattern, pattern_sep_pos_short, str, str_len, num);
 8004ec2:	6939      	ldr	r1, [r7, #16]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff ff1b 	bl	8004d08 <compareStrAndNum>
 8004ed2:	4603      	mov	r3, r0
        return compareStrAndNum(pattern, new_pattern_len, str, str_len, num) ||
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <matchPattern+0x64>
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e000      	b.n	8004ede <matchPattern+0x66>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	e01d      	b.n	8004f22 <matchPattern+0xaa>
    } else {

        pattern_sep_pos_short = patternSeparatorShortPos(pattern, pattern_len);
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff ff65 	bl	8004db8 <patternSeparatorShortPos>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	613b      	str	r3, [r7, #16]

        return compareStr(pattern, pattern_len, str, str_len) ||
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff fee9 	bl	8004cd0 <compareStr>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d108      	bne.n	8004f16 <matchPattern+0x9e>
                compareStr(pattern, pattern_sep_pos_short, str, str_len);
 8004f04:	6939      	ldr	r1, [r7, #16]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff fee0 	bl	8004cd0 <compareStr>
 8004f10:	4603      	mov	r3, r0
        return compareStr(pattern, pattern_len, str, str_len) ||
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <matchPattern+0xa2>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e000      	b.n	8004f1c <matchPattern+0xa4>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	b2db      	uxtb	r3, r3
    }
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <matchCommand>:
 * @param pattern eg. [:MEASure]:VOLTage:DC?
 * @param cmd - command
 * @param len - max search length
 * @return TRUE if pattern matches, FALSE otherwise
 */
scpi_bool_t matchCommand(const char * pattern, const char * cmd, size_t len, int32_t *numbers, size_t numbers_len, int32_t default_value) {
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b090      	sub	sp, #64	; 0x40
 8004f2e:	af02      	add	r7, sp, #8
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	603b      	str	r3, [r7, #0]
#define SKIP_PATTERN(n) do {pattern_ptr += (n);  pattern_len -= (n);} while(0)
#define SKIP_CMD(n) do {cmd_ptr += (n);  cmd_len -= (n);} while(0)

    scpi_bool_t result = FALSE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int brackets = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	633b      	str	r3, [r7, #48]	; 0x30
    int cmd_sep_pos = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]

    size_t numbers_idx = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t *number_ptr = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28

    const char * pattern_ptr = pattern;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
    int pattern_len = strlen(pattern);
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f7fb f8fa 	bl	800014c <strlen>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	623b      	str	r3, [r7, #32]

    const char * cmd_ptr = cmd;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61fb      	str	r3, [r7, #28]
    size_t cmd_len = SCPIDEFINE_strnlen(cmd, len);
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	68b8      	ldr	r0, [r7, #8]
 8004f64:	f000 fb85 	bl	8005672 <strnlen>
 8004f68:	61b8      	str	r0, [r7, #24]

    /* both commands are query commands? */
    if (pattern_ptr[pattern_len - 1] == '?') {
 8004f6a:	6a3b      	ldr	r3, [r7, #32]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	4413      	add	r3, r2
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b3f      	cmp	r3, #63	; 0x3f
 8004f76:	d10f      	bne.n	8004f98 <matchCommand+0x6e>
        if (cmd_ptr[cmd_len - 1] == '?') {
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b3f      	cmp	r3, #63	; 0x3f
 8004f84:	d106      	bne.n	8004f94 <matchCommand+0x6a>
            cmd_len -= 1;
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	61bb      	str	r3, [r7, #24]
            pattern_len -= 1;
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	e001      	b.n	8004f98 <matchCommand+0x6e>
        } else {
            return FALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e18d      	b.n	80052b4 <matchCommand+0x38a>
        }
    }

    /* now support optional keywords in pattern style, e.g. [:MEASure]:VOLTage:DC? */
    if (pattern_ptr[0] == '[') { /* skip first '[' */
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b5b      	cmp	r3, #91	; 0x5b
 8004f9e:	d108      	bne.n	8004fb2 <matchCommand+0x88>
        SKIP_PATTERN(1);
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	623b      	str	r3, [r7, #32]
        brackets++;
 8004fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fae:	3301      	adds	r3, #1
 8004fb0:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (pattern_ptr[0] == ':') { /* skip first ':' */
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b3a      	cmp	r3, #58	; 0x3a
 8004fb8:	d105      	bne.n	8004fc6 <matchCommand+0x9c>
        SKIP_PATTERN(1);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	623b      	str	r3, [r7, #32]
    }

    if (cmd_ptr[0] == ':') {
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b3a      	cmp	r3, #58	; 0x3a
 8004fcc:	d110      	bne.n	8004ff0 <matchCommand+0xc6>
        /* handle errornouse ":*IDN?" */
        if (cmd_len >= 2) {
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d90d      	bls.n	8004ff0 <matchCommand+0xc6>
            if (cmd_ptr[1] != '*') {
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b2a      	cmp	r3, #42	; 0x2a
 8004fdc:	d006      	beq.n	8004fec <matchCommand+0xc2>
                SKIP_CMD(1);
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	61bb      	str	r3, [r7, #24]
 8004fea:	e001      	b.n	8004ff0 <matchCommand+0xc6>
            } else {
                return FALSE;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e161      	b.n	80052b4 <matchCommand+0x38a>
            }
        }
    }

    while (1) {
        int pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ff6:	f7ff ff09 	bl	8004e0c <patternSeparatorPos>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	613b      	str	r3, [r7, #16]

        cmd_sep_pos = cmdSeparatorPos(cmd_ptr, cmd_len);
 8004ffe:	69b9      	ldr	r1, [r7, #24]
 8005000:	69f8      	ldr	r0, [r7, #28]
 8005002:	f7ff ff1d 	bl	8004e40 <cmdSeparatorPos>
 8005006:	4603      	mov	r3, r0
 8005008:	617b      	str	r3, [r7, #20]

        if ((pattern_sep_pos > 0) && pattern_ptr[pattern_sep_pos - 1] == '#') {
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	dd1c      	ble.n	800504a <matchCommand+0x120>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	3b01      	subs	r3, #1
 8005014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005016:	4413      	add	r3, r2
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b23      	cmp	r3, #35	; 0x23
 800501c:	d115      	bne.n	800504a <matchCommand+0x120>
            if (numbers && (numbers_idx < numbers_len)) {
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00c      	beq.n	800503e <matchCommand+0x114>
 8005024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005028:	429a      	cmp	r2, r3
 800502a:	d208      	bcs.n	800503e <matchCommand+0x114>
                number_ptr = numbers + numbers_idx;
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	4413      	add	r3, r2
 8005034:	62bb      	str	r3, [r7, #40]	; 0x28
                *number_ptr = default_value; /* default value */
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e001      	b.n	8005042 <matchCommand+0x118>
            } else {
                number_ptr = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            numbers_idx++;
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	3301      	adds	r3, #1
 8005046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005048:	e001      	b.n	800504e <matchCommand+0x124>
        } else {
            number_ptr = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
        }

        if (matchPattern(pattern_ptr, pattern_sep_pos, cmd_ptr, cmd_sep_pos, number_ptr)) {
 800504e:	6939      	ldr	r1, [r7, #16]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800505c:	f7ff ff0c 	bl	8004e78 <matchPattern>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80e9 	beq.w	800523a <matchCommand+0x310>
            SKIP_PATTERN(pattern_sep_pos);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506c:	4413      	add	r3, r2
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
 8005070:	6a3a      	ldr	r2, [r7, #32]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	623b      	str	r3, [r7, #32]
            SKIP_CMD(cmd_sep_pos);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	61bb      	str	r3, [r7, #24]
            result = TRUE;
 8005088:	2301      	movs	r3, #1
 800508a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

            /* command is complete */
            if ((pattern_len == 0) && (cmd_len == 0)) {
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d103      	bne.n	800509c <matchCommand+0x172>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8107 	beq.w	80052aa <matchCommand+0x380>
                break;
            }

            /* pattern complete, but command not */
            if ((pattern_len == 0) && (cmd_len > 0)) {
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d106      	bne.n	80050b0 <matchCommand+0x186>
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <matchCommand+0x186>
                result = FALSE;
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80050ae:	e0ff      	b.n	80052b0 <matchCommand+0x386>
            }

            /* command complete, but pattern not */
            if (cmd_len == 0) {
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d138      	bne.n	8005128 <matchCommand+0x1fe>
                /* verify all subsequent pattern parts are also optional */
                while (pattern_len) {
 80050b6:	e02c      	b.n	8005112 <matchCommand+0x1e8>
                    pattern_sep_pos = patternSeparatorPos(pattern_ptr, pattern_len);
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	4619      	mov	r1, r3
 80050bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050be:	f7ff fea5 	bl	8004e0c <patternSeparatorPos>
 80050c2:	4603      	mov	r3, r0
 80050c4:	613b      	str	r3, [r7, #16]
                    switch (pattern_ptr[pattern_sep_pos]) {
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	4413      	add	r3, r2
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b5b      	cmp	r3, #91	; 0x5b
 80050d0:	d002      	beq.n	80050d8 <matchCommand+0x1ae>
 80050d2:	2b5d      	cmp	r3, #93	; 0x5d
 80050d4:	d004      	beq.n	80050e0 <matchCommand+0x1b6>
                            break;
                        case ']':
                            brackets--;
                            break;
                        default:
                            break;
 80050d6:	e007      	b.n	80050e8 <matchCommand+0x1be>
                            brackets++;
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	3301      	adds	r3, #1
 80050dc:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 80050de:	e003      	b.n	80050e8 <matchCommand+0x1be>
                            brackets--;
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	3b01      	subs	r3, #1
 80050e4:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 80050e6:	bf00      	nop
                    }
                    SKIP_PATTERN(pattern_sep_pos + 1);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	3301      	adds	r3, #1
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	4413      	add	r3, r2
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3301      	adds	r3, #1
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	623b      	str	r3, [r7, #32]
                    if (brackets == 0) {
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d107      	bne.n	8005112 <matchCommand+0x1e8>
                        if ((pattern_len > 0) && (pattern_ptr[0] == '[')) {
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	2b00      	cmp	r3, #0
 8005106:	dd07      	ble.n	8005118 <matchCommand+0x1ee>
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b5b      	cmp	r3, #91	; 0x5b
 800510e:	d103      	bne.n	8005118 <matchCommand+0x1ee>
                            continue;
 8005110:	bf00      	nop
                while (pattern_len) {
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1cf      	bne.n	80050b8 <matchCommand+0x18e>
                        } else {
                            break;
                        }
                    }
                }
                if (pattern_len != 0) {
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80c7 	beq.w	80052ae <matchCommand+0x384>
                    result = FALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                }
                break; /* exist optional keyword, command is complete */
 8005126:	e0c2      	b.n	80052ae <matchCommand+0x384>
            }

            /* both command and patter contains command separator at this position */
            if ((pattern_len > 0)
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	2b00      	cmp	r3, #0
 800512c:	dd16      	ble.n	800515c <matchCommand+0x232>
                    && ((pattern_ptr[0] == cmd_ptr[0])
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d110      	bne.n	800515c <matchCommand+0x232>
                    && (pattern_ptr[0] == ':'))) {
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b3a      	cmp	r3, #58	; 0x3a
 8005140:	d10c      	bne.n	800515c <matchCommand+0x232>
                SKIP_PATTERN(1);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	3301      	adds	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	3b01      	subs	r3, #1
 800514c:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	3301      	adds	r3, #1
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	3b01      	subs	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e0a5      	b.n	80052a8 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b01      	cmp	r3, #1
 8005160:	dd1f      	ble.n	80051a2 <matchCommand+0x278>
                    && (pattern_ptr[1] == cmd_ptr[0])
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	3301      	adds	r3, #1
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d118      	bne.n	80051a2 <matchCommand+0x278>
                    && (pattern_ptr[0] == '[')
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b5b      	cmp	r3, #91	; 0x5b
 8005176:	d114      	bne.n	80051a2 <matchCommand+0x278>
                    && (pattern_ptr[1] == ':')) {
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	3301      	adds	r3, #1
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b3a      	cmp	r3, #58	; 0x3a
 8005180:	d10f      	bne.n	80051a2 <matchCommand+0x278>
                SKIP_PATTERN(2); /* for skip '[' in "[:" */
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	3302      	adds	r3, #2
 8005186:	627b      	str	r3, [r7, #36]	; 0x24
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	3b02      	subs	r3, #2
 800518c:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	3301      	adds	r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	3b01      	subs	r3, #1
 8005198:	61bb      	str	r3, [r7, #24]
                brackets++;
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	3301      	adds	r3, #1
 800519e:	633b      	str	r3, [r7, #48]	; 0x30
 80051a0:	e082      	b.n	80052a8 <matchCommand+0x37e>
            } else if ((pattern_len > 1)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	dd1f      	ble.n	80051e8 <matchCommand+0x2be>
                    && (pattern_ptr[1] == cmd_ptr[0])
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	3301      	adds	r3, #1
 80051ac:	781a      	ldrb	r2, [r3, #0]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d118      	bne.n	80051e8 <matchCommand+0x2be>
                    && (pattern_ptr[0] == ']')
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	2b5d      	cmp	r3, #93	; 0x5d
 80051bc:	d114      	bne.n	80051e8 <matchCommand+0x2be>
                    && (pattern_ptr[1] == ':')) {
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	3301      	adds	r3, #1
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b3a      	cmp	r3, #58	; 0x3a
 80051c6:	d10f      	bne.n	80051e8 <matchCommand+0x2be>
                SKIP_PATTERN(2); /* for skip ']' in "]:" */
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	3302      	adds	r3, #2
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	3b02      	subs	r3, #2
 80051d2:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	3301      	adds	r3, #1
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	3b01      	subs	r3, #1
 80051de:	61bb      	str	r3, [r7, #24]
                brackets--;
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	3b01      	subs	r3, #1
 80051e4:	633b      	str	r3, [r7, #48]	; 0x30
 80051e6:	e05f      	b.n	80052a8 <matchCommand+0x37e>
            } else if ((pattern_len > 2)
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	dd21      	ble.n	8005232 <matchCommand+0x308>
                    && (pattern_ptr[2] == cmd_ptr[0])
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	3302      	adds	r3, #2
 80051f2:	781a      	ldrb	r2, [r3, #0]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d11a      	bne.n	8005232 <matchCommand+0x308>
                    && (pattern_ptr[0] == ']')
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b5d      	cmp	r3, #93	; 0x5d
 8005202:	d116      	bne.n	8005232 <matchCommand+0x308>
                    && (pattern_ptr[1] == '[')
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	3301      	adds	r3, #1
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b5b      	cmp	r3, #91	; 0x5b
 800520c:	d111      	bne.n	8005232 <matchCommand+0x308>
                    && (pattern_ptr[2] == ':')) {
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	3302      	adds	r3, #2
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b3a      	cmp	r3, #58	; 0x3a
 8005216:	d10c      	bne.n	8005232 <matchCommand+0x308>
                SKIP_PATTERN(3); /* for skip '][' in "][:" */
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	3303      	adds	r3, #3
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	3b03      	subs	r3, #3
 8005222:	623b      	str	r3, [r7, #32]
                SKIP_CMD(1);
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	3301      	adds	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3b01      	subs	r3, #1
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	e03a      	b.n	80052a8 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 8005238:	e03a      	b.n	80052b0 <matchCommand+0x386>
            }
        } else {
            SKIP_PATTERN(pattern_sep_pos);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523e:	4413      	add	r3, r2
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	623b      	str	r3, [r7, #32]
            if ((pattern_ptr[0] == ']') && (pattern_ptr[1] == ':')) {
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b5d      	cmp	r3, #93	; 0x5d
 8005250:	d10e      	bne.n	8005270 <matchCommand+0x346>
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	3301      	adds	r3, #1
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b3a      	cmp	r3, #58	; 0x3a
 800525a:	d109      	bne.n	8005270 <matchCommand+0x346>
                SKIP_PATTERN(2); /* for skip ']' in "]:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	3302      	adds	r3, #2
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	3b02      	subs	r3, #2
 8005266:	623b      	str	r3, [r7, #32]
                brackets--;
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	3b01      	subs	r3, #1
 800526c:	633b      	str	r3, [r7, #48]	; 0x30
 800526e:	e01b      	b.n	80052a8 <matchCommand+0x37e>
            } else if ((pattern_len > 2) && (pattern_ptr[0] == ']')
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	2b02      	cmp	r3, #2
 8005274:	dd14      	ble.n	80052a0 <matchCommand+0x376>
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b5d      	cmp	r3, #93	; 0x5d
 800527c:	d110      	bne.n	80052a0 <matchCommand+0x376>
                    && (pattern_ptr[1] == '[')
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	3301      	adds	r3, #1
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b5b      	cmp	r3, #91	; 0x5b
 8005286:	d10b      	bne.n	80052a0 <matchCommand+0x376>
                    && (pattern_ptr[2] == ':')) {
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	3302      	adds	r3, #2
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b3a      	cmp	r3, #58	; 0x3a
 8005290:	d106      	bne.n	80052a0 <matchCommand+0x376>
                SKIP_PATTERN(3); /* for skip ']' in "][:" , pattern_ptr continue, while cmd_ptr remain unchanged */
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	3303      	adds	r3, #3
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	3b03      	subs	r3, #3
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	e003      	b.n	80052a8 <matchCommand+0x37e>
                /* brackets++; */
                /* brackets--; */
            } else {
                result = FALSE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 80052a6:	e003      	b.n	80052b0 <matchCommand+0x386>
    while (1) {
 80052a8:	e6a2      	b.n	8004ff0 <matchCommand+0xc6>
                break;
 80052aa:	bf00      	nop
 80052ac:	e000      	b.n	80052b0 <matchCommand+0x386>
                break; /* exist optional keyword, command is complete */
 80052ae:	bf00      	nop
            }
        }
    }

    return result;
 80052b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
#undef SKIP_PATTERN
#undef SKIP_CMD
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3738      	adds	r7, #56	; 0x38
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <composeCompoundCommand>:
 * @param prev pointer to previous command
 * @param current pointer of current command
 *
 * prev and current should be in the same memory buffer
 */
scpi_bool_t composeCompoundCommand(const scpi_token_t * prev, scpi_token_t * current) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
    size_t i;

    /* Invalid input */
    if (current == NULL || current->ptr == NULL || current->len == 0)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <composeCompoundCommand+0x20>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <composeCompoundCommand+0x20>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <composeCompoundCommand+0x24>
        return FALSE;
 80052dc:	2300      	movs	r3, #0
 80052de:	e04d      	b.n	800537c <composeCompoundCommand+0xc0>

    /* no previous command - nothing to do*/
    if (prev->ptr == NULL || prev->len == 0)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <composeCompoundCommand+0x34>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <composeCompoundCommand+0x38>
        return TRUE;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e043      	b.n	800537c <composeCompoundCommand+0xc0>

    /* Common command or command root - nothing to do */
    if (current->ptr[0] == '*' || current->ptr[0] == ':')
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b2a      	cmp	r3, #42	; 0x2a
 80052fc:	d004      	beq.n	8005308 <composeCompoundCommand+0x4c>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b3a      	cmp	r3, #58	; 0x3a
 8005306:	d101      	bne.n	800530c <composeCompoundCommand+0x50>
        return TRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	e037      	b.n	800537c <composeCompoundCommand+0xc0>

    /* Previsou command was common command - nothing to do */
    if (prev->ptr[0] == '*')
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b2a      	cmp	r3, #42	; 0x2a
 8005314:	d101      	bne.n	800531a <composeCompoundCommand+0x5e>
        return TRUE;
 8005316:	2301      	movs	r3, #1
 8005318:	e030      	b.n	800537c <composeCompoundCommand+0xc0>

    /* Find last occurence of ':' */
    for (i = prev->len; i > 0; i--) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e00a      	b.n	8005338 <composeCompoundCommand+0x7c>
        if (prev->ptr[i - 1] == ':') {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3b01      	subs	r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b3a      	cmp	r3, #58	; 0x3a
 8005330:	d006      	beq.n	8005340 <composeCompoundCommand+0x84>
    for (i = prev->len; i > 0; i--) {
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b01      	subs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f1      	bne.n	8005322 <composeCompoundCommand+0x66>
 800533e:	e000      	b.n	8005342 <composeCompoundCommand+0x86>
            break;
 8005340:	bf00      	nop
        }
    }

    /* Previous command was simple command - nothing to do*/
    if (i == 0)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <composeCompoundCommand+0x90>
        return TRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	e017      	b.n	800537c <composeCompoundCommand+0xc0>

    current->ptr -= i;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	425b      	negs	r3, r3
 8005354:	441a      	add	r2, r3
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	605a      	str	r2, [r3, #4]
    current->len += i;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	461a      	mov	r2, r3
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	609a      	str	r2, [r3, #8]
    memmove(current->ptr, prev->ptr, i);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6858      	ldr	r0, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4619      	mov	r1, r3
 8005376:	f000 f8ba 	bl	80054ee <memmove>
    return TRUE;
 800537a:	2301      	movs	r3, #1
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <__errno>:
 8005384:	4b01      	ldr	r3, [pc, #4]	; (800538c <__errno+0x8>)
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	20000020 	.word	0x20000020

08005390 <_fwrite_r>:
 8005390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005394:	9c08      	ldr	r4, [sp, #32]
 8005396:	4689      	mov	r9, r1
 8005398:	4617      	mov	r7, r2
 800539a:	fb02 f803 	mul.w	r8, r2, r3
 800539e:	4606      	mov	r6, r0
 80053a0:	b118      	cbz	r0, 80053aa <_fwrite_r+0x1a>
 80053a2:	6983      	ldr	r3, [r0, #24]
 80053a4:	b90b      	cbnz	r3, 80053aa <_fwrite_r+0x1a>
 80053a6:	f000 fc4f 	bl	8005c48 <__sinit>
 80053aa:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <_fwrite_r+0x90>)
 80053ac:	429c      	cmp	r4, r3
 80053ae:	d11a      	bne.n	80053e6 <_fwrite_r+0x56>
 80053b0:	6874      	ldr	r4, [r6, #4]
 80053b2:	89a3      	ldrh	r3, [r4, #12]
 80053b4:	071b      	lsls	r3, r3, #28
 80053b6:	d520      	bpl.n	80053fa <_fwrite_r+0x6a>
 80053b8:	6923      	ldr	r3, [r4, #16]
 80053ba:	b1f3      	cbz	r3, 80053fa <_fwrite_r+0x6a>
 80053bc:	2500      	movs	r5, #0
 80053be:	4545      	cmp	r5, r8
 80053c0:	d029      	beq.n	8005416 <_fwrite_r+0x86>
 80053c2:	68a3      	ldr	r3, [r4, #8]
 80053c4:	f819 1005 	ldrb.w	r1, [r9, r5]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	60a3      	str	r3, [r4, #8]
 80053ce:	da04      	bge.n	80053da <_fwrite_r+0x4a>
 80053d0:	69a2      	ldr	r2, [r4, #24]
 80053d2:	4293      	cmp	r3, r2
 80053d4:	db19      	blt.n	800540a <_fwrite_r+0x7a>
 80053d6:	290a      	cmp	r1, #10
 80053d8:	d017      	beq.n	800540a <_fwrite_r+0x7a>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	1c5a      	adds	r2, r3, #1
 80053de:	6022      	str	r2, [r4, #0]
 80053e0:	7019      	strb	r1, [r3, #0]
 80053e2:	3501      	adds	r5, #1
 80053e4:	e7eb      	b.n	80053be <_fwrite_r+0x2e>
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <_fwrite_r+0x94>)
 80053e8:	429c      	cmp	r4, r3
 80053ea:	d101      	bne.n	80053f0 <_fwrite_r+0x60>
 80053ec:	68b4      	ldr	r4, [r6, #8]
 80053ee:	e7e0      	b.n	80053b2 <_fwrite_r+0x22>
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <_fwrite_r+0x98>)
 80053f2:	429c      	cmp	r4, r3
 80053f4:	bf08      	it	eq
 80053f6:	68f4      	ldreq	r4, [r6, #12]
 80053f8:	e7db      	b.n	80053b2 <_fwrite_r+0x22>
 80053fa:	4621      	mov	r1, r4
 80053fc:	4630      	mov	r0, r6
 80053fe:	f000 fac5 	bl	800598c <__swsetup_r>
 8005402:	2800      	cmp	r0, #0
 8005404:	d0da      	beq.n	80053bc <_fwrite_r+0x2c>
 8005406:	2500      	movs	r5, #0
 8005408:	e005      	b.n	8005416 <_fwrite_r+0x86>
 800540a:	4622      	mov	r2, r4
 800540c:	4630      	mov	r0, r6
 800540e:	f000 fa5d 	bl	80058cc <__swbuf_r>
 8005412:	3001      	adds	r0, #1
 8005414:	d1e5      	bne.n	80053e2 <_fwrite_r+0x52>
 8005416:	fbb5 f0f7 	udiv	r0, r5, r7
 800541a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800541e:	bf00      	nop
 8005420:	08006e10 	.word	0x08006e10
 8005424:	08006e30 	.word	0x08006e30
 8005428:	08006df0 	.word	0x08006df0

0800542c <fwrite>:
 800542c:	b507      	push	{r0, r1, r2, lr}
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	4613      	mov	r3, r2
 8005432:	460a      	mov	r2, r1
 8005434:	4601      	mov	r1, r0
 8005436:	4803      	ldr	r0, [pc, #12]	; (8005444 <fwrite+0x18>)
 8005438:	6800      	ldr	r0, [r0, #0]
 800543a:	f7ff ffa9 	bl	8005390 <_fwrite_r>
 800543e:	b003      	add	sp, #12
 8005440:	f85d fb04 	ldr.w	pc, [sp], #4
 8005444:	20000020 	.word	0x20000020

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	2500      	movs	r5, #0
 800544c:	4e0c      	ldr	r6, [pc, #48]	; (8005480 <__libc_init_array+0x38>)
 800544e:	4c0d      	ldr	r4, [pc, #52]	; (8005484 <__libc_init_array+0x3c>)
 8005450:	1ba4      	subs	r4, r4, r6
 8005452:	10a4      	asrs	r4, r4, #2
 8005454:	42a5      	cmp	r5, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	f001 f91c 	bl	8006694 <_init>
 800545c:	2500      	movs	r5, #0
 800545e:	4e0a      	ldr	r6, [pc, #40]	; (8005488 <__libc_init_array+0x40>)
 8005460:	4c0a      	ldr	r4, [pc, #40]	; (800548c <__libc_init_array+0x44>)
 8005462:	1ba4      	subs	r4, r4, r6
 8005464:	10a4      	asrs	r4, r4, #2
 8005466:	42a5      	cmp	r5, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005470:	4798      	blx	r3
 8005472:	3501      	adds	r5, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800547a:	4798      	blx	r3
 800547c:	3501      	adds	r5, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	08006e84 	.word	0x08006e84
 8005484:	08006e84 	.word	0x08006e84
 8005488:	08006e84 	.word	0x08006e84
 800548c:	08006e88 	.word	0x08006e88

08005490 <__locale_ctype_ptr_l>:
 8005490:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005494:	4770      	bx	lr
	...

08005498 <__locale_ctype_ptr>:
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <__locale_ctype_ptr+0x14>)
 800549a:	4a05      	ldr	r2, [pc, #20]	; (80054b0 <__locale_ctype_ptr+0x18>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf08      	it	eq
 80054a4:	4613      	moveq	r3, r2
 80054a6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80054aa:	4770      	bx	lr
 80054ac:	20000020 	.word	0x20000020
 80054b0:	20000084 	.word	0x20000084

080054b4 <__ascii_mbtowc>:
 80054b4:	b082      	sub	sp, #8
 80054b6:	b901      	cbnz	r1, 80054ba <__ascii_mbtowc+0x6>
 80054b8:	a901      	add	r1, sp, #4
 80054ba:	b142      	cbz	r2, 80054ce <__ascii_mbtowc+0x1a>
 80054bc:	b14b      	cbz	r3, 80054d2 <__ascii_mbtowc+0x1e>
 80054be:	7813      	ldrb	r3, [r2, #0]
 80054c0:	600b      	str	r3, [r1, #0]
 80054c2:	7812      	ldrb	r2, [r2, #0]
 80054c4:	1c10      	adds	r0, r2, #0
 80054c6:	bf18      	it	ne
 80054c8:	2001      	movne	r0, #1
 80054ca:	b002      	add	sp, #8
 80054cc:	4770      	bx	lr
 80054ce:	4610      	mov	r0, r2
 80054d0:	e7fb      	b.n	80054ca <__ascii_mbtowc+0x16>
 80054d2:	f06f 0001 	mvn.w	r0, #1
 80054d6:	e7f8      	b.n	80054ca <__ascii_mbtowc+0x16>

080054d8 <memcpy>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	1e43      	subs	r3, r0, #1
 80054dc:	440a      	add	r2, r1
 80054de:	4291      	cmp	r1, r2
 80054e0:	d100      	bne.n	80054e4 <memcpy+0xc>
 80054e2:	bd10      	pop	{r4, pc}
 80054e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ec:	e7f7      	b.n	80054de <memcpy+0x6>

080054ee <memmove>:
 80054ee:	4288      	cmp	r0, r1
 80054f0:	b510      	push	{r4, lr}
 80054f2:	eb01 0302 	add.w	r3, r1, r2
 80054f6:	d807      	bhi.n	8005508 <memmove+0x1a>
 80054f8:	1e42      	subs	r2, r0, #1
 80054fa:	4299      	cmp	r1, r3
 80054fc:	d00a      	beq.n	8005514 <memmove+0x26>
 80054fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005502:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005506:	e7f8      	b.n	80054fa <memmove+0xc>
 8005508:	4283      	cmp	r3, r0
 800550a:	d9f5      	bls.n	80054f8 <memmove+0xa>
 800550c:	1881      	adds	r1, r0, r2
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	42d3      	cmn	r3, r2
 8005512:	d100      	bne.n	8005516 <memmove+0x28>
 8005514:	bd10      	pop	{r4, pc}
 8005516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800551a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800551e:	e7f7      	b.n	8005510 <memmove+0x22>

08005520 <memset>:
 8005520:	4603      	mov	r3, r0
 8005522:	4402      	add	r2, r0
 8005524:	4293      	cmp	r3, r2
 8005526:	d100      	bne.n	800552a <memset+0xa>
 8005528:	4770      	bx	lr
 800552a:	f803 1b01 	strb.w	r1, [r3], #1
 800552e:	e7f9      	b.n	8005524 <memset+0x4>

08005530 <iprintf>:
 8005530:	b40f      	push	{r0, r1, r2, r3}
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <iprintf+0x2c>)
 8005534:	b513      	push	{r0, r1, r4, lr}
 8005536:	681c      	ldr	r4, [r3, #0]
 8005538:	b124      	cbz	r4, 8005544 <iprintf+0x14>
 800553a:	69a3      	ldr	r3, [r4, #24]
 800553c:	b913      	cbnz	r3, 8005544 <iprintf+0x14>
 800553e:	4620      	mov	r0, r4
 8005540:	f000 fb82 	bl	8005c48 <__sinit>
 8005544:	ab05      	add	r3, sp, #20
 8005546:	9a04      	ldr	r2, [sp, #16]
 8005548:	68a1      	ldr	r1, [r4, #8]
 800554a:	4620      	mov	r0, r4
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	f000 fd37 	bl	8005fc0 <_vfiprintf_r>
 8005552:	b002      	add	sp, #8
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005558:	b004      	add	sp, #16
 800555a:	4770      	bx	lr
 800555c:	20000020 	.word	0x20000020

08005560 <_puts_r>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	460e      	mov	r6, r1
 8005564:	4605      	mov	r5, r0
 8005566:	b118      	cbz	r0, 8005570 <_puts_r+0x10>
 8005568:	6983      	ldr	r3, [r0, #24]
 800556a:	b90b      	cbnz	r3, 8005570 <_puts_r+0x10>
 800556c:	f000 fb6c 	bl	8005c48 <__sinit>
 8005570:	69ab      	ldr	r3, [r5, #24]
 8005572:	68ac      	ldr	r4, [r5, #8]
 8005574:	b913      	cbnz	r3, 800557c <_puts_r+0x1c>
 8005576:	4628      	mov	r0, r5
 8005578:	f000 fb66 	bl	8005c48 <__sinit>
 800557c:	4b23      	ldr	r3, [pc, #140]	; (800560c <_puts_r+0xac>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d117      	bne.n	80055b2 <_puts_r+0x52>
 8005582:	686c      	ldr	r4, [r5, #4]
 8005584:	89a3      	ldrh	r3, [r4, #12]
 8005586:	071b      	lsls	r3, r3, #28
 8005588:	d51d      	bpl.n	80055c6 <_puts_r+0x66>
 800558a:	6923      	ldr	r3, [r4, #16]
 800558c:	b1db      	cbz	r3, 80055c6 <_puts_r+0x66>
 800558e:	3e01      	subs	r6, #1
 8005590:	68a3      	ldr	r3, [r4, #8]
 8005592:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005596:	3b01      	subs	r3, #1
 8005598:	60a3      	str	r3, [r4, #8]
 800559a:	b9e9      	cbnz	r1, 80055d8 <_puts_r+0x78>
 800559c:	2b00      	cmp	r3, #0
 800559e:	da2e      	bge.n	80055fe <_puts_r+0x9e>
 80055a0:	4622      	mov	r2, r4
 80055a2:	210a      	movs	r1, #10
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 f991 	bl	80058cc <__swbuf_r>
 80055aa:	3001      	adds	r0, #1
 80055ac:	d011      	beq.n	80055d2 <_puts_r+0x72>
 80055ae:	200a      	movs	r0, #10
 80055b0:	e011      	b.n	80055d6 <_puts_r+0x76>
 80055b2:	4b17      	ldr	r3, [pc, #92]	; (8005610 <_puts_r+0xb0>)
 80055b4:	429c      	cmp	r4, r3
 80055b6:	d101      	bne.n	80055bc <_puts_r+0x5c>
 80055b8:	68ac      	ldr	r4, [r5, #8]
 80055ba:	e7e3      	b.n	8005584 <_puts_r+0x24>
 80055bc:	4b15      	ldr	r3, [pc, #84]	; (8005614 <_puts_r+0xb4>)
 80055be:	429c      	cmp	r4, r3
 80055c0:	bf08      	it	eq
 80055c2:	68ec      	ldreq	r4, [r5, #12]
 80055c4:	e7de      	b.n	8005584 <_puts_r+0x24>
 80055c6:	4621      	mov	r1, r4
 80055c8:	4628      	mov	r0, r5
 80055ca:	f000 f9df 	bl	800598c <__swsetup_r>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0dd      	beq.n	800558e <_puts_r+0x2e>
 80055d2:	f04f 30ff 	mov.w	r0, #4294967295
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da04      	bge.n	80055e6 <_puts_r+0x86>
 80055dc:	69a2      	ldr	r2, [r4, #24]
 80055de:	429a      	cmp	r2, r3
 80055e0:	dc06      	bgt.n	80055f0 <_puts_r+0x90>
 80055e2:	290a      	cmp	r1, #10
 80055e4:	d004      	beq.n	80055f0 <_puts_r+0x90>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	6022      	str	r2, [r4, #0]
 80055ec:	7019      	strb	r1, [r3, #0]
 80055ee:	e7cf      	b.n	8005590 <_puts_r+0x30>
 80055f0:	4622      	mov	r2, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 f96a 	bl	80058cc <__swbuf_r>
 80055f8:	3001      	adds	r0, #1
 80055fa:	d1c9      	bne.n	8005590 <_puts_r+0x30>
 80055fc:	e7e9      	b.n	80055d2 <_puts_r+0x72>
 80055fe:	200a      	movs	r0, #10
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	6022      	str	r2, [r4, #0]
 8005606:	7018      	strb	r0, [r3, #0]
 8005608:	e7e5      	b.n	80055d6 <_puts_r+0x76>
 800560a:	bf00      	nop
 800560c:	08006e10 	.word	0x08006e10
 8005610:	08006e30 	.word	0x08006e30
 8005614:	08006df0 	.word	0x08006df0

08005618 <puts>:
 8005618:	4b02      	ldr	r3, [pc, #8]	; (8005624 <puts+0xc>)
 800561a:	4601      	mov	r1, r0
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	f7ff bf9f 	b.w	8005560 <_puts_r>
 8005622:	bf00      	nop
 8005624:	20000020 	.word	0x20000020

08005628 <strncasecmp>:
 8005628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800562c:	4606      	mov	r6, r0
 800562e:	460f      	mov	r7, r1
 8005630:	eb00 0802 	add.w	r8, r0, r2
 8005634:	45b0      	cmp	r8, r6
 8005636:	d019      	beq.n	800566c <strncasecmp+0x44>
 8005638:	f816 4b01 	ldrb.w	r4, [r6], #1
 800563c:	f7ff ff2c 	bl	8005498 <__locale_ctype_ptr>
 8005640:	4420      	add	r0, r4
 8005642:	7843      	ldrb	r3, [r0, #1]
 8005644:	f817 5b01 	ldrb.w	r5, [r7], #1
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b01      	cmp	r3, #1
 800564e:	bf08      	it	eq
 8005650:	3420      	addeq	r4, #32
 8005652:	f7ff ff21 	bl	8005498 <__locale_ctype_ptr>
 8005656:	4428      	add	r0, r5
 8005658:	7842      	ldrb	r2, [r0, #1]
 800565a:	f002 0203 	and.w	r2, r2, #3
 800565e:	2a01      	cmp	r2, #1
 8005660:	bf08      	it	eq
 8005662:	3520      	addeq	r5, #32
 8005664:	1b60      	subs	r0, r4, r5
 8005666:	d102      	bne.n	800566e <strncasecmp+0x46>
 8005668:	2d00      	cmp	r5, #0
 800566a:	d1e3      	bne.n	8005634 <strncasecmp+0xc>
 800566c:	2000      	movs	r0, #0
 800566e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005672 <strnlen>:
 8005672:	4603      	mov	r3, r0
 8005674:	b510      	push	{r4, lr}
 8005676:	4401      	add	r1, r0
 8005678:	428b      	cmp	r3, r1
 800567a:	d002      	beq.n	8005682 <strnlen+0x10>
 800567c:	781a      	ldrb	r2, [r3, #0]
 800567e:	1c5c      	adds	r4, r3, #1
 8005680:	b90a      	cbnz	r2, 8005686 <strnlen+0x14>
 8005682:	1a18      	subs	r0, r3, r0
 8005684:	bd10      	pop	{r4, pc}
 8005686:	4623      	mov	r3, r4
 8005688:	e7f6      	b.n	8005678 <strnlen+0x6>

0800568a <_strtol_l.isra.0>:
 800568a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568e:	4680      	mov	r8, r0
 8005690:	4689      	mov	r9, r1
 8005692:	4692      	mov	sl, r2
 8005694:	461e      	mov	r6, r3
 8005696:	460f      	mov	r7, r1
 8005698:	463d      	mov	r5, r7
 800569a:	9808      	ldr	r0, [sp, #32]
 800569c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056a0:	f7ff fef6 	bl	8005490 <__locale_ctype_ptr_l>
 80056a4:	4420      	add	r0, r4
 80056a6:	7843      	ldrb	r3, [r0, #1]
 80056a8:	f013 0308 	ands.w	r3, r3, #8
 80056ac:	d132      	bne.n	8005714 <_strtol_l.isra.0+0x8a>
 80056ae:	2c2d      	cmp	r4, #45	; 0x2d
 80056b0:	d132      	bne.n	8005718 <_strtol_l.isra.0+0x8e>
 80056b2:	2201      	movs	r2, #1
 80056b4:	787c      	ldrb	r4, [r7, #1]
 80056b6:	1cbd      	adds	r5, r7, #2
 80056b8:	2e00      	cmp	r6, #0
 80056ba:	d05d      	beq.n	8005778 <_strtol_l.isra.0+0xee>
 80056bc:	2e10      	cmp	r6, #16
 80056be:	d109      	bne.n	80056d4 <_strtol_l.isra.0+0x4a>
 80056c0:	2c30      	cmp	r4, #48	; 0x30
 80056c2:	d107      	bne.n	80056d4 <_strtol_l.isra.0+0x4a>
 80056c4:	782b      	ldrb	r3, [r5, #0]
 80056c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80056ca:	2b58      	cmp	r3, #88	; 0x58
 80056cc:	d14f      	bne.n	800576e <_strtol_l.isra.0+0xe4>
 80056ce:	2610      	movs	r6, #16
 80056d0:	786c      	ldrb	r4, [r5, #1]
 80056d2:	3502      	adds	r5, #2
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	bf14      	ite	ne
 80056d8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80056dc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80056e0:	2700      	movs	r7, #0
 80056e2:	fbb1 fcf6 	udiv	ip, r1, r6
 80056e6:	4638      	mov	r0, r7
 80056e8:	fb06 1e1c 	mls	lr, r6, ip, r1
 80056ec:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80056f0:	2b09      	cmp	r3, #9
 80056f2:	d817      	bhi.n	8005724 <_strtol_l.isra.0+0x9a>
 80056f4:	461c      	mov	r4, r3
 80056f6:	42a6      	cmp	r6, r4
 80056f8:	dd23      	ble.n	8005742 <_strtol_l.isra.0+0xb8>
 80056fa:	1c7b      	adds	r3, r7, #1
 80056fc:	d007      	beq.n	800570e <_strtol_l.isra.0+0x84>
 80056fe:	4584      	cmp	ip, r0
 8005700:	d31c      	bcc.n	800573c <_strtol_l.isra.0+0xb2>
 8005702:	d101      	bne.n	8005708 <_strtol_l.isra.0+0x7e>
 8005704:	45a6      	cmp	lr, r4
 8005706:	db19      	blt.n	800573c <_strtol_l.isra.0+0xb2>
 8005708:	2701      	movs	r7, #1
 800570a:	fb00 4006 	mla	r0, r0, r6, r4
 800570e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005712:	e7eb      	b.n	80056ec <_strtol_l.isra.0+0x62>
 8005714:	462f      	mov	r7, r5
 8005716:	e7bf      	b.n	8005698 <_strtol_l.isra.0+0xe>
 8005718:	2c2b      	cmp	r4, #43	; 0x2b
 800571a:	bf04      	itt	eq
 800571c:	1cbd      	addeq	r5, r7, #2
 800571e:	787c      	ldrbeq	r4, [r7, #1]
 8005720:	461a      	mov	r2, r3
 8005722:	e7c9      	b.n	80056b8 <_strtol_l.isra.0+0x2e>
 8005724:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005728:	2b19      	cmp	r3, #25
 800572a:	d801      	bhi.n	8005730 <_strtol_l.isra.0+0xa6>
 800572c:	3c37      	subs	r4, #55	; 0x37
 800572e:	e7e2      	b.n	80056f6 <_strtol_l.isra.0+0x6c>
 8005730:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005734:	2b19      	cmp	r3, #25
 8005736:	d804      	bhi.n	8005742 <_strtol_l.isra.0+0xb8>
 8005738:	3c57      	subs	r4, #87	; 0x57
 800573a:	e7dc      	b.n	80056f6 <_strtol_l.isra.0+0x6c>
 800573c:	f04f 37ff 	mov.w	r7, #4294967295
 8005740:	e7e5      	b.n	800570e <_strtol_l.isra.0+0x84>
 8005742:	1c7b      	adds	r3, r7, #1
 8005744:	d108      	bne.n	8005758 <_strtol_l.isra.0+0xce>
 8005746:	2322      	movs	r3, #34	; 0x22
 8005748:	4608      	mov	r0, r1
 800574a:	f8c8 3000 	str.w	r3, [r8]
 800574e:	f1ba 0f00 	cmp.w	sl, #0
 8005752:	d107      	bne.n	8005764 <_strtol_l.isra.0+0xda>
 8005754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005758:	b102      	cbz	r2, 800575c <_strtol_l.isra.0+0xd2>
 800575a:	4240      	negs	r0, r0
 800575c:	f1ba 0f00 	cmp.w	sl, #0
 8005760:	d0f8      	beq.n	8005754 <_strtol_l.isra.0+0xca>
 8005762:	b10f      	cbz	r7, 8005768 <_strtol_l.isra.0+0xde>
 8005764:	f105 39ff 	add.w	r9, r5, #4294967295
 8005768:	f8ca 9000 	str.w	r9, [sl]
 800576c:	e7f2      	b.n	8005754 <_strtol_l.isra.0+0xca>
 800576e:	2430      	movs	r4, #48	; 0x30
 8005770:	2e00      	cmp	r6, #0
 8005772:	d1af      	bne.n	80056d4 <_strtol_l.isra.0+0x4a>
 8005774:	2608      	movs	r6, #8
 8005776:	e7ad      	b.n	80056d4 <_strtol_l.isra.0+0x4a>
 8005778:	2c30      	cmp	r4, #48	; 0x30
 800577a:	d0a3      	beq.n	80056c4 <_strtol_l.isra.0+0x3a>
 800577c:	260a      	movs	r6, #10
 800577e:	e7a9      	b.n	80056d4 <_strtol_l.isra.0+0x4a>

08005780 <strtol>:
 8005780:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <strtol+0x24>)
 8005782:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005784:	681c      	ldr	r4, [r3, #0]
 8005786:	4d08      	ldr	r5, [pc, #32]	; (80057a8 <strtol+0x28>)
 8005788:	6a23      	ldr	r3, [r4, #32]
 800578a:	2b00      	cmp	r3, #0
 800578c:	bf08      	it	eq
 800578e:	462b      	moveq	r3, r5
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	4613      	mov	r3, r2
 8005794:	460a      	mov	r2, r1
 8005796:	4601      	mov	r1, r0
 8005798:	4620      	mov	r0, r4
 800579a:	f7ff ff76 	bl	800568a <_strtol_l.isra.0>
 800579e:	b003      	add	sp, #12
 80057a0:	bd30      	pop	{r4, r5, pc}
 80057a2:	bf00      	nop
 80057a4:	20000020 	.word	0x20000020
 80057a8:	20000084 	.word	0x20000084

080057ac <_strtoul_l.isra.0>:
 80057ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	4680      	mov	r8, r0
 80057b2:	4689      	mov	r9, r1
 80057b4:	4692      	mov	sl, r2
 80057b6:	461e      	mov	r6, r3
 80057b8:	460f      	mov	r7, r1
 80057ba:	463d      	mov	r5, r7
 80057bc:	9808      	ldr	r0, [sp, #32]
 80057be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057c2:	f7ff fe65 	bl	8005490 <__locale_ctype_ptr_l>
 80057c6:	4420      	add	r0, r4
 80057c8:	7843      	ldrb	r3, [r0, #1]
 80057ca:	f013 0308 	ands.w	r3, r3, #8
 80057ce:	d130      	bne.n	8005832 <_strtoul_l.isra.0+0x86>
 80057d0:	2c2d      	cmp	r4, #45	; 0x2d
 80057d2:	d130      	bne.n	8005836 <_strtoul_l.isra.0+0x8a>
 80057d4:	2101      	movs	r1, #1
 80057d6:	787c      	ldrb	r4, [r7, #1]
 80057d8:	1cbd      	adds	r5, r7, #2
 80057da:	2e00      	cmp	r6, #0
 80057dc:	d05c      	beq.n	8005898 <_strtoul_l.isra.0+0xec>
 80057de:	2e10      	cmp	r6, #16
 80057e0:	d109      	bne.n	80057f6 <_strtoul_l.isra.0+0x4a>
 80057e2:	2c30      	cmp	r4, #48	; 0x30
 80057e4:	d107      	bne.n	80057f6 <_strtoul_l.isra.0+0x4a>
 80057e6:	782b      	ldrb	r3, [r5, #0]
 80057e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80057ec:	2b58      	cmp	r3, #88	; 0x58
 80057ee:	d14e      	bne.n	800588e <_strtoul_l.isra.0+0xe2>
 80057f0:	2610      	movs	r6, #16
 80057f2:	786c      	ldrb	r4, [r5, #1]
 80057f4:	3502      	adds	r5, #2
 80057f6:	f04f 32ff 	mov.w	r2, #4294967295
 80057fa:	fbb2 f2f6 	udiv	r2, r2, r6
 80057fe:	2300      	movs	r3, #0
 8005800:	fb06 fc02 	mul.w	ip, r6, r2
 8005804:	4618      	mov	r0, r3
 8005806:	ea6f 0c0c 	mvn.w	ip, ip
 800580a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800580e:	2f09      	cmp	r7, #9
 8005810:	d817      	bhi.n	8005842 <_strtoul_l.isra.0+0x96>
 8005812:	463c      	mov	r4, r7
 8005814:	42a6      	cmp	r6, r4
 8005816:	dd23      	ble.n	8005860 <_strtoul_l.isra.0+0xb4>
 8005818:	2b00      	cmp	r3, #0
 800581a:	db1e      	blt.n	800585a <_strtoul_l.isra.0+0xae>
 800581c:	4282      	cmp	r2, r0
 800581e:	d31c      	bcc.n	800585a <_strtoul_l.isra.0+0xae>
 8005820:	d101      	bne.n	8005826 <_strtoul_l.isra.0+0x7a>
 8005822:	45a4      	cmp	ip, r4
 8005824:	db19      	blt.n	800585a <_strtoul_l.isra.0+0xae>
 8005826:	2301      	movs	r3, #1
 8005828:	fb00 4006 	mla	r0, r0, r6, r4
 800582c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005830:	e7eb      	b.n	800580a <_strtoul_l.isra.0+0x5e>
 8005832:	462f      	mov	r7, r5
 8005834:	e7c1      	b.n	80057ba <_strtoul_l.isra.0+0xe>
 8005836:	2c2b      	cmp	r4, #43	; 0x2b
 8005838:	bf04      	itt	eq
 800583a:	1cbd      	addeq	r5, r7, #2
 800583c:	787c      	ldrbeq	r4, [r7, #1]
 800583e:	4619      	mov	r1, r3
 8005840:	e7cb      	b.n	80057da <_strtoul_l.isra.0+0x2e>
 8005842:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005846:	2f19      	cmp	r7, #25
 8005848:	d801      	bhi.n	800584e <_strtoul_l.isra.0+0xa2>
 800584a:	3c37      	subs	r4, #55	; 0x37
 800584c:	e7e2      	b.n	8005814 <_strtoul_l.isra.0+0x68>
 800584e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005852:	2f19      	cmp	r7, #25
 8005854:	d804      	bhi.n	8005860 <_strtoul_l.isra.0+0xb4>
 8005856:	3c57      	subs	r4, #87	; 0x57
 8005858:	e7dc      	b.n	8005814 <_strtoul_l.isra.0+0x68>
 800585a:	f04f 33ff 	mov.w	r3, #4294967295
 800585e:	e7e5      	b.n	800582c <_strtoul_l.isra.0+0x80>
 8005860:	2b00      	cmp	r3, #0
 8005862:	da09      	bge.n	8005878 <_strtoul_l.isra.0+0xcc>
 8005864:	2322      	movs	r3, #34	; 0x22
 8005866:	f04f 30ff 	mov.w	r0, #4294967295
 800586a:	f8c8 3000 	str.w	r3, [r8]
 800586e:	f1ba 0f00 	cmp.w	sl, #0
 8005872:	d107      	bne.n	8005884 <_strtoul_l.isra.0+0xd8>
 8005874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005878:	b101      	cbz	r1, 800587c <_strtoul_l.isra.0+0xd0>
 800587a:	4240      	negs	r0, r0
 800587c:	f1ba 0f00 	cmp.w	sl, #0
 8005880:	d0f8      	beq.n	8005874 <_strtoul_l.isra.0+0xc8>
 8005882:	b10b      	cbz	r3, 8005888 <_strtoul_l.isra.0+0xdc>
 8005884:	f105 39ff 	add.w	r9, r5, #4294967295
 8005888:	f8ca 9000 	str.w	r9, [sl]
 800588c:	e7f2      	b.n	8005874 <_strtoul_l.isra.0+0xc8>
 800588e:	2430      	movs	r4, #48	; 0x30
 8005890:	2e00      	cmp	r6, #0
 8005892:	d1b0      	bne.n	80057f6 <_strtoul_l.isra.0+0x4a>
 8005894:	2608      	movs	r6, #8
 8005896:	e7ae      	b.n	80057f6 <_strtoul_l.isra.0+0x4a>
 8005898:	2c30      	cmp	r4, #48	; 0x30
 800589a:	d0a4      	beq.n	80057e6 <_strtoul_l.isra.0+0x3a>
 800589c:	260a      	movs	r6, #10
 800589e:	e7aa      	b.n	80057f6 <_strtoul_l.isra.0+0x4a>

080058a0 <strtoul>:
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <strtoul+0x24>)
 80058a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058a4:	681c      	ldr	r4, [r3, #0]
 80058a6:	4d08      	ldr	r5, [pc, #32]	; (80058c8 <strtoul+0x28>)
 80058a8:	6a23      	ldr	r3, [r4, #32]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bf08      	it	eq
 80058ae:	462b      	moveq	r3, r5
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	4613      	mov	r3, r2
 80058b4:	460a      	mov	r2, r1
 80058b6:	4601      	mov	r1, r0
 80058b8:	4620      	mov	r0, r4
 80058ba:	f7ff ff77 	bl	80057ac <_strtoul_l.isra.0>
 80058be:	b003      	add	sp, #12
 80058c0:	bd30      	pop	{r4, r5, pc}
 80058c2:	bf00      	nop
 80058c4:	20000020 	.word	0x20000020
 80058c8:	20000084 	.word	0x20000084

080058cc <__swbuf_r>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	460e      	mov	r6, r1
 80058d0:	4614      	mov	r4, r2
 80058d2:	4605      	mov	r5, r0
 80058d4:	b118      	cbz	r0, 80058de <__swbuf_r+0x12>
 80058d6:	6983      	ldr	r3, [r0, #24]
 80058d8:	b90b      	cbnz	r3, 80058de <__swbuf_r+0x12>
 80058da:	f000 f9b5 	bl	8005c48 <__sinit>
 80058de:	4b21      	ldr	r3, [pc, #132]	; (8005964 <__swbuf_r+0x98>)
 80058e0:	429c      	cmp	r4, r3
 80058e2:	d12a      	bne.n	800593a <__swbuf_r+0x6e>
 80058e4:	686c      	ldr	r4, [r5, #4]
 80058e6:	69a3      	ldr	r3, [r4, #24]
 80058e8:	60a3      	str	r3, [r4, #8]
 80058ea:	89a3      	ldrh	r3, [r4, #12]
 80058ec:	071a      	lsls	r2, r3, #28
 80058ee:	d52e      	bpl.n	800594e <__swbuf_r+0x82>
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	b363      	cbz	r3, 800594e <__swbuf_r+0x82>
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	6820      	ldr	r0, [r4, #0]
 80058f8:	b2f6      	uxtb	r6, r6
 80058fa:	1ac0      	subs	r0, r0, r3
 80058fc:	6963      	ldr	r3, [r4, #20]
 80058fe:	4637      	mov	r7, r6
 8005900:	4283      	cmp	r3, r0
 8005902:	dc04      	bgt.n	800590e <__swbuf_r+0x42>
 8005904:	4621      	mov	r1, r4
 8005906:	4628      	mov	r0, r5
 8005908:	f000 f934 	bl	8005b74 <_fflush_r>
 800590c:	bb28      	cbnz	r0, 800595a <__swbuf_r+0x8e>
 800590e:	68a3      	ldr	r3, [r4, #8]
 8005910:	3001      	adds	r0, #1
 8005912:	3b01      	subs	r3, #1
 8005914:	60a3      	str	r3, [r4, #8]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	6022      	str	r2, [r4, #0]
 800591c:	701e      	strb	r6, [r3, #0]
 800591e:	6963      	ldr	r3, [r4, #20]
 8005920:	4283      	cmp	r3, r0
 8005922:	d004      	beq.n	800592e <__swbuf_r+0x62>
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	07db      	lsls	r3, r3, #31
 8005928:	d519      	bpl.n	800595e <__swbuf_r+0x92>
 800592a:	2e0a      	cmp	r6, #10
 800592c:	d117      	bne.n	800595e <__swbuf_r+0x92>
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f000 f91f 	bl	8005b74 <_fflush_r>
 8005936:	b190      	cbz	r0, 800595e <__swbuf_r+0x92>
 8005938:	e00f      	b.n	800595a <__swbuf_r+0x8e>
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <__swbuf_r+0x9c>)
 800593c:	429c      	cmp	r4, r3
 800593e:	d101      	bne.n	8005944 <__swbuf_r+0x78>
 8005940:	68ac      	ldr	r4, [r5, #8]
 8005942:	e7d0      	b.n	80058e6 <__swbuf_r+0x1a>
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <__swbuf_r+0xa0>)
 8005946:	429c      	cmp	r4, r3
 8005948:	bf08      	it	eq
 800594a:	68ec      	ldreq	r4, [r5, #12]
 800594c:	e7cb      	b.n	80058e6 <__swbuf_r+0x1a>
 800594e:	4621      	mov	r1, r4
 8005950:	4628      	mov	r0, r5
 8005952:	f000 f81b 	bl	800598c <__swsetup_r>
 8005956:	2800      	cmp	r0, #0
 8005958:	d0cc      	beq.n	80058f4 <__swbuf_r+0x28>
 800595a:	f04f 37ff 	mov.w	r7, #4294967295
 800595e:	4638      	mov	r0, r7
 8005960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005962:	bf00      	nop
 8005964:	08006e10 	.word	0x08006e10
 8005968:	08006e30 	.word	0x08006e30
 800596c:	08006df0 	.word	0x08006df0

08005970 <__ascii_wctomb>:
 8005970:	b149      	cbz	r1, 8005986 <__ascii_wctomb+0x16>
 8005972:	2aff      	cmp	r2, #255	; 0xff
 8005974:	bf8b      	itete	hi
 8005976:	238a      	movhi	r3, #138	; 0x8a
 8005978:	700a      	strbls	r2, [r1, #0]
 800597a:	6003      	strhi	r3, [r0, #0]
 800597c:	2001      	movls	r0, #1
 800597e:	bf88      	it	hi
 8005980:	f04f 30ff 	movhi.w	r0, #4294967295
 8005984:	4770      	bx	lr
 8005986:	4608      	mov	r0, r1
 8005988:	4770      	bx	lr
	...

0800598c <__swsetup_r>:
 800598c:	4b32      	ldr	r3, [pc, #200]	; (8005a58 <__swsetup_r+0xcc>)
 800598e:	b570      	push	{r4, r5, r6, lr}
 8005990:	681d      	ldr	r5, [r3, #0]
 8005992:	4606      	mov	r6, r0
 8005994:	460c      	mov	r4, r1
 8005996:	b125      	cbz	r5, 80059a2 <__swsetup_r+0x16>
 8005998:	69ab      	ldr	r3, [r5, #24]
 800599a:	b913      	cbnz	r3, 80059a2 <__swsetup_r+0x16>
 800599c:	4628      	mov	r0, r5
 800599e:	f000 f953 	bl	8005c48 <__sinit>
 80059a2:	4b2e      	ldr	r3, [pc, #184]	; (8005a5c <__swsetup_r+0xd0>)
 80059a4:	429c      	cmp	r4, r3
 80059a6:	d10f      	bne.n	80059c8 <__swsetup_r+0x3c>
 80059a8:	686c      	ldr	r4, [r5, #4]
 80059aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	0715      	lsls	r5, r2, #28
 80059b2:	d42c      	bmi.n	8005a0e <__swsetup_r+0x82>
 80059b4:	06d0      	lsls	r0, r2, #27
 80059b6:	d411      	bmi.n	80059dc <__swsetup_r+0x50>
 80059b8:	2209      	movs	r2, #9
 80059ba:	6032      	str	r2, [r6, #0]
 80059bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	e03e      	b.n	8005a46 <__swsetup_r+0xba>
 80059c8:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <__swsetup_r+0xd4>)
 80059ca:	429c      	cmp	r4, r3
 80059cc:	d101      	bne.n	80059d2 <__swsetup_r+0x46>
 80059ce:	68ac      	ldr	r4, [r5, #8]
 80059d0:	e7eb      	b.n	80059aa <__swsetup_r+0x1e>
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <__swsetup_r+0xd8>)
 80059d4:	429c      	cmp	r4, r3
 80059d6:	bf08      	it	eq
 80059d8:	68ec      	ldreq	r4, [r5, #12]
 80059da:	e7e6      	b.n	80059aa <__swsetup_r+0x1e>
 80059dc:	0751      	lsls	r1, r2, #29
 80059de:	d512      	bpl.n	8005a06 <__swsetup_r+0x7a>
 80059e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059e2:	b141      	cbz	r1, 80059f6 <__swsetup_r+0x6a>
 80059e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059e8:	4299      	cmp	r1, r3
 80059ea:	d002      	beq.n	80059f2 <__swsetup_r+0x66>
 80059ec:	4630      	mov	r0, r6
 80059ee:	f000 fa19 	bl	8005e24 <_free_r>
 80059f2:	2300      	movs	r3, #0
 80059f4:	6363      	str	r3, [r4, #52]	; 0x34
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059fc:	81a3      	strh	r3, [r4, #12]
 80059fe:	2300      	movs	r3, #0
 8005a00:	6063      	str	r3, [r4, #4]
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	f043 0308 	orr.w	r3, r3, #8
 8005a0c:	81a3      	strh	r3, [r4, #12]
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	b94b      	cbnz	r3, 8005a26 <__swsetup_r+0x9a>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a1c:	d003      	beq.n	8005a26 <__swsetup_r+0x9a>
 8005a1e:	4621      	mov	r1, r4
 8005a20:	4630      	mov	r0, r6
 8005a22:	f000 f9bf 	bl	8005da4 <__smakebuf_r>
 8005a26:	89a2      	ldrh	r2, [r4, #12]
 8005a28:	f012 0301 	ands.w	r3, r2, #1
 8005a2c:	d00c      	beq.n	8005a48 <__swsetup_r+0xbc>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	6963      	ldr	r3, [r4, #20]
 8005a34:	425b      	negs	r3, r3
 8005a36:	61a3      	str	r3, [r4, #24]
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	b953      	cbnz	r3, 8005a52 <__swsetup_r+0xc6>
 8005a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005a44:	d1ba      	bne.n	80059bc <__swsetup_r+0x30>
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	0792      	lsls	r2, r2, #30
 8005a4a:	bf58      	it	pl
 8005a4c:	6963      	ldrpl	r3, [r4, #20]
 8005a4e:	60a3      	str	r3, [r4, #8]
 8005a50:	e7f2      	b.n	8005a38 <__swsetup_r+0xac>
 8005a52:	2000      	movs	r0, #0
 8005a54:	e7f7      	b.n	8005a46 <__swsetup_r+0xba>
 8005a56:	bf00      	nop
 8005a58:	20000020 	.word	0x20000020
 8005a5c:	08006e10 	.word	0x08006e10
 8005a60:	08006e30 	.word	0x08006e30
 8005a64:	08006df0 	.word	0x08006df0

08005a68 <__sflush_r>:
 8005a68:	898a      	ldrh	r2, [r1, #12]
 8005a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	4605      	mov	r5, r0
 8005a70:	0710      	lsls	r0, r2, #28
 8005a72:	460c      	mov	r4, r1
 8005a74:	d458      	bmi.n	8005b28 <__sflush_r+0xc0>
 8005a76:	684b      	ldr	r3, [r1, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dc05      	bgt.n	8005a88 <__sflush_r+0x20>
 8005a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dc02      	bgt.n	8005a88 <__sflush_r+0x20>
 8005a82:	2000      	movs	r0, #0
 8005a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	d0f9      	beq.n	8005a82 <__sflush_r+0x1a>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a94:	682f      	ldr	r7, [r5, #0]
 8005a96:	6a21      	ldr	r1, [r4, #32]
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	d032      	beq.n	8005b02 <__sflush_r+0x9a>
 8005a9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	075a      	lsls	r2, r3, #29
 8005aa2:	d505      	bpl.n	8005ab0 <__sflush_r+0x48>
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	1ac0      	subs	r0, r0, r3
 8005aa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005aaa:	b10b      	cbz	r3, 8005ab0 <__sflush_r+0x48>
 8005aac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005aae:	1ac0      	subs	r0, r0, r3
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ab6:	6a21      	ldr	r1, [r4, #32]
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b0      	blx	r6
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	d106      	bne.n	8005ad0 <__sflush_r+0x68>
 8005ac2:	6829      	ldr	r1, [r5, #0]
 8005ac4:	291d      	cmp	r1, #29
 8005ac6:	d848      	bhi.n	8005b5a <__sflush_r+0xf2>
 8005ac8:	4a29      	ldr	r2, [pc, #164]	; (8005b70 <__sflush_r+0x108>)
 8005aca:	40ca      	lsrs	r2, r1
 8005acc:	07d6      	lsls	r6, r2, #31
 8005ace:	d544      	bpl.n	8005b5a <__sflush_r+0xf2>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	6062      	str	r2, [r4, #4]
 8005ad4:	6922      	ldr	r2, [r4, #16]
 8005ad6:	04d9      	lsls	r1, r3, #19
 8005ad8:	6022      	str	r2, [r4, #0]
 8005ada:	d504      	bpl.n	8005ae6 <__sflush_r+0x7e>
 8005adc:	1c42      	adds	r2, r0, #1
 8005ade:	d101      	bne.n	8005ae4 <__sflush_r+0x7c>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b903      	cbnz	r3, 8005ae6 <__sflush_r+0x7e>
 8005ae4:	6560      	str	r0, [r4, #84]	; 0x54
 8005ae6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ae8:	602f      	str	r7, [r5, #0]
 8005aea:	2900      	cmp	r1, #0
 8005aec:	d0c9      	beq.n	8005a82 <__sflush_r+0x1a>
 8005aee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af2:	4299      	cmp	r1, r3
 8005af4:	d002      	beq.n	8005afc <__sflush_r+0x94>
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 f994 	bl	8005e24 <_free_r>
 8005afc:	2000      	movs	r0, #0
 8005afe:	6360      	str	r0, [r4, #52]	; 0x34
 8005b00:	e7c0      	b.n	8005a84 <__sflush_r+0x1c>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4628      	mov	r0, r5
 8005b06:	47b0      	blx	r6
 8005b08:	1c41      	adds	r1, r0, #1
 8005b0a:	d1c8      	bne.n	8005a9e <__sflush_r+0x36>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0c5      	beq.n	8005a9e <__sflush_r+0x36>
 8005b12:	2b1d      	cmp	r3, #29
 8005b14:	d001      	beq.n	8005b1a <__sflush_r+0xb2>
 8005b16:	2b16      	cmp	r3, #22
 8005b18:	d101      	bne.n	8005b1e <__sflush_r+0xb6>
 8005b1a:	602f      	str	r7, [r5, #0]
 8005b1c:	e7b1      	b.n	8005a82 <__sflush_r+0x1a>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	e7ad      	b.n	8005a84 <__sflush_r+0x1c>
 8005b28:	690f      	ldr	r7, [r1, #16]
 8005b2a:	2f00      	cmp	r7, #0
 8005b2c:	d0a9      	beq.n	8005a82 <__sflush_r+0x1a>
 8005b2e:	0793      	lsls	r3, r2, #30
 8005b30:	bf18      	it	ne
 8005b32:	2300      	movne	r3, #0
 8005b34:	680e      	ldr	r6, [r1, #0]
 8005b36:	bf08      	it	eq
 8005b38:	694b      	ldreq	r3, [r1, #20]
 8005b3a:	eba6 0807 	sub.w	r8, r6, r7
 8005b3e:	600f      	str	r7, [r1, #0]
 8005b40:	608b      	str	r3, [r1, #8]
 8005b42:	f1b8 0f00 	cmp.w	r8, #0
 8005b46:	dd9c      	ble.n	8005a82 <__sflush_r+0x1a>
 8005b48:	4643      	mov	r3, r8
 8005b4a:	463a      	mov	r2, r7
 8005b4c:	6a21      	ldr	r1, [r4, #32]
 8005b4e:	4628      	mov	r0, r5
 8005b50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b52:	47b0      	blx	r6
 8005b54:	2800      	cmp	r0, #0
 8005b56:	dc06      	bgt.n	8005b66 <__sflush_r+0xfe>
 8005b58:	89a3      	ldrh	r3, [r4, #12]
 8005b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5e:	81a3      	strh	r3, [r4, #12]
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	e78e      	b.n	8005a84 <__sflush_r+0x1c>
 8005b66:	4407      	add	r7, r0
 8005b68:	eba8 0800 	sub.w	r8, r8, r0
 8005b6c:	e7e9      	b.n	8005b42 <__sflush_r+0xda>
 8005b6e:	bf00      	nop
 8005b70:	20400001 	.word	0x20400001

08005b74 <_fflush_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	690b      	ldr	r3, [r1, #16]
 8005b78:	4605      	mov	r5, r0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	b1db      	cbz	r3, 8005bb6 <_fflush_r+0x42>
 8005b7e:	b118      	cbz	r0, 8005b88 <_fflush_r+0x14>
 8005b80:	6983      	ldr	r3, [r0, #24]
 8005b82:	b90b      	cbnz	r3, 8005b88 <_fflush_r+0x14>
 8005b84:	f000 f860 	bl	8005c48 <__sinit>
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <_fflush_r+0x48>)
 8005b8a:	429c      	cmp	r4, r3
 8005b8c:	d109      	bne.n	8005ba2 <_fflush_r+0x2e>
 8005b8e:	686c      	ldr	r4, [r5, #4]
 8005b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b94:	b17b      	cbz	r3, 8005bb6 <_fflush_r+0x42>
 8005b96:	4621      	mov	r1, r4
 8005b98:	4628      	mov	r0, r5
 8005b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9e:	f7ff bf63 	b.w	8005a68 <__sflush_r>
 8005ba2:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <_fflush_r+0x4c>)
 8005ba4:	429c      	cmp	r4, r3
 8005ba6:	d101      	bne.n	8005bac <_fflush_r+0x38>
 8005ba8:	68ac      	ldr	r4, [r5, #8]
 8005baa:	e7f1      	b.n	8005b90 <_fflush_r+0x1c>
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <_fflush_r+0x50>)
 8005bae:	429c      	cmp	r4, r3
 8005bb0:	bf08      	it	eq
 8005bb2:	68ec      	ldreq	r4, [r5, #12]
 8005bb4:	e7ec      	b.n	8005b90 <_fflush_r+0x1c>
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	bd38      	pop	{r3, r4, r5, pc}
 8005bba:	bf00      	nop
 8005bbc:	08006e10 	.word	0x08006e10
 8005bc0:	08006e30 	.word	0x08006e30
 8005bc4:	08006df0 	.word	0x08006df0

08005bc8 <std>:
 8005bc8:	2300      	movs	r3, #0
 8005bca:	b510      	push	{r4, lr}
 8005bcc:	4604      	mov	r4, r0
 8005bce:	e9c0 3300 	strd	r3, r3, [r0]
 8005bd2:	6083      	str	r3, [r0, #8]
 8005bd4:	8181      	strh	r1, [r0, #12]
 8005bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8005bd8:	81c2      	strh	r2, [r0, #14]
 8005bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bde:	6183      	str	r3, [r0, #24]
 8005be0:	4619      	mov	r1, r3
 8005be2:	2208      	movs	r2, #8
 8005be4:	305c      	adds	r0, #92	; 0x5c
 8005be6:	f7ff fc9b 	bl	8005520 <memset>
 8005bea:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <std+0x38>)
 8005bec:	6224      	str	r4, [r4, #32]
 8005bee:	6263      	str	r3, [r4, #36]	; 0x24
 8005bf0:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <std+0x3c>)
 8005bf2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <std+0x40>)
 8005bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bf8:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <std+0x44>)
 8005bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8005bfc:	bd10      	pop	{r4, pc}
 8005bfe:	bf00      	nop
 8005c00:	0800651d 	.word	0x0800651d
 8005c04:	0800653f 	.word	0x0800653f
 8005c08:	08006577 	.word	0x08006577
 8005c0c:	0800659b 	.word	0x0800659b

08005c10 <_cleanup_r>:
 8005c10:	4901      	ldr	r1, [pc, #4]	; (8005c18 <_cleanup_r+0x8>)
 8005c12:	f000 b885 	b.w	8005d20 <_fwalk_reent>
 8005c16:	bf00      	nop
 8005c18:	08005b75 	.word	0x08005b75

08005c1c <__sfmoreglue>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	2568      	movs	r5, #104	; 0x68
 8005c20:	1e4a      	subs	r2, r1, #1
 8005c22:	4355      	muls	r5, r2
 8005c24:	460e      	mov	r6, r1
 8005c26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005c2a:	f000 f947 	bl	8005ebc <_malloc_r>
 8005c2e:	4604      	mov	r4, r0
 8005c30:	b140      	cbz	r0, 8005c44 <__sfmoreglue+0x28>
 8005c32:	2100      	movs	r1, #0
 8005c34:	e9c0 1600 	strd	r1, r6, [r0]
 8005c38:	300c      	adds	r0, #12
 8005c3a:	60a0      	str	r0, [r4, #8]
 8005c3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005c40:	f7ff fc6e 	bl	8005520 <memset>
 8005c44:	4620      	mov	r0, r4
 8005c46:	bd70      	pop	{r4, r5, r6, pc}

08005c48 <__sinit>:
 8005c48:	6983      	ldr	r3, [r0, #24]
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	bb33      	cbnz	r3, 8005c9e <__sinit+0x56>
 8005c50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005c54:	6503      	str	r3, [r0, #80]	; 0x50
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <__sinit+0x58>)
 8005c58:	4a12      	ldr	r2, [pc, #72]	; (8005ca4 <__sinit+0x5c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6282      	str	r2, [r0, #40]	; 0x28
 8005c5e:	4298      	cmp	r0, r3
 8005c60:	bf04      	itt	eq
 8005c62:	2301      	moveq	r3, #1
 8005c64:	6183      	streq	r3, [r0, #24]
 8005c66:	f000 f81f 	bl	8005ca8 <__sfp>
 8005c6a:	6060      	str	r0, [r4, #4]
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 f81b 	bl	8005ca8 <__sfp>
 8005c72:	60a0      	str	r0, [r4, #8]
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 f817 	bl	8005ca8 <__sfp>
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	60e0      	str	r0, [r4, #12]
 8005c7e:	2104      	movs	r1, #4
 8005c80:	6860      	ldr	r0, [r4, #4]
 8005c82:	f7ff ffa1 	bl	8005bc8 <std>
 8005c86:	2201      	movs	r2, #1
 8005c88:	2109      	movs	r1, #9
 8005c8a:	68a0      	ldr	r0, [r4, #8]
 8005c8c:	f7ff ff9c 	bl	8005bc8 <std>
 8005c90:	2202      	movs	r2, #2
 8005c92:	2112      	movs	r1, #18
 8005c94:	68e0      	ldr	r0, [r4, #12]
 8005c96:	f7ff ff97 	bl	8005bc8 <std>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	61a3      	str	r3, [r4, #24]
 8005c9e:	bd10      	pop	{r4, pc}
 8005ca0:	08006ce0 	.word	0x08006ce0
 8005ca4:	08005c11 	.word	0x08005c11

08005ca8 <__sfp>:
 8005ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <__sfp+0x70>)
 8005cac:	4607      	mov	r7, r0
 8005cae:	681e      	ldr	r6, [r3, #0]
 8005cb0:	69b3      	ldr	r3, [r6, #24]
 8005cb2:	b913      	cbnz	r3, 8005cba <__sfp+0x12>
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	f7ff ffc7 	bl	8005c48 <__sinit>
 8005cba:	3648      	adds	r6, #72	; 0x48
 8005cbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	d503      	bpl.n	8005ccc <__sfp+0x24>
 8005cc4:	6833      	ldr	r3, [r6, #0]
 8005cc6:	b133      	cbz	r3, 8005cd6 <__sfp+0x2e>
 8005cc8:	6836      	ldr	r6, [r6, #0]
 8005cca:	e7f7      	b.n	8005cbc <__sfp+0x14>
 8005ccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cd0:	b16d      	cbz	r5, 8005cee <__sfp+0x46>
 8005cd2:	3468      	adds	r4, #104	; 0x68
 8005cd4:	e7f4      	b.n	8005cc0 <__sfp+0x18>
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f7ff ff9f 	bl	8005c1c <__sfmoreglue>
 8005cde:	6030      	str	r0, [r6, #0]
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d1f1      	bne.n	8005cc8 <__sfp+0x20>
 8005ce4:	230c      	movs	r3, #12
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4620      	mov	r0, r4
 8005cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <__sfp+0x74>)
 8005cf0:	6665      	str	r5, [r4, #100]	; 0x64
 8005cf2:	e9c4 5500 	strd	r5, r5, [r4]
 8005cf6:	60a5      	str	r5, [r4, #8]
 8005cf8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005cfc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005d00:	2208      	movs	r2, #8
 8005d02:	4629      	mov	r1, r5
 8005d04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005d08:	f7ff fc0a 	bl	8005520 <memset>
 8005d0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005d10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005d14:	e7e9      	b.n	8005cea <__sfp+0x42>
 8005d16:	bf00      	nop
 8005d18:	08006ce0 	.word	0x08006ce0
 8005d1c:	ffff0001 	.word	0xffff0001

08005d20 <_fwalk_reent>:
 8005d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d24:	4680      	mov	r8, r0
 8005d26:	4689      	mov	r9, r1
 8005d28:	2600      	movs	r6, #0
 8005d2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d2e:	b914      	cbnz	r4, 8005d36 <_fwalk_reent+0x16>
 8005d30:	4630      	mov	r0, r6
 8005d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d36:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005d3a:	3f01      	subs	r7, #1
 8005d3c:	d501      	bpl.n	8005d42 <_fwalk_reent+0x22>
 8005d3e:	6824      	ldr	r4, [r4, #0]
 8005d40:	e7f5      	b.n	8005d2e <_fwalk_reent+0xe>
 8005d42:	89ab      	ldrh	r3, [r5, #12]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d907      	bls.n	8005d58 <_fwalk_reent+0x38>
 8005d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	d003      	beq.n	8005d58 <_fwalk_reent+0x38>
 8005d50:	4629      	mov	r1, r5
 8005d52:	4640      	mov	r0, r8
 8005d54:	47c8      	blx	r9
 8005d56:	4306      	orrs	r6, r0
 8005d58:	3568      	adds	r5, #104	; 0x68
 8005d5a:	e7ee      	b.n	8005d3a <_fwalk_reent+0x1a>

08005d5c <__swhatbuf_r>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	460e      	mov	r6, r1
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	b096      	sub	sp, #88	; 0x58
 8005d66:	2900      	cmp	r1, #0
 8005d68:	4614      	mov	r4, r2
 8005d6a:	461d      	mov	r5, r3
 8005d6c:	da07      	bge.n	8005d7e <__swhatbuf_r+0x22>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	89b3      	ldrh	r3, [r6, #12]
 8005d74:	061a      	lsls	r2, r3, #24
 8005d76:	d410      	bmi.n	8005d9a <__swhatbuf_r+0x3e>
 8005d78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7c:	e00e      	b.n	8005d9c <__swhatbuf_r+0x40>
 8005d7e:	466a      	mov	r2, sp
 8005d80:	f000 fc32 	bl	80065e8 <_fstat_r>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	dbf2      	blt.n	8005d6e <__swhatbuf_r+0x12>
 8005d88:	9a01      	ldr	r2, [sp, #4]
 8005d8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d92:	425a      	negs	r2, r3
 8005d94:	415a      	adcs	r2, r3
 8005d96:	602a      	str	r2, [r5, #0]
 8005d98:	e7ee      	b.n	8005d78 <__swhatbuf_r+0x1c>
 8005d9a:	2340      	movs	r3, #64	; 0x40
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	b016      	add	sp, #88	; 0x58
 8005da2:	bd70      	pop	{r4, r5, r6, pc}

08005da4 <__smakebuf_r>:
 8005da4:	898b      	ldrh	r3, [r1, #12]
 8005da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005da8:	079d      	lsls	r5, r3, #30
 8005daa:	4606      	mov	r6, r0
 8005dac:	460c      	mov	r4, r1
 8005dae:	d507      	bpl.n	8005dc0 <__smakebuf_r+0x1c>
 8005db0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	6123      	str	r3, [r4, #16]
 8005db8:	2301      	movs	r3, #1
 8005dba:	6163      	str	r3, [r4, #20]
 8005dbc:	b002      	add	sp, #8
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}
 8005dc0:	ab01      	add	r3, sp, #4
 8005dc2:	466a      	mov	r2, sp
 8005dc4:	f7ff ffca 	bl	8005d5c <__swhatbuf_r>
 8005dc8:	9900      	ldr	r1, [sp, #0]
 8005dca:	4605      	mov	r5, r0
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f000 f875 	bl	8005ebc <_malloc_r>
 8005dd2:	b948      	cbnz	r0, 8005de8 <__smakebuf_r+0x44>
 8005dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd8:	059a      	lsls	r2, r3, #22
 8005dda:	d4ef      	bmi.n	8005dbc <__smakebuf_r+0x18>
 8005ddc:	f023 0303 	bic.w	r3, r3, #3
 8005de0:	f043 0302 	orr.w	r3, r3, #2
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	e7e3      	b.n	8005db0 <__smakebuf_r+0xc>
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <__smakebuf_r+0x7c>)
 8005dea:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	6020      	str	r0, [r4, #0]
 8005df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df4:	81a3      	strh	r3, [r4, #12]
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	6120      	str	r0, [r4, #16]
 8005dfa:	6163      	str	r3, [r4, #20]
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	b15b      	cbz	r3, 8005e18 <__smakebuf_r+0x74>
 8005e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e04:	4630      	mov	r0, r6
 8005e06:	f000 fc01 	bl	800660c <_isatty_r>
 8005e0a:	b128      	cbz	r0, 8005e18 <__smakebuf_r+0x74>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	81a3      	strh	r3, [r4, #12]
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	431d      	orrs	r5, r3
 8005e1c:	81a5      	strh	r5, [r4, #12]
 8005e1e:	e7cd      	b.n	8005dbc <__smakebuf_r+0x18>
 8005e20:	08005c11 	.word	0x08005c11

08005e24 <_free_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4605      	mov	r5, r0
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d043      	beq.n	8005eb4 <_free_r+0x90>
 8005e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e30:	1f0c      	subs	r4, r1, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bfb8      	it	lt
 8005e36:	18e4      	addlt	r4, r4, r3
 8005e38:	f000 fc18 	bl	800666c <__malloc_lock>
 8005e3c:	4a1e      	ldr	r2, [pc, #120]	; (8005eb8 <_free_r+0x94>)
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	4610      	mov	r0, r2
 8005e42:	b933      	cbnz	r3, 8005e52 <_free_r+0x2e>
 8005e44:	6063      	str	r3, [r4, #4]
 8005e46:	6014      	str	r4, [r2, #0]
 8005e48:	4628      	mov	r0, r5
 8005e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e4e:	f000 bc0e 	b.w	800666e <__malloc_unlock>
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	d90b      	bls.n	8005e6e <_free_r+0x4a>
 8005e56:	6821      	ldr	r1, [r4, #0]
 8005e58:	1862      	adds	r2, r4, r1
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bf01      	itttt	eq
 8005e5e:	681a      	ldreq	r2, [r3, #0]
 8005e60:	685b      	ldreq	r3, [r3, #4]
 8005e62:	1852      	addeq	r2, r2, r1
 8005e64:	6022      	streq	r2, [r4, #0]
 8005e66:	6063      	str	r3, [r4, #4]
 8005e68:	6004      	str	r4, [r0, #0]
 8005e6a:	e7ed      	b.n	8005e48 <_free_r+0x24>
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	b10a      	cbz	r2, 8005e76 <_free_r+0x52>
 8005e72:	42a2      	cmp	r2, r4
 8005e74:	d9fa      	bls.n	8005e6c <_free_r+0x48>
 8005e76:	6819      	ldr	r1, [r3, #0]
 8005e78:	1858      	adds	r0, r3, r1
 8005e7a:	42a0      	cmp	r0, r4
 8005e7c:	d10b      	bne.n	8005e96 <_free_r+0x72>
 8005e7e:	6820      	ldr	r0, [r4, #0]
 8005e80:	4401      	add	r1, r0
 8005e82:	1858      	adds	r0, r3, r1
 8005e84:	4282      	cmp	r2, r0
 8005e86:	6019      	str	r1, [r3, #0]
 8005e88:	d1de      	bne.n	8005e48 <_free_r+0x24>
 8005e8a:	6810      	ldr	r0, [r2, #0]
 8005e8c:	6852      	ldr	r2, [r2, #4]
 8005e8e:	4401      	add	r1, r0
 8005e90:	6019      	str	r1, [r3, #0]
 8005e92:	605a      	str	r2, [r3, #4]
 8005e94:	e7d8      	b.n	8005e48 <_free_r+0x24>
 8005e96:	d902      	bls.n	8005e9e <_free_r+0x7a>
 8005e98:	230c      	movs	r3, #12
 8005e9a:	602b      	str	r3, [r5, #0]
 8005e9c:	e7d4      	b.n	8005e48 <_free_r+0x24>
 8005e9e:	6820      	ldr	r0, [r4, #0]
 8005ea0:	1821      	adds	r1, r4, r0
 8005ea2:	428a      	cmp	r2, r1
 8005ea4:	bf01      	itttt	eq
 8005ea6:	6811      	ldreq	r1, [r2, #0]
 8005ea8:	6852      	ldreq	r2, [r2, #4]
 8005eaa:	1809      	addeq	r1, r1, r0
 8005eac:	6021      	streq	r1, [r4, #0]
 8005eae:	6062      	str	r2, [r4, #4]
 8005eb0:	605c      	str	r4, [r3, #4]
 8005eb2:	e7c9      	b.n	8005e48 <_free_r+0x24>
 8005eb4:	bd38      	pop	{r3, r4, r5, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000210 	.word	0x20000210

08005ebc <_malloc_r>:
 8005ebc:	b570      	push	{r4, r5, r6, lr}
 8005ebe:	1ccd      	adds	r5, r1, #3
 8005ec0:	f025 0503 	bic.w	r5, r5, #3
 8005ec4:	3508      	adds	r5, #8
 8005ec6:	2d0c      	cmp	r5, #12
 8005ec8:	bf38      	it	cc
 8005eca:	250c      	movcc	r5, #12
 8005ecc:	2d00      	cmp	r5, #0
 8005ece:	4606      	mov	r6, r0
 8005ed0:	db01      	blt.n	8005ed6 <_malloc_r+0x1a>
 8005ed2:	42a9      	cmp	r1, r5
 8005ed4:	d903      	bls.n	8005ede <_malloc_r+0x22>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	6033      	str	r3, [r6, #0]
 8005eda:	2000      	movs	r0, #0
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	f000 fbc5 	bl	800666c <__malloc_lock>
 8005ee2:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <_malloc_r+0xac>)
 8005ee4:	6814      	ldr	r4, [r2, #0]
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	b991      	cbnz	r1, 8005f10 <_malloc_r+0x54>
 8005eea:	4c20      	ldr	r4, [pc, #128]	; (8005f6c <_malloc_r+0xb0>)
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	b91b      	cbnz	r3, 8005ef8 <_malloc_r+0x3c>
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f000 fb03 	bl	80064fc <_sbrk_r>
 8005ef6:	6020      	str	r0, [r4, #0]
 8005ef8:	4629      	mov	r1, r5
 8005efa:	4630      	mov	r0, r6
 8005efc:	f000 fafe 	bl	80064fc <_sbrk_r>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d124      	bne.n	8005f4e <_malloc_r+0x92>
 8005f04:	230c      	movs	r3, #12
 8005f06:	4630      	mov	r0, r6
 8005f08:	6033      	str	r3, [r6, #0]
 8005f0a:	f000 fbb0 	bl	800666e <__malloc_unlock>
 8005f0e:	e7e4      	b.n	8005eda <_malloc_r+0x1e>
 8005f10:	680b      	ldr	r3, [r1, #0]
 8005f12:	1b5b      	subs	r3, r3, r5
 8005f14:	d418      	bmi.n	8005f48 <_malloc_r+0x8c>
 8005f16:	2b0b      	cmp	r3, #11
 8005f18:	d90f      	bls.n	8005f3a <_malloc_r+0x7e>
 8005f1a:	600b      	str	r3, [r1, #0]
 8005f1c:	18cc      	adds	r4, r1, r3
 8005f1e:	50cd      	str	r5, [r1, r3]
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 fba4 	bl	800666e <__malloc_unlock>
 8005f26:	f104 000b 	add.w	r0, r4, #11
 8005f2a:	1d23      	adds	r3, r4, #4
 8005f2c:	f020 0007 	bic.w	r0, r0, #7
 8005f30:	1ac3      	subs	r3, r0, r3
 8005f32:	d0d3      	beq.n	8005edc <_malloc_r+0x20>
 8005f34:	425a      	negs	r2, r3
 8005f36:	50e2      	str	r2, [r4, r3]
 8005f38:	e7d0      	b.n	8005edc <_malloc_r+0x20>
 8005f3a:	684b      	ldr	r3, [r1, #4]
 8005f3c:	428c      	cmp	r4, r1
 8005f3e:	bf16      	itet	ne
 8005f40:	6063      	strne	r3, [r4, #4]
 8005f42:	6013      	streq	r3, [r2, #0]
 8005f44:	460c      	movne	r4, r1
 8005f46:	e7eb      	b.n	8005f20 <_malloc_r+0x64>
 8005f48:	460c      	mov	r4, r1
 8005f4a:	6849      	ldr	r1, [r1, #4]
 8005f4c:	e7cc      	b.n	8005ee8 <_malloc_r+0x2c>
 8005f4e:	1cc4      	adds	r4, r0, #3
 8005f50:	f024 0403 	bic.w	r4, r4, #3
 8005f54:	42a0      	cmp	r0, r4
 8005f56:	d005      	beq.n	8005f64 <_malloc_r+0xa8>
 8005f58:	1a21      	subs	r1, r4, r0
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	f000 face 	bl	80064fc <_sbrk_r>
 8005f60:	3001      	adds	r0, #1
 8005f62:	d0cf      	beq.n	8005f04 <_malloc_r+0x48>
 8005f64:	6025      	str	r5, [r4, #0]
 8005f66:	e7db      	b.n	8005f20 <_malloc_r+0x64>
 8005f68:	20000210 	.word	0x20000210
 8005f6c:	20000214 	.word	0x20000214

08005f70 <__sfputc_r>:
 8005f70:	6893      	ldr	r3, [r2, #8]
 8005f72:	b410      	push	{r4}
 8005f74:	3b01      	subs	r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	6093      	str	r3, [r2, #8]
 8005f7a:	da07      	bge.n	8005f8c <__sfputc_r+0x1c>
 8005f7c:	6994      	ldr	r4, [r2, #24]
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	db01      	blt.n	8005f86 <__sfputc_r+0x16>
 8005f82:	290a      	cmp	r1, #10
 8005f84:	d102      	bne.n	8005f8c <__sfputc_r+0x1c>
 8005f86:	bc10      	pop	{r4}
 8005f88:	f7ff bca0 	b.w	80058cc <__swbuf_r>
 8005f8c:	6813      	ldr	r3, [r2, #0]
 8005f8e:	1c58      	adds	r0, r3, #1
 8005f90:	6010      	str	r0, [r2, #0]
 8005f92:	7019      	strb	r1, [r3, #0]
 8005f94:	4608      	mov	r0, r1
 8005f96:	bc10      	pop	{r4}
 8005f98:	4770      	bx	lr

08005f9a <__sfputs_r>:
 8005f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9c:	4606      	mov	r6, r0
 8005f9e:	460f      	mov	r7, r1
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	18d5      	adds	r5, r2, r3
 8005fa4:	42ac      	cmp	r4, r5
 8005fa6:	d101      	bne.n	8005fac <__sfputs_r+0x12>
 8005fa8:	2000      	movs	r0, #0
 8005faa:	e007      	b.n	8005fbc <__sfputs_r+0x22>
 8005fac:	463a      	mov	r2, r7
 8005fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f7ff ffdc 	bl	8005f70 <__sfputc_r>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d1f3      	bne.n	8005fa4 <__sfputs_r+0xa>
 8005fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fc0 <_vfiprintf_r>:
 8005fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	b09d      	sub	sp, #116	; 0x74
 8005fc8:	4617      	mov	r7, r2
 8005fca:	461d      	mov	r5, r3
 8005fcc:	4606      	mov	r6, r0
 8005fce:	b118      	cbz	r0, 8005fd8 <_vfiprintf_r+0x18>
 8005fd0:	6983      	ldr	r3, [r0, #24]
 8005fd2:	b90b      	cbnz	r3, 8005fd8 <_vfiprintf_r+0x18>
 8005fd4:	f7ff fe38 	bl	8005c48 <__sinit>
 8005fd8:	4b7c      	ldr	r3, [pc, #496]	; (80061cc <_vfiprintf_r+0x20c>)
 8005fda:	429c      	cmp	r4, r3
 8005fdc:	d158      	bne.n	8006090 <_vfiprintf_r+0xd0>
 8005fde:	6874      	ldr	r4, [r6, #4]
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	0718      	lsls	r0, r3, #28
 8005fe4:	d55e      	bpl.n	80060a4 <_vfiprintf_r+0xe4>
 8005fe6:	6923      	ldr	r3, [r4, #16]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d05b      	beq.n	80060a4 <_vfiprintf_r+0xe4>
 8005fec:	2300      	movs	r3, #0
 8005fee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff0:	2320      	movs	r3, #32
 8005ff2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ff6:	2330      	movs	r3, #48	; 0x30
 8005ff8:	f04f 0b01 	mov.w	fp, #1
 8005ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006000:	9503      	str	r5, [sp, #12]
 8006002:	46b8      	mov	r8, r7
 8006004:	4645      	mov	r5, r8
 8006006:	f815 3b01 	ldrb.w	r3, [r5], #1
 800600a:	b10b      	cbz	r3, 8006010 <_vfiprintf_r+0x50>
 800600c:	2b25      	cmp	r3, #37	; 0x25
 800600e:	d154      	bne.n	80060ba <_vfiprintf_r+0xfa>
 8006010:	ebb8 0a07 	subs.w	sl, r8, r7
 8006014:	d00b      	beq.n	800602e <_vfiprintf_r+0x6e>
 8006016:	4653      	mov	r3, sl
 8006018:	463a      	mov	r2, r7
 800601a:	4621      	mov	r1, r4
 800601c:	4630      	mov	r0, r6
 800601e:	f7ff ffbc 	bl	8005f9a <__sfputs_r>
 8006022:	3001      	adds	r0, #1
 8006024:	f000 80c2 	beq.w	80061ac <_vfiprintf_r+0x1ec>
 8006028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602a:	4453      	add	r3, sl
 800602c:	9309      	str	r3, [sp, #36]	; 0x24
 800602e:	f898 3000 	ldrb.w	r3, [r8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80ba 	beq.w	80061ac <_vfiprintf_r+0x1ec>
 8006038:	2300      	movs	r3, #0
 800603a:	f04f 32ff 	mov.w	r2, #4294967295
 800603e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006042:	9304      	str	r3, [sp, #16]
 8006044:	9307      	str	r3, [sp, #28]
 8006046:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800604a:	931a      	str	r3, [sp, #104]	; 0x68
 800604c:	46a8      	mov	r8, r5
 800604e:	2205      	movs	r2, #5
 8006050:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006054:	485e      	ldr	r0, [pc, #376]	; (80061d0 <_vfiprintf_r+0x210>)
 8006056:	f000 fafb 	bl	8006650 <memchr>
 800605a:	9b04      	ldr	r3, [sp, #16]
 800605c:	bb78      	cbnz	r0, 80060be <_vfiprintf_r+0xfe>
 800605e:	06d9      	lsls	r1, r3, #27
 8006060:	bf44      	itt	mi
 8006062:	2220      	movmi	r2, #32
 8006064:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006068:	071a      	lsls	r2, r3, #28
 800606a:	bf44      	itt	mi
 800606c:	222b      	movmi	r2, #43	; 0x2b
 800606e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006072:	782a      	ldrb	r2, [r5, #0]
 8006074:	2a2a      	cmp	r2, #42	; 0x2a
 8006076:	d02a      	beq.n	80060ce <_vfiprintf_r+0x10e>
 8006078:	46a8      	mov	r8, r5
 800607a:	2000      	movs	r0, #0
 800607c:	250a      	movs	r5, #10
 800607e:	9a07      	ldr	r2, [sp, #28]
 8006080:	4641      	mov	r1, r8
 8006082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006086:	3b30      	subs	r3, #48	; 0x30
 8006088:	2b09      	cmp	r3, #9
 800608a:	d969      	bls.n	8006160 <_vfiprintf_r+0x1a0>
 800608c:	b360      	cbz	r0, 80060e8 <_vfiprintf_r+0x128>
 800608e:	e024      	b.n	80060da <_vfiprintf_r+0x11a>
 8006090:	4b50      	ldr	r3, [pc, #320]	; (80061d4 <_vfiprintf_r+0x214>)
 8006092:	429c      	cmp	r4, r3
 8006094:	d101      	bne.n	800609a <_vfiprintf_r+0xda>
 8006096:	68b4      	ldr	r4, [r6, #8]
 8006098:	e7a2      	b.n	8005fe0 <_vfiprintf_r+0x20>
 800609a:	4b4f      	ldr	r3, [pc, #316]	; (80061d8 <_vfiprintf_r+0x218>)
 800609c:	429c      	cmp	r4, r3
 800609e:	bf08      	it	eq
 80060a0:	68f4      	ldreq	r4, [r6, #12]
 80060a2:	e79d      	b.n	8005fe0 <_vfiprintf_r+0x20>
 80060a4:	4621      	mov	r1, r4
 80060a6:	4630      	mov	r0, r6
 80060a8:	f7ff fc70 	bl	800598c <__swsetup_r>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d09d      	beq.n	8005fec <_vfiprintf_r+0x2c>
 80060b0:	f04f 30ff 	mov.w	r0, #4294967295
 80060b4:	b01d      	add	sp, #116	; 0x74
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	46a8      	mov	r8, r5
 80060bc:	e7a2      	b.n	8006004 <_vfiprintf_r+0x44>
 80060be:	4a44      	ldr	r2, [pc, #272]	; (80061d0 <_vfiprintf_r+0x210>)
 80060c0:	4645      	mov	r5, r8
 80060c2:	1a80      	subs	r0, r0, r2
 80060c4:	fa0b f000 	lsl.w	r0, fp, r0
 80060c8:	4318      	orrs	r0, r3
 80060ca:	9004      	str	r0, [sp, #16]
 80060cc:	e7be      	b.n	800604c <_vfiprintf_r+0x8c>
 80060ce:	9a03      	ldr	r2, [sp, #12]
 80060d0:	1d11      	adds	r1, r2, #4
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	9103      	str	r1, [sp, #12]
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	db01      	blt.n	80060de <_vfiprintf_r+0x11e>
 80060da:	9207      	str	r2, [sp, #28]
 80060dc:	e004      	b.n	80060e8 <_vfiprintf_r+0x128>
 80060de:	4252      	negs	r2, r2
 80060e0:	f043 0302 	orr.w	r3, r3, #2
 80060e4:	9207      	str	r2, [sp, #28]
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	f898 3000 	ldrb.w	r3, [r8]
 80060ec:	2b2e      	cmp	r3, #46	; 0x2e
 80060ee:	d10e      	bne.n	800610e <_vfiprintf_r+0x14e>
 80060f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80060f4:	2b2a      	cmp	r3, #42	; 0x2a
 80060f6:	d138      	bne.n	800616a <_vfiprintf_r+0x1aa>
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	f108 0802 	add.w	r8, r8, #2
 80060fe:	1d1a      	adds	r2, r3, #4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	9203      	str	r2, [sp, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	bfb8      	it	lt
 8006108:	f04f 33ff 	movlt.w	r3, #4294967295
 800610c:	9305      	str	r3, [sp, #20]
 800610e:	4d33      	ldr	r5, [pc, #204]	; (80061dc <_vfiprintf_r+0x21c>)
 8006110:	2203      	movs	r2, #3
 8006112:	f898 1000 	ldrb.w	r1, [r8]
 8006116:	4628      	mov	r0, r5
 8006118:	f000 fa9a 	bl	8006650 <memchr>
 800611c:	b140      	cbz	r0, 8006130 <_vfiprintf_r+0x170>
 800611e:	2340      	movs	r3, #64	; 0x40
 8006120:	1b40      	subs	r0, r0, r5
 8006122:	fa03 f000 	lsl.w	r0, r3, r0
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	f108 0801 	add.w	r8, r8, #1
 800612c:	4303      	orrs	r3, r0
 800612e:	9304      	str	r3, [sp, #16]
 8006130:	f898 1000 	ldrb.w	r1, [r8]
 8006134:	2206      	movs	r2, #6
 8006136:	482a      	ldr	r0, [pc, #168]	; (80061e0 <_vfiprintf_r+0x220>)
 8006138:	f108 0701 	add.w	r7, r8, #1
 800613c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006140:	f000 fa86 	bl	8006650 <memchr>
 8006144:	2800      	cmp	r0, #0
 8006146:	d037      	beq.n	80061b8 <_vfiprintf_r+0x1f8>
 8006148:	4b26      	ldr	r3, [pc, #152]	; (80061e4 <_vfiprintf_r+0x224>)
 800614a:	bb1b      	cbnz	r3, 8006194 <_vfiprintf_r+0x1d4>
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	3307      	adds	r3, #7
 8006150:	f023 0307 	bic.w	r3, r3, #7
 8006154:	3308      	adds	r3, #8
 8006156:	9303      	str	r3, [sp, #12]
 8006158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800615a:	444b      	add	r3, r9
 800615c:	9309      	str	r3, [sp, #36]	; 0x24
 800615e:	e750      	b.n	8006002 <_vfiprintf_r+0x42>
 8006160:	fb05 3202 	mla	r2, r5, r2, r3
 8006164:	2001      	movs	r0, #1
 8006166:	4688      	mov	r8, r1
 8006168:	e78a      	b.n	8006080 <_vfiprintf_r+0xc0>
 800616a:	2300      	movs	r3, #0
 800616c:	250a      	movs	r5, #10
 800616e:	4619      	mov	r1, r3
 8006170:	f108 0801 	add.w	r8, r8, #1
 8006174:	9305      	str	r3, [sp, #20]
 8006176:	4640      	mov	r0, r8
 8006178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800617c:	3a30      	subs	r2, #48	; 0x30
 800617e:	2a09      	cmp	r2, #9
 8006180:	d903      	bls.n	800618a <_vfiprintf_r+0x1ca>
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0c3      	beq.n	800610e <_vfiprintf_r+0x14e>
 8006186:	9105      	str	r1, [sp, #20]
 8006188:	e7c1      	b.n	800610e <_vfiprintf_r+0x14e>
 800618a:	fb05 2101 	mla	r1, r5, r1, r2
 800618e:	2301      	movs	r3, #1
 8006190:	4680      	mov	r8, r0
 8006192:	e7f0      	b.n	8006176 <_vfiprintf_r+0x1b6>
 8006194:	ab03      	add	r3, sp, #12
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4622      	mov	r2, r4
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <_vfiprintf_r+0x228>)
 800619c:	a904      	add	r1, sp, #16
 800619e:	4630      	mov	r0, r6
 80061a0:	f3af 8000 	nop.w
 80061a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80061a8:	4681      	mov	r9, r0
 80061aa:	d1d5      	bne.n	8006158 <_vfiprintf_r+0x198>
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	065b      	lsls	r3, r3, #25
 80061b0:	f53f af7e 	bmi.w	80060b0 <_vfiprintf_r+0xf0>
 80061b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061b6:	e77d      	b.n	80060b4 <_vfiprintf_r+0xf4>
 80061b8:	ab03      	add	r3, sp, #12
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	4622      	mov	r2, r4
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <_vfiprintf_r+0x228>)
 80061c0:	a904      	add	r1, sp, #16
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 f888 	bl	80062d8 <_printf_i>
 80061c8:	e7ec      	b.n	80061a4 <_vfiprintf_r+0x1e4>
 80061ca:	bf00      	nop
 80061cc:	08006e10 	.word	0x08006e10
 80061d0:	08006e50 	.word	0x08006e50
 80061d4:	08006e30 	.word	0x08006e30
 80061d8:	08006df0 	.word	0x08006df0
 80061dc:	08006e56 	.word	0x08006e56
 80061e0:	08006e5a 	.word	0x08006e5a
 80061e4:	00000000 	.word	0x00000000
 80061e8:	08005f9b 	.word	0x08005f9b

080061ec <_printf_common>:
 80061ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	4691      	mov	r9, r2
 80061f2:	461f      	mov	r7, r3
 80061f4:	688a      	ldr	r2, [r1, #8]
 80061f6:	690b      	ldr	r3, [r1, #16]
 80061f8:	4606      	mov	r6, r0
 80061fa:	4293      	cmp	r3, r2
 80061fc:	bfb8      	it	lt
 80061fe:	4613      	movlt	r3, r2
 8006200:	f8c9 3000 	str.w	r3, [r9]
 8006204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006208:	460c      	mov	r4, r1
 800620a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800620e:	b112      	cbz	r2, 8006216 <_printf_common+0x2a>
 8006210:	3301      	adds	r3, #1
 8006212:	f8c9 3000 	str.w	r3, [r9]
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	0699      	lsls	r1, r3, #26
 800621a:	bf42      	ittt	mi
 800621c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006220:	3302      	addmi	r3, #2
 8006222:	f8c9 3000 	strmi.w	r3, [r9]
 8006226:	6825      	ldr	r5, [r4, #0]
 8006228:	f015 0506 	ands.w	r5, r5, #6
 800622c:	d107      	bne.n	800623e <_printf_common+0x52>
 800622e:	f104 0a19 	add.w	sl, r4, #25
 8006232:	68e3      	ldr	r3, [r4, #12]
 8006234:	f8d9 2000 	ldr.w	r2, [r9]
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	42ab      	cmp	r3, r5
 800623c:	dc29      	bgt.n	8006292 <_printf_common+0xa6>
 800623e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006242:	6822      	ldr	r2, [r4, #0]
 8006244:	3300      	adds	r3, #0
 8006246:	bf18      	it	ne
 8006248:	2301      	movne	r3, #1
 800624a:	0692      	lsls	r2, r2, #26
 800624c:	d42e      	bmi.n	80062ac <_printf_common+0xc0>
 800624e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006252:	4639      	mov	r1, r7
 8006254:	4630      	mov	r0, r6
 8006256:	47c0      	blx	r8
 8006258:	3001      	adds	r0, #1
 800625a:	d021      	beq.n	80062a0 <_printf_common+0xb4>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	68e5      	ldr	r5, [r4, #12]
 8006260:	f003 0306 	and.w	r3, r3, #6
 8006264:	2b04      	cmp	r3, #4
 8006266:	bf18      	it	ne
 8006268:	2500      	movne	r5, #0
 800626a:	f8d9 2000 	ldr.w	r2, [r9]
 800626e:	f04f 0900 	mov.w	r9, #0
 8006272:	bf08      	it	eq
 8006274:	1aad      	subeq	r5, r5, r2
 8006276:	68a3      	ldr	r3, [r4, #8]
 8006278:	6922      	ldr	r2, [r4, #16]
 800627a:	bf08      	it	eq
 800627c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006280:	4293      	cmp	r3, r2
 8006282:	bfc4      	itt	gt
 8006284:	1a9b      	subgt	r3, r3, r2
 8006286:	18ed      	addgt	r5, r5, r3
 8006288:	341a      	adds	r4, #26
 800628a:	454d      	cmp	r5, r9
 800628c:	d11a      	bne.n	80062c4 <_printf_common+0xd8>
 800628e:	2000      	movs	r0, #0
 8006290:	e008      	b.n	80062a4 <_printf_common+0xb8>
 8006292:	2301      	movs	r3, #1
 8006294:	4652      	mov	r2, sl
 8006296:	4639      	mov	r1, r7
 8006298:	4630      	mov	r0, r6
 800629a:	47c0      	blx	r8
 800629c:	3001      	adds	r0, #1
 800629e:	d103      	bne.n	80062a8 <_printf_common+0xbc>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7c2      	b.n	8006232 <_printf_common+0x46>
 80062ac:	2030      	movs	r0, #48	; 0x30
 80062ae:	18e1      	adds	r1, r4, r3
 80062b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062ba:	4422      	add	r2, r4
 80062bc:	3302      	adds	r3, #2
 80062be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062c2:	e7c4      	b.n	800624e <_printf_common+0x62>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4622      	mov	r2, r4
 80062c8:	4639      	mov	r1, r7
 80062ca:	4630      	mov	r0, r6
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0e6      	beq.n	80062a0 <_printf_common+0xb4>
 80062d2:	f109 0901 	add.w	r9, r9, #1
 80062d6:	e7d8      	b.n	800628a <_printf_common+0x9e>

080062d8 <_printf_i>:
 80062d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80062e0:	460c      	mov	r4, r1
 80062e2:	7e09      	ldrb	r1, [r1, #24]
 80062e4:	b085      	sub	sp, #20
 80062e6:	296e      	cmp	r1, #110	; 0x6e
 80062e8:	4617      	mov	r7, r2
 80062ea:	4606      	mov	r6, r0
 80062ec:	4698      	mov	r8, r3
 80062ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062f0:	f000 80b3 	beq.w	800645a <_printf_i+0x182>
 80062f4:	d822      	bhi.n	800633c <_printf_i+0x64>
 80062f6:	2963      	cmp	r1, #99	; 0x63
 80062f8:	d036      	beq.n	8006368 <_printf_i+0x90>
 80062fa:	d80a      	bhi.n	8006312 <_printf_i+0x3a>
 80062fc:	2900      	cmp	r1, #0
 80062fe:	f000 80b9 	beq.w	8006474 <_printf_i+0x19c>
 8006302:	2958      	cmp	r1, #88	; 0x58
 8006304:	f000 8083 	beq.w	800640e <_printf_i+0x136>
 8006308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800630c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006310:	e032      	b.n	8006378 <_printf_i+0xa0>
 8006312:	2964      	cmp	r1, #100	; 0x64
 8006314:	d001      	beq.n	800631a <_printf_i+0x42>
 8006316:	2969      	cmp	r1, #105	; 0x69
 8006318:	d1f6      	bne.n	8006308 <_printf_i+0x30>
 800631a:	6820      	ldr	r0, [r4, #0]
 800631c:	6813      	ldr	r3, [r2, #0]
 800631e:	0605      	lsls	r5, r0, #24
 8006320:	f103 0104 	add.w	r1, r3, #4
 8006324:	d52a      	bpl.n	800637c <_printf_i+0xa4>
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6011      	str	r1, [r2, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	da03      	bge.n	8006336 <_printf_i+0x5e>
 800632e:	222d      	movs	r2, #45	; 0x2d
 8006330:	425b      	negs	r3, r3
 8006332:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006336:	486f      	ldr	r0, [pc, #444]	; (80064f4 <_printf_i+0x21c>)
 8006338:	220a      	movs	r2, #10
 800633a:	e039      	b.n	80063b0 <_printf_i+0xd8>
 800633c:	2973      	cmp	r1, #115	; 0x73
 800633e:	f000 809d 	beq.w	800647c <_printf_i+0x1a4>
 8006342:	d808      	bhi.n	8006356 <_printf_i+0x7e>
 8006344:	296f      	cmp	r1, #111	; 0x6f
 8006346:	d020      	beq.n	800638a <_printf_i+0xb2>
 8006348:	2970      	cmp	r1, #112	; 0x70
 800634a:	d1dd      	bne.n	8006308 <_printf_i+0x30>
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	f043 0320 	orr.w	r3, r3, #32
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	e003      	b.n	800635e <_printf_i+0x86>
 8006356:	2975      	cmp	r1, #117	; 0x75
 8006358:	d017      	beq.n	800638a <_printf_i+0xb2>
 800635a:	2978      	cmp	r1, #120	; 0x78
 800635c:	d1d4      	bne.n	8006308 <_printf_i+0x30>
 800635e:	2378      	movs	r3, #120	; 0x78
 8006360:	4865      	ldr	r0, [pc, #404]	; (80064f8 <_printf_i+0x220>)
 8006362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006366:	e055      	b.n	8006414 <_printf_i+0x13c>
 8006368:	6813      	ldr	r3, [r2, #0]
 800636a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800636e:	1d19      	adds	r1, r3, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6011      	str	r1, [r2, #0]
 8006374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006378:	2301      	movs	r3, #1
 800637a:	e08c      	b.n	8006496 <_printf_i+0x1be>
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006382:	6011      	str	r1, [r2, #0]
 8006384:	bf18      	it	ne
 8006386:	b21b      	sxthne	r3, r3
 8006388:	e7cf      	b.n	800632a <_printf_i+0x52>
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	6825      	ldr	r5, [r4, #0]
 800638e:	1d18      	adds	r0, r3, #4
 8006390:	6010      	str	r0, [r2, #0]
 8006392:	0628      	lsls	r0, r5, #24
 8006394:	d501      	bpl.n	800639a <_printf_i+0xc2>
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	e002      	b.n	80063a0 <_printf_i+0xc8>
 800639a:	0668      	lsls	r0, r5, #25
 800639c:	d5fb      	bpl.n	8006396 <_printf_i+0xbe>
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	296f      	cmp	r1, #111	; 0x6f
 80063a2:	bf14      	ite	ne
 80063a4:	220a      	movne	r2, #10
 80063a6:	2208      	moveq	r2, #8
 80063a8:	4852      	ldr	r0, [pc, #328]	; (80064f4 <_printf_i+0x21c>)
 80063aa:	2100      	movs	r1, #0
 80063ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063b0:	6865      	ldr	r5, [r4, #4]
 80063b2:	2d00      	cmp	r5, #0
 80063b4:	60a5      	str	r5, [r4, #8]
 80063b6:	f2c0 8095 	blt.w	80064e4 <_printf_i+0x20c>
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	f021 0104 	bic.w	r1, r1, #4
 80063c0:	6021      	str	r1, [r4, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d13d      	bne.n	8006442 <_printf_i+0x16a>
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	f040 808e 	bne.w	80064e8 <_printf_i+0x210>
 80063cc:	4665      	mov	r5, ip
 80063ce:	2a08      	cmp	r2, #8
 80063d0:	d10b      	bne.n	80063ea <_printf_i+0x112>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	07db      	lsls	r3, r3, #31
 80063d6:	d508      	bpl.n	80063ea <_printf_i+0x112>
 80063d8:	6923      	ldr	r3, [r4, #16]
 80063da:	6862      	ldr	r2, [r4, #4]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bfde      	ittt	le
 80063e0:	2330      	movle	r3, #48	; 0x30
 80063e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063ea:	ebac 0305 	sub.w	r3, ip, r5
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	f8cd 8000 	str.w	r8, [sp]
 80063f4:	463b      	mov	r3, r7
 80063f6:	aa03      	add	r2, sp, #12
 80063f8:	4621      	mov	r1, r4
 80063fa:	4630      	mov	r0, r6
 80063fc:	f7ff fef6 	bl	80061ec <_printf_common>
 8006400:	3001      	adds	r0, #1
 8006402:	d14d      	bne.n	80064a0 <_printf_i+0x1c8>
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	b005      	add	sp, #20
 800640a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800640e:	4839      	ldr	r0, [pc, #228]	; (80064f4 <_printf_i+0x21c>)
 8006410:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006414:	6813      	ldr	r3, [r2, #0]
 8006416:	6821      	ldr	r1, [r4, #0]
 8006418:	1d1d      	adds	r5, r3, #4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6015      	str	r5, [r2, #0]
 800641e:	060a      	lsls	r2, r1, #24
 8006420:	d50b      	bpl.n	800643a <_printf_i+0x162>
 8006422:	07ca      	lsls	r2, r1, #31
 8006424:	bf44      	itt	mi
 8006426:	f041 0120 	orrmi.w	r1, r1, #32
 800642a:	6021      	strmi	r1, [r4, #0]
 800642c:	b91b      	cbnz	r3, 8006436 <_printf_i+0x15e>
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	f022 0220 	bic.w	r2, r2, #32
 8006434:	6022      	str	r2, [r4, #0]
 8006436:	2210      	movs	r2, #16
 8006438:	e7b7      	b.n	80063aa <_printf_i+0xd2>
 800643a:	064d      	lsls	r5, r1, #25
 800643c:	bf48      	it	mi
 800643e:	b29b      	uxthmi	r3, r3
 8006440:	e7ef      	b.n	8006422 <_printf_i+0x14a>
 8006442:	4665      	mov	r5, ip
 8006444:	fbb3 f1f2 	udiv	r1, r3, r2
 8006448:	fb02 3311 	mls	r3, r2, r1, r3
 800644c:	5cc3      	ldrb	r3, [r0, r3]
 800644e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006452:	460b      	mov	r3, r1
 8006454:	2900      	cmp	r1, #0
 8006456:	d1f5      	bne.n	8006444 <_printf_i+0x16c>
 8006458:	e7b9      	b.n	80063ce <_printf_i+0xf6>
 800645a:	6813      	ldr	r3, [r2, #0]
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	1d18      	adds	r0, r3, #4
 8006460:	6961      	ldr	r1, [r4, #20]
 8006462:	6010      	str	r0, [r2, #0]
 8006464:	0628      	lsls	r0, r5, #24
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	d501      	bpl.n	800646e <_printf_i+0x196>
 800646a:	6019      	str	r1, [r3, #0]
 800646c:	e002      	b.n	8006474 <_printf_i+0x19c>
 800646e:	066a      	lsls	r2, r5, #25
 8006470:	d5fb      	bpl.n	800646a <_printf_i+0x192>
 8006472:	8019      	strh	r1, [r3, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	4665      	mov	r5, ip
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	e7b9      	b.n	80063f0 <_printf_i+0x118>
 800647c:	6813      	ldr	r3, [r2, #0]
 800647e:	1d19      	adds	r1, r3, #4
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	681d      	ldr	r5, [r3, #0]
 8006484:	6862      	ldr	r2, [r4, #4]
 8006486:	2100      	movs	r1, #0
 8006488:	4628      	mov	r0, r5
 800648a:	f000 f8e1 	bl	8006650 <memchr>
 800648e:	b108      	cbz	r0, 8006494 <_printf_i+0x1bc>
 8006490:	1b40      	subs	r0, r0, r5
 8006492:	6060      	str	r0, [r4, #4]
 8006494:	6863      	ldr	r3, [r4, #4]
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	2300      	movs	r3, #0
 800649a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800649e:	e7a7      	b.n	80063f0 <_printf_i+0x118>
 80064a0:	6923      	ldr	r3, [r4, #16]
 80064a2:	462a      	mov	r2, r5
 80064a4:	4639      	mov	r1, r7
 80064a6:	4630      	mov	r0, r6
 80064a8:	47c0      	blx	r8
 80064aa:	3001      	adds	r0, #1
 80064ac:	d0aa      	beq.n	8006404 <_printf_i+0x12c>
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	079b      	lsls	r3, r3, #30
 80064b2:	d413      	bmi.n	80064dc <_printf_i+0x204>
 80064b4:	68e0      	ldr	r0, [r4, #12]
 80064b6:	9b03      	ldr	r3, [sp, #12]
 80064b8:	4298      	cmp	r0, r3
 80064ba:	bfb8      	it	lt
 80064bc:	4618      	movlt	r0, r3
 80064be:	e7a3      	b.n	8006408 <_printf_i+0x130>
 80064c0:	2301      	movs	r3, #1
 80064c2:	464a      	mov	r2, r9
 80064c4:	4639      	mov	r1, r7
 80064c6:	4630      	mov	r0, r6
 80064c8:	47c0      	blx	r8
 80064ca:	3001      	adds	r0, #1
 80064cc:	d09a      	beq.n	8006404 <_printf_i+0x12c>
 80064ce:	3501      	adds	r5, #1
 80064d0:	68e3      	ldr	r3, [r4, #12]
 80064d2:	9a03      	ldr	r2, [sp, #12]
 80064d4:	1a9b      	subs	r3, r3, r2
 80064d6:	42ab      	cmp	r3, r5
 80064d8:	dcf2      	bgt.n	80064c0 <_printf_i+0x1e8>
 80064da:	e7eb      	b.n	80064b4 <_printf_i+0x1dc>
 80064dc:	2500      	movs	r5, #0
 80064de:	f104 0919 	add.w	r9, r4, #25
 80064e2:	e7f5      	b.n	80064d0 <_printf_i+0x1f8>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ac      	bne.n	8006442 <_printf_i+0x16a>
 80064e8:	7803      	ldrb	r3, [r0, #0]
 80064ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064f2:	e76c      	b.n	80063ce <_printf_i+0xf6>
 80064f4:	08006e61 	.word	0x08006e61
 80064f8:	08006e72 	.word	0x08006e72

080064fc <_sbrk_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	2300      	movs	r3, #0
 8006500:	4c05      	ldr	r4, [pc, #20]	; (8006518 <_sbrk_r+0x1c>)
 8006502:	4605      	mov	r5, r0
 8006504:	4608      	mov	r0, r1
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	f7fa f8f0 	bl	80006ec <_sbrk>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_sbrk_r+0x1a>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	b103      	cbz	r3, 8006516 <_sbrk_r+0x1a>
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	20000418 	.word	0x20000418

0800651c <__sread>:
 800651c:	b510      	push	{r4, lr}
 800651e:	460c      	mov	r4, r1
 8006520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006524:	f000 f8a4 	bl	8006670 <_read_r>
 8006528:	2800      	cmp	r0, #0
 800652a:	bfab      	itete	ge
 800652c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800652e:	89a3      	ldrhlt	r3, [r4, #12]
 8006530:	181b      	addge	r3, r3, r0
 8006532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006536:	bfac      	ite	ge
 8006538:	6563      	strge	r3, [r4, #84]	; 0x54
 800653a:	81a3      	strhlt	r3, [r4, #12]
 800653c:	bd10      	pop	{r4, pc}

0800653e <__swrite>:
 800653e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006542:	461f      	mov	r7, r3
 8006544:	898b      	ldrh	r3, [r1, #12]
 8006546:	4605      	mov	r5, r0
 8006548:	05db      	lsls	r3, r3, #23
 800654a:	460c      	mov	r4, r1
 800654c:	4616      	mov	r6, r2
 800654e:	d505      	bpl.n	800655c <__swrite+0x1e>
 8006550:	2302      	movs	r3, #2
 8006552:	2200      	movs	r2, #0
 8006554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006558:	f000 f868 	bl	800662c <_lseek_r>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	4632      	mov	r2, r6
 8006560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800656a:	463b      	mov	r3, r7
 800656c:	4628      	mov	r0, r5
 800656e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006572:	f000 b817 	b.w	80065a4 <_write_r>

08006576 <__sseek>:
 8006576:	b510      	push	{r4, lr}
 8006578:	460c      	mov	r4, r1
 800657a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800657e:	f000 f855 	bl	800662c <_lseek_r>
 8006582:	1c43      	adds	r3, r0, #1
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	bf15      	itete	ne
 8006588:	6560      	strne	r0, [r4, #84]	; 0x54
 800658a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800658e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006592:	81a3      	strheq	r3, [r4, #12]
 8006594:	bf18      	it	ne
 8006596:	81a3      	strhne	r3, [r4, #12]
 8006598:	bd10      	pop	{r4, pc}

0800659a <__sclose>:
 800659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659e:	f000 b813 	b.w	80065c8 <_close_r>
	...

080065a4 <_write_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4605      	mov	r5, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	2200      	movs	r2, #0
 80065ae:	4c05      	ldr	r4, [pc, #20]	; (80065c4 <_write_r+0x20>)
 80065b0:	6022      	str	r2, [r4, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f7fa f84d 	bl	8000652 <_write>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_write_r+0x1e>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_write_r+0x1e>
 80065c0:	602b      	str	r3, [r5, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	20000418 	.word	0x20000418

080065c8 <_close_r>:
 80065c8:	b538      	push	{r3, r4, r5, lr}
 80065ca:	2300      	movs	r3, #0
 80065cc:	4c05      	ldr	r4, [pc, #20]	; (80065e4 <_close_r+0x1c>)
 80065ce:	4605      	mov	r5, r0
 80065d0:	4608      	mov	r0, r1
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	f7fa f859 	bl	800068a <_close>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_close_r+0x1a>
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_close_r+0x1a>
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000418 	.word	0x20000418

080065e8 <_fstat_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	2300      	movs	r3, #0
 80065ec:	4c06      	ldr	r4, [pc, #24]	; (8006608 <_fstat_r+0x20>)
 80065ee:	4605      	mov	r5, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	f7fa f853 	bl	80006a0 <_fstat>
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	d102      	bne.n	8006604 <_fstat_r+0x1c>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	b103      	cbz	r3, 8006604 <_fstat_r+0x1c>
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	bd38      	pop	{r3, r4, r5, pc}
 8006606:	bf00      	nop
 8006608:	20000418 	.word	0x20000418

0800660c <_isatty_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	2300      	movs	r3, #0
 8006610:	4c05      	ldr	r4, [pc, #20]	; (8006628 <_isatty_r+0x1c>)
 8006612:	4605      	mov	r5, r0
 8006614:	4608      	mov	r0, r1
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	f7fa f851 	bl	80006be <_isatty>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_isatty_r+0x1a>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	b103      	cbz	r3, 8006626 <_isatty_r+0x1a>
 8006624:	602b      	str	r3, [r5, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	20000418 	.word	0x20000418

0800662c <_lseek_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4605      	mov	r5, r0
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	2200      	movs	r2, #0
 8006636:	4c05      	ldr	r4, [pc, #20]	; (800664c <_lseek_r+0x20>)
 8006638:	6022      	str	r2, [r4, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	f7fa f849 	bl	80006d2 <_lseek>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_lseek_r+0x1e>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	b103      	cbz	r3, 800664a <_lseek_r+0x1e>
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	20000418 	.word	0x20000418

08006650 <memchr>:
 8006650:	b510      	push	{r4, lr}
 8006652:	b2c9      	uxtb	r1, r1
 8006654:	4402      	add	r2, r0
 8006656:	4290      	cmp	r0, r2
 8006658:	4603      	mov	r3, r0
 800665a:	d101      	bne.n	8006660 <memchr+0x10>
 800665c:	2300      	movs	r3, #0
 800665e:	e003      	b.n	8006668 <memchr+0x18>
 8006660:	781c      	ldrb	r4, [r3, #0]
 8006662:	3001      	adds	r0, #1
 8006664:	428c      	cmp	r4, r1
 8006666:	d1f6      	bne.n	8006656 <memchr+0x6>
 8006668:	4618      	mov	r0, r3
 800666a:	bd10      	pop	{r4, pc}

0800666c <__malloc_lock>:
 800666c:	4770      	bx	lr

0800666e <__malloc_unlock>:
 800666e:	4770      	bx	lr

08006670 <_read_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4605      	mov	r5, r0
 8006674:	4608      	mov	r0, r1
 8006676:	4611      	mov	r1, r2
 8006678:	2200      	movs	r2, #0
 800667a:	4c05      	ldr	r4, [pc, #20]	; (8006690 <_read_r+0x20>)
 800667c:	6022      	str	r2, [r4, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f7f9 ffca 	bl	8000618 <_read>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_read_r+0x1e>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	b103      	cbz	r3, 800668e <_read_r+0x1e>
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	20000418 	.word	0x20000418

08006694 <_init>:
 8006694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006696:	bf00      	nop
 8006698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800669a:	bc08      	pop	{r3}
 800669c:	469e      	mov	lr, r3
 800669e:	4770      	bx	lr

080066a0 <_fini>:
 80066a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a2:	bf00      	nop
 80066a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a6:	bc08      	pop	{r3}
 80066a8:	469e      	mov	lr, r3
 80066aa:	4770      	bx	lr
